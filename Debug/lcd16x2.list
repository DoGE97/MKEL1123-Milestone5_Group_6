
lcd16x2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006268  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00023d5c  08006440  08006440  00016440  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a19c  0802a19c  00040a78  2**0
                  CONTENTS
  4 .ARM          00000008  0802a19c  0802a19c  0003a19c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a1a4  0802a1a4  00040a78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802a1a4  0802a1a4  0003a1a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802a1a8  0802a1a8  0003a1a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a78  20000000  0802a1ac  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000bfe0  20000a78  0802ac24  00040a78  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  2000ca58  0802ac24  0004ca58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040a78  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b53a  00000000  00000000  00040aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c5f  00000000  00000000  0004bfe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b8  00000000  00000000  0004dc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000700  00000000  00000000  0004e400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002314b  00000000  00000000  0004eb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad1a  00000000  00000000  00071c4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3bff  00000000  00000000  0007c965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cb  00000000  00000000  00150564  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002830  00000000  00000000  00150630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000009c  00000000  00000000  00152e60  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  00152efc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000a78 	.word	0x20000a78
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006420 	.word	0x08006420

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000a7c 	.word	0x20000a7c
 800020c:	08006420 	.word	0x08006420

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 80005c4:	b5b0      	push	{r4, r5, r7, lr}
 80005c6:	b08a      	sub	sp, #40	; 0x28
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
 80005d0:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 80005d2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80005d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 80005da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80005de:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 80005e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005e2:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80005e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80005e6:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 80005f4:	f107 0310 	add.w	r3, r7, #16
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 f80e 	bl	800061a <Lcd_init>

	return lcd;
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	461d      	mov	r5, r3
 8000602:	f107 0410 	add.w	r4, r7, #16
 8000606:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000608:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800060a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800060e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000612:	68f8      	ldr	r0, [r7, #12]
 8000614:	3728      	adds	r7, #40	; 0x28
 8000616:	46bd      	mov	sp, r7
 8000618:	bdb0      	pop	{r4, r5, r7, pc}

0800061a <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 800061a:	b580      	push	{r7, lr}
 800061c:	b082      	sub	sp, #8
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	7d9b      	ldrb	r3, [r3, #22]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d10c      	bne.n	8000644 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 800062a:	2133      	movs	r1, #51	; 0x33
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f000 f86f 	bl	8000710 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000632:	2132      	movs	r1, #50	; 0x32
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f000 f86b 	bl	8000710 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 800063a:	2128      	movs	r1, #40	; 0x28
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f000 f867 	bl	8000710 <lcd_write_command>
 8000642:	e003      	b.n	800064c <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000644:	2138      	movs	r1, #56	; 0x38
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f000 f862 	bl	8000710 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 800064c:	2101      	movs	r1, #1
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f000 f85e 	bl	8000710 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000654:	210c      	movs	r1, #12
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	f000 f85a 	bl	8000710 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 800065c:	2106      	movs	r1, #6
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f000 f856 	bl	8000710 <lcd_write_command>
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	683a      	ldr	r2, [r7, #0]
 800067c:	4906      	ldr	r1, [pc, #24]	; (8000698 <Lcd_int+0x2c>)
 800067e:	4618      	mov	r0, r3
 8000680:	f004 fe4c 	bl	800531c <siprintf>

	Lcd_string(lcd, buffer);
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	4619      	mov	r1, r3
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f000 f806 	bl	800069c <Lcd_string>
}
 8000690:	bf00      	nop
 8000692:	3718      	adds	r7, #24
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	08006440 	.word	0x08006440

0800069c <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 800069c:	b590      	push	{r4, r7, lr}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 80006a6:	2300      	movs	r3, #0
 80006a8:	73fb      	strb	r3, [r7, #15]
 80006aa:	e00a      	b.n	80006c2 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
 80006ae:	683a      	ldr	r2, [r7, #0]
 80006b0:	4413      	add	r3, r2
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	4619      	mov	r1, r3
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f000 f858 	bl	800076c <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
 80006be:	3301      	adds	r3, #1
 80006c0:	73fb      	strb	r3, [r7, #15]
 80006c2:	7bfc      	ldrb	r4, [r7, #15]
 80006c4:	6838      	ldr	r0, [r7, #0]
 80006c6:	f7ff fda3 	bl	8000210 <strlen>
 80006ca:	4603      	mov	r3, r0
 80006cc:	429c      	cmp	r4, r3
 80006ce:	d3ed      	bcc.n	80006ac <Lcd_string+0x10>
	}
}
 80006d0:	bf00      	nop
 80006d2:	bf00      	nop
 80006d4:	3714      	adds	r7, #20
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd90      	pop	{r4, r7, pc}
	...

080006dc <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	460b      	mov	r3, r1
 80006e6:	70fb      	strb	r3, [r7, #3]
 80006e8:	4613      	mov	r3, r2
 80006ea:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80006ec:	78fb      	ldrb	r3, [r7, #3]
 80006ee:	4a07      	ldr	r2, [pc, #28]	; (800070c <Lcd_cursor+0x30>)
 80006f0:	5cd2      	ldrb	r2, [r2, r3]
 80006f2:	78bb      	ldrb	r3, [r7, #2]
 80006f4:	4413      	add	r3, r2
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	3b80      	subs	r3, #128	; 0x80
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	4619      	mov	r1, r3
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f000 f806 	bl	8000710 <lcd_write_command>
	#endif
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	0800658c 	.word	0x0800658c

08000710 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	460b      	mov	r3, r1
 800071a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	6898      	ldr	r0, [r3, #8]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	899b      	ldrh	r3, [r3, #12]
 8000724:	2200      	movs	r2, #0
 8000726:	4619      	mov	r1, r3
 8000728:	f000 fef2 	bl	8001510 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	7d9b      	ldrb	r3, [r3, #22]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d111      	bne.n	8000758 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000734:	78fb      	ldrb	r3, [r7, #3]
 8000736:	091b      	lsrs	r3, r3, #4
 8000738:	b2db      	uxtb	r3, r3
 800073a:	2204      	movs	r2, #4
 800073c:	4619      	mov	r1, r3
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f000 f842 	bl	80007c8 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000744:	78fb      	ldrb	r3, [r7, #3]
 8000746:	f003 030f 	and.w	r3, r3, #15
 800074a:	b2db      	uxtb	r3, r3
 800074c:	2204      	movs	r2, #4
 800074e:	4619      	mov	r1, r3
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f000 f839 	bl	80007c8 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000756:	e005      	b.n	8000764 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000758:	78fb      	ldrb	r3, [r7, #3]
 800075a:	2208      	movs	r2, #8
 800075c:	4619      	mov	r1, r3
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f000 f832 	bl	80007c8 <lcd_write>
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	6898      	ldr	r0, [r3, #8]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	899b      	ldrh	r3, [r3, #12]
 8000780:	2201      	movs	r2, #1
 8000782:	4619      	mov	r1, r3
 8000784:	f000 fec4 	bl	8001510 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	7d9b      	ldrb	r3, [r3, #22]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d111      	bne.n	80007b4 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000790:	78fb      	ldrb	r3, [r7, #3]
 8000792:	091b      	lsrs	r3, r3, #4
 8000794:	b2db      	uxtb	r3, r3
 8000796:	2204      	movs	r2, #4
 8000798:	4619      	mov	r1, r3
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f000 f814 	bl	80007c8 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 80007a0:	78fb      	ldrb	r3, [r7, #3]
 80007a2:	f003 030f 	and.w	r3, r3, #15
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2204      	movs	r2, #4
 80007aa:	4619      	mov	r1, r3
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f000 f80b 	bl	80007c8 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 80007b2:	e005      	b.n	80007c0 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 80007b4:	78fb      	ldrb	r3, [r7, #3]
 80007b6:	2208      	movs	r2, #8
 80007b8:	4619      	mov	r1, r3
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f000 f804 	bl	80007c8 <lcd_write>
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	460b      	mov	r3, r1
 80007d2:	70fb      	strb	r3, [r7, #3]
 80007d4:	4613      	mov	r3, r2
 80007d6:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80007d8:	2300      	movs	r3, #0
 80007da:	73fb      	strb	r3, [r7, #15]
 80007dc:	e019      	b.n	8000812 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681a      	ldr	r2, [r3, #0]
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	4413      	add	r3, r2
 80007e8:	6818      	ldr	r0, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	685a      	ldr	r2, [r3, #4]
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	4413      	add	r3, r2
 80007f4:	8819      	ldrh	r1, [r3, #0]
 80007f6:	78fa      	ldrb	r2, [r7, #3]
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	fa42 f303 	asr.w	r3, r2, r3
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	b2db      	uxtb	r3, r3
 8000806:	461a      	mov	r2, r3
 8000808:	f000 fe82 	bl	8001510 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 800080c:	7bfb      	ldrb	r3, [r7, #15]
 800080e:	3301      	adds	r3, #1
 8000810:	73fb      	strb	r3, [r7, #15]
 8000812:	7bfa      	ldrb	r2, [r7, #15]
 8000814:	78bb      	ldrb	r3, [r7, #2]
 8000816:	429a      	cmp	r2, r3
 8000818:	d3e1      	bcc.n	80007de <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	6918      	ldr	r0, [r3, #16]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	8a9b      	ldrh	r3, [r3, #20]
 8000822:	2201      	movs	r2, #1
 8000824:	4619      	mov	r1, r3
 8000826:	f000 fe73 	bl	8001510 <HAL_GPIO_WritePin>
	DELAY(1);
 800082a:	2001      	movs	r0, #1
 800082c:	f000 fbd2 	bl	8000fd4 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	6918      	ldr	r0, [r3, #16]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	8a9b      	ldrh	r3, [r3, #20]
 8000838:	2200      	movs	r2, #0
 800083a:	4619      	mov	r1, r3
 800083c:	f000 fe68 	bl	8001510 <HAL_GPIO_WritePin>
}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <aiRun.0>:

   }

 //To run the AI
  int aiRun(const void *in_data, void *out_data)
  {
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	4664      	mov	r4, ip
 8000854:	f8c7 c004 	str.w	ip, [r7, #4]
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000858:	2120      	movs	r1, #32
 800085a:	4811      	ldr	r0, [pc, #68]	; (80008a0 <aiRun.0+0x58>)
 800085c:	f000 fe71 	bl	8001542 <HAL_GPIO_TogglePin>

    nbatch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8000860:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <aiRun.0+0x5c>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a10      	ldr	r2, [pc, #64]	; (80008a8 <aiRun.0+0x60>)
 8000866:	4911      	ldr	r1, [pc, #68]	; (80008ac <aiRun.0+0x64>)
 8000868:	4618      	mov	r0, r3
 800086a:	f001 ff45 	bl	80026f8 <ai_network_run>
 800086e:	4603      	mov	r3, r0
 8000870:	6023      	str	r3, [r4, #0]
        if (nbatch != 1){
 8000872:	6823      	ldr	r3, [r4, #0]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d002      	beq.n	800087e <aiRun.0+0x36>
      	  printf("Error: could not run inference\n");
 8000878:	480d      	ldr	r0, [pc, #52]	; (80008b0 <aiRun.0+0x68>)
 800087a:	f004 fd37 	bl	80052ec <puts>
        }

    y_val = ((char*)out_data);
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	b2db      	uxtb	r3, r3
 8000882:	7123      	strb	r3, [r4, #4]
    printf ("\n\Prediction class: %s", y_val);
 8000884:	7923      	ldrb	r3, [r4, #4]
 8000886:	4619      	mov	r1, r3
 8000888:	480a      	ldr	r0, [pc, #40]	; (80008b4 <aiRun.0+0x6c>)
 800088a:	f004 fca9 	bl	80051e0 <iprintf>
    HAL_Delay(100);  //adding delay
 800088e:	2064      	movs	r0, #100	; 0x64
 8000890:	f000 fba0 	bl	8000fd4 <HAL_Delay>
  }
 8000894:	bf00      	nop
 8000896:	4618      	mov	r0, r3
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	bd90      	pop	{r4, r7, pc}
 800089e:	bf00      	nop
 80008a0:	40020000 	.word	0x40020000
 80008a4:	2000c96c 	.word	0x2000c96c
 80008a8:	20000018 	.word	0x20000018
 80008ac:	20000000 	.word	0x20000000
 80008b0:	0800646c 	.word	0x0800646c
 80008b4:	0800648c 	.word	0x0800648c

080008b8 <main>:
{
 80008b8:	b5b0      	push	{r4, r5, r7, lr}
 80008ba:	b0ac      	sub	sp, #176	; 0xb0
 80008bc:	af04      	add	r7, sp, #16
int main(void)
 80008be:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80008c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		  const char* tsflow_label[] = {"Admars", "Ahodki", "Ajones", "Asheal", "Chris"};
 80008c6:	4b59      	ldr	r3, [pc, #356]	; (8000a2c <main+0x174>)
 80008c8:	f107 0478 	add.w	r4, r7, #120	; 0x78
 80008cc:	461d      	mov	r5, r3
 80008ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008d2:	682b      	ldr	r3, [r5, #0]
 80008d4:	6023      	str	r3, [r4, #0]
		  const ai_network_params params = {
 80008d6:	4b56      	ldr	r3, [pc, #344]	; (8000a30 <main+0x178>)
 80008d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80008da:	2301      	movs	r3, #1
 80008dc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80008e0:	2301      	movs	r3, #1
 80008e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80008e6:	2301      	movs	r3, #1
 80008e8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80008ec:	4b51      	ldr	r3, [pc, #324]	; (8000a34 <main+0x17c>)
 80008ee:	657b      	str	r3, [r7, #84]	; 0x54
		          AI_NETWORK_PARAMS_INIT(AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 80008f0:	f001 ff12 	bl	8002718 <ai_network_data_weights_get>
 80008f4:	4603      	mov	r3, r0
		  const ai_network_params params = {
 80008f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80008f8:	2300      	movs	r3, #0
 80008fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80008fc:	4b4e      	ldr	r3, [pc, #312]	; (8000a38 <main+0x180>)
 80008fe:	663b      	str	r3, [r7, #96]	; 0x60
 8000900:	2301      	movs	r3, #1
 8000902:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8000906:	2301      	movs	r3, #1
 8000908:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800090c:	2301      	movs	r3, #1
 800090e:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8000912:	f648 6380 	movw	r3, #36480	; 0x8e80
 8000916:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000918:	4b48      	ldr	r3, [pc, #288]	; (8000a3c <main+0x184>)
 800091a:	673b      	str	r3, [r7, #112]	; 0x70
 800091c:	2300      	movs	r3, #0
 800091e:	677b      	str	r3, [r7, #116]	; 0x74
		    ai_input[0].n_batches = 1;
 8000920:	4b47      	ldr	r3, [pc, #284]	; (8000a40 <main+0x188>)
 8000922:	2201      	movs	r2, #1
 8000924:	809a      	strh	r2, [r3, #4]
		    ai_input[0].data = AI_HANDLE_PTR(in_data);
 8000926:	4b46      	ldr	r3, [pc, #280]	; (8000a40 <main+0x188>)
 8000928:	4a46      	ldr	r2, [pc, #280]	; (8000a44 <main+0x18c>)
 800092a:	611a      	str	r2, [r3, #16]
		    ai_output[0].n_batches = 1;
 800092c:	4b46      	ldr	r3, [pc, #280]	; (8000a48 <main+0x190>)
 800092e:	2201      	movs	r2, #1
 8000930:	809a      	strh	r2, [r3, #4]
		    ai_output[0].data = AI_HANDLE_PTR(out_data);
 8000932:	4b45      	ldr	r3, [pc, #276]	; (8000a48 <main+0x190>)
 8000934:	4a45      	ldr	r2, [pc, #276]	; (8000a4c <main+0x194>)
 8000936:	611a      	str	r2, [r3, #16]
  HAL_Init();
 8000938:	f000 fada 	bl	8000ef0 <HAL_Init>
  SystemClock_Config();
 800093c:	f000 f898 	bl	8000a70 <SystemClock_Config>
  MX_GPIO_Init();
 8000940:	f000 f92e 	bl	8000ba0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000944:	f000 f902 	bl	8000b4c <MX_USART2_UART_Init>
  Lcd_PortType ports[] = { GPIOC, GPIOB, GPIOA, GPIOA };
 8000948:	4b41      	ldr	r3, [pc, #260]	; (8000a50 <main+0x198>)
 800094a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800094e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000950:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    Lcd_PinType pins[] = {GPIO_PIN_7, GPIO_PIN_6, GPIO_PIN_7, GPIO_PIN_6};
 8000954:	4a3f      	ldr	r2, [pc, #252]	; (8000a54 <main+0x19c>)
 8000956:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800095a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800095e:	e883 0003 	stmia.w	r3, {r0, r1}
    lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_5, GPIOB, GPIO_PIN_4, LCD_4_BIT_MODE);
 8000962:	4638      	mov	r0, r7
 8000964:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000968:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800096c:	2300      	movs	r3, #0
 800096e:	9303      	str	r3, [sp, #12]
 8000970:	2310      	movs	r3, #16
 8000972:	9302      	str	r3, [sp, #8]
 8000974:	4b38      	ldr	r3, [pc, #224]	; (8000a58 <main+0x1a0>)
 8000976:	9301      	str	r3, [sp, #4]
 8000978:	2320      	movs	r3, #32
 800097a:	9300      	str	r3, [sp, #0]
 800097c:	4b36      	ldr	r3, [pc, #216]	; (8000a58 <main+0x1a0>)
 800097e:	f7ff fe21 	bl	80005c4 <Lcd_create>
 8000982:	f107 0418 	add.w	r4, r7, #24
 8000986:	463d      	mov	r5, r7
 8000988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800098a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800098c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000990:	e884 0003 	stmia.w	r4, {r0, r1}
    Lcd_cursor(&lcd, 0,1);
 8000994:	f107 0318 	add.w	r3, r7, #24
 8000998:	2201      	movs	r2, #1
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fe9d 	bl	80006dc <Lcd_cursor>
      for ( int x = 1; x <= 200 ; x++ )
 80009a2:	2301      	movs	r3, #1
 80009a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80009a8:	e016      	b.n	80009d8 <main+0x120>
        Lcd_cursor(&lcd, 1,7);
 80009aa:	f107 0318 	add.w	r3, r7, #24
 80009ae:	2207      	movs	r2, #7
 80009b0:	2101      	movs	r1, #1
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fe92 	bl	80006dc <Lcd_cursor>
        Lcd_int(&lcd, x);
 80009b8:	f107 0318 	add.w	r3, r7, #24
 80009bc:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff fe53 	bl	800066c <Lcd_int>
        HAL_Delay (1000);
 80009c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009ca:	f000 fb03 	bl	8000fd4 <HAL_Delay>
      for ( int x = 1; x <= 200 ; x++ )
 80009ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80009d2:	3301      	adds	r3, #1
 80009d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80009d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80009dc:	2bc8      	cmp	r3, #200	; 0xc8
 80009de:	dde4      	ble.n	80009aa <main+0xf2>
  ai_err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 80009e0:	2100      	movs	r1, #0
 80009e2:	481e      	ldr	r0, [pc, #120]	; (8000a5c <main+0x1a4>)
 80009e4:	f001 fe72 	bl	80026cc <ai_network_create>
 80009e8:	4603      	mov	r3, r0
 80009ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   if (ai_err.type != AI_ERROR_NONE)
 80009ee:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d009      	beq.n	8000a0a <main+0x152>
 	  printf("\n\r-I- Error could not create neural network instance\r\n");
 80009f6:	481a      	ldr	r0, [pc, #104]	; (8000a60 <main+0x1a8>)
 80009f8:	f004 fc78 	bl	80052ec <puts>
 	  Lcd_string(&lcd,"Error could not create neural network instance");
 80009fc:	f107 0318 	add.w	r3, r7, #24
 8000a00:	4918      	ldr	r1, [pc, #96]	; (8000a64 <main+0x1ac>)
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fe4a 	bl	800069c <Lcd_string>
 8000a08:	e008      	b.n	8000a1c <main+0x164>
 	  printf("\n\r-I-: Neural network instance is created\r\n");
 8000a0a:	4817      	ldr	r0, [pc, #92]	; (8000a68 <main+0x1b0>)
 8000a0c:	f004 fc6e 	bl	80052ec <puts>
 	  Lcd_string(&lcd,"Neural network instance is created");
 8000a10:	f107 0318 	add.w	r3, r7, #24
 8000a14:	4915      	ldr	r1, [pc, #84]	; (8000a6c <main+0x1b4>)
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff fe40 	bl	800069c <Lcd_string>

  //sallehos
  aiRun(in_data,out_data);
 8000a1c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000a20:	469c      	mov	ip, r3
 8000a22:	490a      	ldr	r1, [pc, #40]	; (8000a4c <main+0x194>)
 8000a24:	4807      	ldr	r0, [pc, #28]	; (8000a44 <main+0x18c>)
 8000a26:	f7ff ff0f 	bl	8000848 <aiRun.0>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <main+0x172>
 8000a2c:	0800655c 	.word	0x0800655c
 8000a30:	40040440 	.word	0x40040440
 8000a34:	00023b14 	.word	0x00023b14
 8000a38:	00040440 	.word	0x00040440
 8000a3c:	20000ad8 	.word	0x20000ad8
 8000a40:	20000000 	.word	0x20000000
 8000a44:	20009958 	.word	0x20009958
 8000a48:	20000018 	.word	0x20000018
 8000a4c:	2000c958 	.word	0x2000c958
 8000a50:	08006570 	.word	0x08006570
 8000a54:	08006580 	.word	0x08006580
 8000a58:	40020400 	.word	0x40020400
 8000a5c:	2000c96c 	.word	0x2000c96c
 8000a60:	080064a4 	.word	0x080064a4
 8000a64:	080064dc 	.word	0x080064dc
 8000a68:	0800650c 	.word	0x0800650c
 8000a6c:	08006538 	.word	0x08006538

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b094      	sub	sp, #80	; 0x50
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	2234      	movs	r2, #52	; 0x34
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f004 fac6 	bl	8005010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	f107 0308 	add.w	r3, r7, #8
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a94:	2300      	movs	r3, #0
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <SystemClock_Config+0xd4>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	4a29      	ldr	r2, [pc, #164]	; (8000b44 <SystemClock_Config+0xd4>)
 8000a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa4:	4b27      	ldr	r3, [pc, #156]	; (8000b44 <SystemClock_Config+0xd4>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <SystemClock_Config+0xd8>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000abc:	4a22      	ldr	r2, [pc, #136]	; (8000b48 <SystemClock_Config+0xd8>)
 8000abe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac2:	6013      	str	r3, [r2, #0]
 8000ac4:	4b20      	ldr	r3, [pc, #128]	; (8000b48 <SystemClock_Config+0xd8>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ad4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ad8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ada:	2302      	movs	r3, #2
 8000adc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ade:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ae2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ae4:	2308      	movs	r3, #8
 8000ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ae8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000aec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000aee:	2304      	movs	r3, #4
 8000af0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000af2:	2302      	movs	r3, #2
 8000af4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000af6:	2302      	movs	r3, #2
 8000af8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4618      	mov	r0, r3
 8000b00:	f001 f884 	bl	8001c0c <HAL_RCC_OscConfig>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b0a:	f000 f8df 	bl	8000ccc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0e:	230f      	movs	r3, #15
 8000b10:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b12:	2302      	movs	r3, #2
 8000b14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b24:	f107 0308 	add.w	r3, r7, #8
 8000b28:	2102      	movs	r1, #2
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 fd24 	bl	8001578 <HAL_RCC_ClockConfig>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000b36:	f000 f8c9 	bl	8000ccc <Error_Handler>
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	3750      	adds	r7, #80	; 0x50
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40007000 	.word	0x40007000

08000b4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <MX_USART2_UART_Init+0x50>)
 8000b54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b72:	220c      	movs	r2, #12
 8000b74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_USART2_UART_Init+0x4c>)
 8000b84:	f001 fae0 	bl	8002148 <HAL_UART_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b8e:	f000 f89d 	bl	8000ccc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000a94 	.word	0x20000a94
 8000b9c:	40004400 	.word	0x40004400

08000ba0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	4b40      	ldr	r3, [pc, #256]	; (8000cbc <MX_GPIO_Init+0x11c>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a3f      	ldr	r2, [pc, #252]	; (8000cbc <MX_GPIO_Init+0x11c>)
 8000bc0:	f043 0304 	orr.w	r3, r3, #4
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b3d      	ldr	r3, [pc, #244]	; (8000cbc <MX_GPIO_Init+0x11c>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0304 	and.w	r3, r3, #4
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	4b39      	ldr	r3, [pc, #228]	; (8000cbc <MX_GPIO_Init+0x11c>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a38      	ldr	r2, [pc, #224]	; (8000cbc <MX_GPIO_Init+0x11c>)
 8000bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b36      	ldr	r3, [pc, #216]	; (8000cbc <MX_GPIO_Init+0x11c>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	4b32      	ldr	r3, [pc, #200]	; (8000cbc <MX_GPIO_Init+0x11c>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a31      	ldr	r2, [pc, #196]	; (8000cbc <MX_GPIO_Init+0x11c>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b2f      	ldr	r3, [pc, #188]	; (8000cbc <MX_GPIO_Init+0x11c>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	4b2b      	ldr	r3, [pc, #172]	; (8000cbc <MX_GPIO_Init+0x11c>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a2a      	ldr	r2, [pc, #168]	; (8000cbc <MX_GPIO_Init+0x11c>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b28      	ldr	r3, [pc, #160]	; (8000cbc <MX_GPIO_Init+0x11c>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	21e0      	movs	r1, #224	; 0xe0
 8000c2a:	4825      	ldr	r0, [pc, #148]	; (8000cc0 <MX_GPIO_Init+0x120>)
 8000c2c:	f000 fc70 	bl	8001510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2180      	movs	r1, #128	; 0x80
 8000c34:	4823      	ldr	r0, [pc, #140]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000c36:	f000 fc6b 	bl	8001510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2170      	movs	r1, #112	; 0x70
 8000c3e:	4822      	ldr	r0, [pc, #136]	; (8000cc8 <MX_GPIO_Init+0x128>)
 8000c40:	f000 fc66 	bl	8001510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c4a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	481a      	ldr	r0, [pc, #104]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000c5c:	f000 fac4 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
 8000c60:	23e0      	movs	r3, #224	; 0xe0
 8000c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4619      	mov	r1, r3
 8000c76:	4812      	ldr	r0, [pc, #72]	; (8000cc0 <MX_GPIO_Init+0x120>)
 8000c78:	f000 fab6 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c7c:	2380      	movs	r3, #128	; 0x80
 8000c7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	4619      	mov	r1, r3
 8000c92:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <MX_GPIO_Init+0x124>)
 8000c94:	f000 faa8 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000c98:	2370      	movs	r3, #112	; 0x70
 8000c9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	4806      	ldr	r0, [pc, #24]	; (8000cc8 <MX_GPIO_Init+0x128>)
 8000cb0:	f000 fa9a 	bl	80011e8 <HAL_GPIO_Init>

}
 8000cb4:	bf00      	nop
 8000cb6:	3728      	adds	r7, #40	; 0x28
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40023800 	.word	0x40023800
 8000cc0:	40020000 	.word	0x40020000
 8000cc4:	40020800 	.word	0x40020800
 8000cc8:	40020400 	.word	0x40020400

08000ccc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd0:	b672      	cpsid	i
}
 8000cd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <Error_Handler+0x8>
	...

08000cd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <HAL_MspInit+0x4c>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	4a0f      	ldr	r2, [pc, #60]	; (8000d24 <HAL_MspInit+0x4c>)
 8000ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cec:	6453      	str	r3, [r2, #68]	; 0x44
 8000cee:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <HAL_MspInit+0x4c>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	603b      	str	r3, [r7, #0]
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <HAL_MspInit+0x4c>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <HAL_MspInit+0x4c>)
 8000d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d08:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_MspInit+0x4c>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d16:	2007      	movs	r0, #7
 8000d18:	f000 fa32 	bl	8001180 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40023800 	.word	0x40023800

08000d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a19      	ldr	r2, [pc, #100]	; (8000dac <HAL_UART_MspInit+0x84>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d12b      	bne.n	8000da2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <HAL_UART_MspInit+0x88>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	4a17      	ldr	r2, [pc, #92]	; (8000db0 <HAL_UART_MspInit+0x88>)
 8000d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d58:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <HAL_UART_MspInit+0x88>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <HAL_UART_MspInit+0x88>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a10      	ldr	r2, [pc, #64]	; (8000db0 <HAL_UART_MspInit+0x88>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <HAL_UART_MspInit+0x88>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d82:	230c      	movs	r3, #12
 8000d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d92:	2307      	movs	r3, #7
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4805      	ldr	r0, [pc, #20]	; (8000db4 <HAL_UART_MspInit+0x8c>)
 8000d9e:	f000 fa23 	bl	80011e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000da2:	bf00      	nop
 8000da4:	3728      	adds	r7, #40	; 0x28
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40004400 	.word	0x40004400
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020000 	.word	0x40020000

08000db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <NMI_Handler+0x4>

08000dbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <HardFault_Handler+0x4>

08000dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <MemManage_Handler+0x4>

08000dca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dce:	e7fe      	b.n	8000dce <BusFault_Handler+0x4>

08000dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <UsageFault_Handler+0x4>

08000dd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e04:	f000 f8c6 	bl	8000f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e14:	4a14      	ldr	r2, [pc, #80]	; (8000e68 <_sbrk+0x5c>)
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <_sbrk+0x60>)
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d102      	bne.n	8000e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <_sbrk+0x64>)
 8000e2a:	4a12      	ldr	r2, [pc, #72]	; (8000e74 <_sbrk+0x68>)
 8000e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <_sbrk+0x64>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d207      	bcs.n	8000e4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e3c:	f004 f8b0 	bl	8004fa0 <__errno>
 8000e40:	4603      	mov	r3, r0
 8000e42:	220c      	movs	r2, #12
 8000e44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4a:	e009      	b.n	8000e60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <_sbrk+0x64>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e52:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <_sbrk+0x64>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <_sbrk+0x64>)
 8000e5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20020000 	.word	0x20020000
 8000e6c:	00000800 	.word	0x00000800
 8000e70:	2000c970 	.word	0x2000c970
 8000e74:	2000ca58 	.word	0x2000ca58

08000e78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <SystemInit+0x20>)
 8000e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e82:	4a05      	ldr	r2, [pc, #20]	; (8000e98 <SystemInit+0x20>)
 8000e84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea0:	480d      	ldr	r0, [pc, #52]	; (8000ed8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ea2:	490e      	ldr	r1, [pc, #56]	; (8000edc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ea4:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea8:	e002      	b.n	8000eb0 <LoopCopyDataInit>

08000eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eae:	3304      	adds	r3, #4

08000eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb4:	d3f9      	bcc.n	8000eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000eb8:	4c0b      	ldr	r4, [pc, #44]	; (8000ee8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ebc:	e001      	b.n	8000ec2 <LoopFillZerobss>

08000ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec0:	3204      	adds	r2, #4

08000ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec4:	d3fb      	bcc.n	8000ebe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ec6:	f7ff ffd7 	bl	8000e78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eca:	f004 f86f 	bl	8004fac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ece:	f7ff fcf3 	bl	80008b8 <main>
  bx  lr    
 8000ed2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ed4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000edc:	20000a78 	.word	0x20000a78
  ldr r2, =_sidata
 8000ee0:	0802a1ac 	.word	0x0802a1ac
  ldr r2, =_sbss
 8000ee4:	20000a78 	.word	0x20000a78
  ldr r4, =_ebss
 8000ee8:	2000ca58 	.word	0x2000ca58

08000eec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eec:	e7fe      	b.n	8000eec <ADC_IRQHandler>
	...

08000ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_Init+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	; (8000f30 <HAL_Init+0x40>)
 8000efa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f00:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <HAL_Init+0x40>)
 8000f06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a07      	ldr	r2, [pc, #28]	; (8000f30 <HAL_Init+0x40>)
 8000f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f18:	2003      	movs	r0, #3
 8000f1a:	f000 f931 	bl	8001180 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f000 f808 	bl	8000f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f24:	f7ff fed8 	bl	8000cd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023c00 	.word	0x40023c00

08000f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_InitTick+0x54>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_InitTick+0x58>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	4619      	mov	r1, r3
 8000f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 f93b 	bl	80011ce <HAL_SYSTICK_Config>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00e      	b.n	8000f80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b0f      	cmp	r3, #15
 8000f66:	d80a      	bhi.n	8000f7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	f000 f911 	bl	8001196 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f74:	4a06      	ldr	r2, [pc, #24]	; (8000f90 <HAL_InitTick+0x5c>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	e000      	b.n	8000f80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000030 	.word	0x20000030
 8000f8c:	20000038 	.word	0x20000038
 8000f90:	20000034 	.word	0x20000034

08000f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_IncTick+0x20>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_IncTick+0x24>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_IncTick+0x24>)
 8000fa6:	6013      	str	r3, [r2, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000038 	.word	0x20000038
 8000fb8:	2000c974 	.word	0x2000c974

08000fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <HAL_GetTick+0x14>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	2000c974 	.word	0x2000c974

08000fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fdc:	f7ff ffee 	bl	8000fbc <HAL_GetTick>
 8000fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fec:	d005      	beq.n	8000ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <HAL_Delay+0x44>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ffa:	bf00      	nop
 8000ffc:	f7ff ffde 	bl	8000fbc <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	429a      	cmp	r2, r3
 800100a:	d8f7      	bhi.n	8000ffc <HAL_Delay+0x28>
  {
  }
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000038 	.word	0x20000038

0800101c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001038:	4013      	ands	r3, r2
 800103a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104e:	4a04      	ldr	r2, [pc, #16]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	60d3      	str	r3, [r2, #12]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <__NVIC_GetPriorityGrouping+0x18>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	f003 0307 	and.w	r3, r3, #7
}
 8001072:	4618      	mov	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001090:	2b00      	cmp	r3, #0
 8001092:	db0a      	blt.n	80010aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	b2da      	uxtb	r2, r3
 8001098:	490c      	ldr	r1, [pc, #48]	; (80010cc <__NVIC_SetPriority+0x4c>)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	0112      	lsls	r2, r2, #4
 80010a0:	b2d2      	uxtb	r2, r2
 80010a2:	440b      	add	r3, r1
 80010a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a8:	e00a      	b.n	80010c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4908      	ldr	r1, [pc, #32]	; (80010d0 <__NVIC_SetPriority+0x50>)
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	f003 030f 	and.w	r3, r3, #15
 80010b6:	3b04      	subs	r3, #4
 80010b8:	0112      	lsls	r2, r2, #4
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	440b      	add	r3, r1
 80010be:	761a      	strb	r2, [r3, #24]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000e100 	.word	0xe000e100
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b089      	sub	sp, #36	; 0x24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f1c3 0307 	rsb	r3, r3, #7
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	bf28      	it	cs
 80010f2:	2304      	movcs	r3, #4
 80010f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3304      	adds	r3, #4
 80010fa:	2b06      	cmp	r3, #6
 80010fc:	d902      	bls.n	8001104 <NVIC_EncodePriority+0x30>
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3b03      	subs	r3, #3
 8001102:	e000      	b.n	8001106 <NVIC_EncodePriority+0x32>
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	f04f 32ff 	mov.w	r2, #4294967295
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43da      	mvns	r2, r3
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	401a      	ands	r2, r3
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800111c:	f04f 31ff 	mov.w	r1, #4294967295
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	fa01 f303 	lsl.w	r3, r1, r3
 8001126:	43d9      	mvns	r1, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800112c:	4313      	orrs	r3, r2
         );
}
 800112e:	4618      	mov	r0, r3
 8001130:	3724      	adds	r7, #36	; 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
	...

0800113c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3b01      	subs	r3, #1
 8001148:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800114c:	d301      	bcc.n	8001152 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114e:	2301      	movs	r3, #1
 8001150:	e00f      	b.n	8001172 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001152:	4a0a      	ldr	r2, [pc, #40]	; (800117c <SysTick_Config+0x40>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800115a:	210f      	movs	r1, #15
 800115c:	f04f 30ff 	mov.w	r0, #4294967295
 8001160:	f7ff ff8e 	bl	8001080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <SysTick_Config+0x40>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116a:	4b04      	ldr	r3, [pc, #16]	; (800117c <SysTick_Config+0x40>)
 800116c:	2207      	movs	r2, #7
 800116e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	e000e010 	.word	0xe000e010

08001180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ff47 	bl	800101c <__NVIC_SetPriorityGrouping>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001196:	b580      	push	{r7, lr}
 8001198:	b086      	sub	sp, #24
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
 80011a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a8:	f7ff ff5c 	bl	8001064 <__NVIC_GetPriorityGrouping>
 80011ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	68b9      	ldr	r1, [r7, #8]
 80011b2:	6978      	ldr	r0, [r7, #20]
 80011b4:	f7ff ff8e 	bl	80010d4 <NVIC_EncodePriority>
 80011b8:	4602      	mov	r2, r0
 80011ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011be:	4611      	mov	r1, r2
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff5d 	bl	8001080 <__NVIC_SetPriority>
}
 80011c6:	bf00      	nop
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ffb0 	bl	800113c <SysTick_Config>
 80011dc:	4603      	mov	r3, r0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b089      	sub	sp, #36	; 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
 8001202:	e165      	b.n	80014d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001204:	2201      	movs	r2, #1
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	429a      	cmp	r2, r3
 800121e:	f040 8154 	bne.w	80014ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	2b01      	cmp	r3, #1
 800122c:	d005      	beq.n	800123a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001236:	2b02      	cmp	r3, #2
 8001238:	d130      	bne.n	800129c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	2203      	movs	r2, #3
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	68da      	ldr	r2, [r3, #12]
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001270:	2201      	movs	r2, #1
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	091b      	lsrs	r3, r3, #4
 8001286:	f003 0201 	and.w	r2, r3, #1
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	2b03      	cmp	r3, #3
 80012a6:	d017      	beq.n	80012d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	2203      	movs	r2, #3
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d123      	bne.n	800132c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	08da      	lsrs	r2, r3, #3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3208      	adds	r2, #8
 80012ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	f003 0307 	and.w	r3, r3, #7
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	220f      	movs	r2, #15
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	691a      	ldr	r2, [r3, #16]
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	08da      	lsrs	r2, r3, #3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3208      	adds	r2, #8
 8001326:	69b9      	ldr	r1, [r7, #24]
 8001328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0203 	and.w	r2, r3, #3
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 80ae 	beq.w	80014ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b5d      	ldr	r3, [pc, #372]	; (80014e8 <HAL_GPIO_Init+0x300>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	4a5c      	ldr	r2, [pc, #368]	; (80014e8 <HAL_GPIO_Init+0x300>)
 8001378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800137c:	6453      	str	r3, [r2, #68]	; 0x44
 800137e:	4b5a      	ldr	r3, [pc, #360]	; (80014e8 <HAL_GPIO_Init+0x300>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800138a:	4a58      	ldr	r2, [pc, #352]	; (80014ec <HAL_GPIO_Init+0x304>)
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	3302      	adds	r3, #2
 8001392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	220f      	movs	r2, #15
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a4f      	ldr	r2, [pc, #316]	; (80014f0 <HAL_GPIO_Init+0x308>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d025      	beq.n	8001402 <HAL_GPIO_Init+0x21a>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4e      	ldr	r2, [pc, #312]	; (80014f4 <HAL_GPIO_Init+0x30c>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d01f      	beq.n	80013fe <HAL_GPIO_Init+0x216>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4d      	ldr	r2, [pc, #308]	; (80014f8 <HAL_GPIO_Init+0x310>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d019      	beq.n	80013fa <HAL_GPIO_Init+0x212>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4c      	ldr	r2, [pc, #304]	; (80014fc <HAL_GPIO_Init+0x314>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d013      	beq.n	80013f6 <HAL_GPIO_Init+0x20e>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4b      	ldr	r2, [pc, #300]	; (8001500 <HAL_GPIO_Init+0x318>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d00d      	beq.n	80013f2 <HAL_GPIO_Init+0x20a>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a4a      	ldr	r2, [pc, #296]	; (8001504 <HAL_GPIO_Init+0x31c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d007      	beq.n	80013ee <HAL_GPIO_Init+0x206>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a49      	ldr	r2, [pc, #292]	; (8001508 <HAL_GPIO_Init+0x320>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d101      	bne.n	80013ea <HAL_GPIO_Init+0x202>
 80013e6:	2306      	movs	r3, #6
 80013e8:	e00c      	b.n	8001404 <HAL_GPIO_Init+0x21c>
 80013ea:	2307      	movs	r3, #7
 80013ec:	e00a      	b.n	8001404 <HAL_GPIO_Init+0x21c>
 80013ee:	2305      	movs	r3, #5
 80013f0:	e008      	b.n	8001404 <HAL_GPIO_Init+0x21c>
 80013f2:	2304      	movs	r3, #4
 80013f4:	e006      	b.n	8001404 <HAL_GPIO_Init+0x21c>
 80013f6:	2303      	movs	r3, #3
 80013f8:	e004      	b.n	8001404 <HAL_GPIO_Init+0x21c>
 80013fa:	2302      	movs	r3, #2
 80013fc:	e002      	b.n	8001404 <HAL_GPIO_Init+0x21c>
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <HAL_GPIO_Init+0x21c>
 8001402:	2300      	movs	r3, #0
 8001404:	69fa      	ldr	r2, [r7, #28]
 8001406:	f002 0203 	and.w	r2, r2, #3
 800140a:	0092      	lsls	r2, r2, #2
 800140c:	4093      	lsls	r3, r2
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001414:	4935      	ldr	r1, [pc, #212]	; (80014ec <HAL_GPIO_Init+0x304>)
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	089b      	lsrs	r3, r3, #2
 800141a:	3302      	adds	r3, #2
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001422:	4b3a      	ldr	r3, [pc, #232]	; (800150c <HAL_GPIO_Init+0x324>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001446:	4a31      	ldr	r2, [pc, #196]	; (800150c <HAL_GPIO_Init+0x324>)
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800144c:	4b2f      	ldr	r3, [pc, #188]	; (800150c <HAL_GPIO_Init+0x324>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001470:	4a26      	ldr	r2, [pc, #152]	; (800150c <HAL_GPIO_Init+0x324>)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001476:	4b25      	ldr	r3, [pc, #148]	; (800150c <HAL_GPIO_Init+0x324>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800149a:	4a1c      	ldr	r2, [pc, #112]	; (800150c <HAL_GPIO_Init+0x324>)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014a0:	4b1a      	ldr	r3, [pc, #104]	; (800150c <HAL_GPIO_Init+0x324>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014c4:	4a11      	ldr	r2, [pc, #68]	; (800150c <HAL_GPIO_Init+0x324>)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3301      	adds	r3, #1
 80014ce:	61fb      	str	r3, [r7, #28]
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	2b0f      	cmp	r3, #15
 80014d4:	f67f ae96 	bls.w	8001204 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3724      	adds	r7, #36	; 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40013800 	.word	0x40013800
 80014f0:	40020000 	.word	0x40020000
 80014f4:	40020400 	.word	0x40020400
 80014f8:	40020800 	.word	0x40020800
 80014fc:	40020c00 	.word	0x40020c00
 8001500:	40021000 	.word	0x40021000
 8001504:	40021400 	.word	0x40021400
 8001508:	40021800 	.word	0x40021800
 800150c:	40013c00 	.word	0x40013c00

08001510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	807b      	strh	r3, [r7, #2]
 800151c:	4613      	mov	r3, r2
 800151e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001520:	787b      	ldrb	r3, [r7, #1]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001526:	887a      	ldrh	r2, [r7, #2]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800152c:	e003      	b.n	8001536 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800152e:	887b      	ldrh	r3, [r7, #2]
 8001530:	041a      	lsls	r2, r3, #16
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	619a      	str	r2, [r3, #24]
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001542:	b480      	push	{r7}
 8001544:	b085      	sub	sp, #20
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	460b      	mov	r3, r1
 800154c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001554:	887a      	ldrh	r2, [r7, #2]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	4013      	ands	r3, r2
 800155a:	041a      	lsls	r2, r3, #16
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	43d9      	mvns	r1, r3
 8001560:	887b      	ldrh	r3, [r7, #2]
 8001562:	400b      	ands	r3, r1
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	619a      	str	r2, [r3, #24]
}
 800156a:	bf00      	nop
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e0cc      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800158c:	4b68      	ldr	r3, [pc, #416]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 030f 	and.w	r3, r3, #15
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d90c      	bls.n	80015b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159a:	4b65      	ldr	r3, [pc, #404]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a2:	4b63      	ldr	r3, [pc, #396]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d001      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e0b8      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d020      	beq.n	8001602 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d005      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015cc:	4b59      	ldr	r3, [pc, #356]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	4a58      	ldr	r2, [pc, #352]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0308 	and.w	r3, r3, #8
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d005      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015e4:	4b53      	ldr	r3, [pc, #332]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	4a52      	ldr	r2, [pc, #328]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015f0:	4b50      	ldr	r3, [pc, #320]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	494d      	ldr	r1, [pc, #308]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d044      	beq.n	8001698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d107      	bne.n	8001626 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001616:	4b47      	ldr	r3, [pc, #284]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d119      	bne.n	8001656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e07f      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d003      	beq.n	8001636 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001632:	2b03      	cmp	r3, #3
 8001634:	d107      	bne.n	8001646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001636:	4b3f      	ldr	r3, [pc, #252]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d109      	bne.n	8001656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e06f      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001646:	4b3b      	ldr	r3, [pc, #236]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e067      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001656:	4b37      	ldr	r3, [pc, #220]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f023 0203 	bic.w	r2, r3, #3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	4934      	ldr	r1, [pc, #208]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001664:	4313      	orrs	r3, r2
 8001666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001668:	f7ff fca8 	bl	8000fbc <HAL_GetTick>
 800166c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166e:	e00a      	b.n	8001686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001670:	f7ff fca4 	bl	8000fbc <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	f241 3288 	movw	r2, #5000	; 0x1388
 800167e:	4293      	cmp	r3, r2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e04f      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001686:	4b2b      	ldr	r3, [pc, #172]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 020c 	and.w	r2, r3, #12
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	429a      	cmp	r2, r3
 8001696:	d1eb      	bne.n	8001670 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001698:	4b25      	ldr	r3, [pc, #148]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 030f 	and.w	r3, r3, #15
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d20c      	bcs.n	80016c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a6:	4b22      	ldr	r3, [pc, #136]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ae:	4b20      	ldr	r3, [pc, #128]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d001      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e032      	b.n	8001726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d008      	beq.n	80016de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016cc:	4b19      	ldr	r3, [pc, #100]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	4916      	ldr	r1, [pc, #88]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d009      	beq.n	80016fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ea:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	490e      	ldr	r1, [pc, #56]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016fe:	f000 f855 	bl	80017ac <HAL_RCC_GetSysClockFreq>
 8001702:	4602      	mov	r2, r0
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	091b      	lsrs	r3, r3, #4
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	490a      	ldr	r1, [pc, #40]	; (8001738 <HAL_RCC_ClockConfig+0x1c0>)
 8001710:	5ccb      	ldrb	r3, [r1, r3]
 8001712:	fa22 f303 	lsr.w	r3, r2, r3
 8001716:	4a09      	ldr	r2, [pc, #36]	; (800173c <HAL_RCC_ClockConfig+0x1c4>)
 8001718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <HAL_RCC_ClockConfig+0x1c8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fc08 	bl	8000f34 <HAL_InitTick>

  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023c00 	.word	0x40023c00
 8001734:	40023800 	.word	0x40023800
 8001738:	08006590 	.word	0x08006590
 800173c:	20000030 	.word	0x20000030
 8001740:	20000034 	.word	0x20000034

08001744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <HAL_RCC_GetHCLKFreq+0x14>)
 800174a:	681b      	ldr	r3, [r3, #0]
}
 800174c:	4618      	mov	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20000030 	.word	0x20000030

0800175c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001760:	f7ff fff0 	bl	8001744 <HAL_RCC_GetHCLKFreq>
 8001764:	4602      	mov	r2, r0
 8001766:	4b05      	ldr	r3, [pc, #20]	; (800177c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	0a9b      	lsrs	r3, r3, #10
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	4903      	ldr	r1, [pc, #12]	; (8001780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001772:	5ccb      	ldrb	r3, [r1, r3]
 8001774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001778:	4618      	mov	r0, r3
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40023800 	.word	0x40023800
 8001780:	080065a0 	.word	0x080065a0

08001784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001788:	f7ff ffdc 	bl	8001744 <HAL_RCC_GetHCLKFreq>
 800178c:	4602      	mov	r2, r0
 800178e:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	0b5b      	lsrs	r3, r3, #13
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	4903      	ldr	r1, [pc, #12]	; (80017a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800179a:	5ccb      	ldrb	r3, [r1, r3]
 800179c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40023800 	.word	0x40023800
 80017a8:	080065a0 	.word	0x080065a0

080017ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017b0:	b0ae      	sub	sp, #184	; 0xb8
 80017b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017d2:	4bcb      	ldr	r3, [pc, #812]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 030c 	and.w	r3, r3, #12
 80017da:	2b0c      	cmp	r3, #12
 80017dc:	f200 8206 	bhi.w	8001bec <HAL_RCC_GetSysClockFreq+0x440>
 80017e0:	a201      	add	r2, pc, #4	; (adr r2, 80017e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80017e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e6:	bf00      	nop
 80017e8:	0800181d 	.word	0x0800181d
 80017ec:	08001bed 	.word	0x08001bed
 80017f0:	08001bed 	.word	0x08001bed
 80017f4:	08001bed 	.word	0x08001bed
 80017f8:	08001825 	.word	0x08001825
 80017fc:	08001bed 	.word	0x08001bed
 8001800:	08001bed 	.word	0x08001bed
 8001804:	08001bed 	.word	0x08001bed
 8001808:	0800182d 	.word	0x0800182d
 800180c:	08001bed 	.word	0x08001bed
 8001810:	08001bed 	.word	0x08001bed
 8001814:	08001bed 	.word	0x08001bed
 8001818:	08001a1d 	.word	0x08001a1d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800181c:	4bb9      	ldr	r3, [pc, #740]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x358>)
 800181e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001822:	e1e7      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001824:	4bb8      	ldr	r3, [pc, #736]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001826:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800182a:	e1e3      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800182c:	4bb4      	ldr	r3, [pc, #720]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001834:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001838:	4bb1      	ldr	r3, [pc, #708]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d071      	beq.n	8001928 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001844:	4bae      	ldr	r3, [pc, #696]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	099b      	lsrs	r3, r3, #6
 800184a:	2200      	movs	r2, #0
 800184c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001850:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001854:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800185c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001860:	2300      	movs	r3, #0
 8001862:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001866:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800186a:	4622      	mov	r2, r4
 800186c:	462b      	mov	r3, r5
 800186e:	f04f 0000 	mov.w	r0, #0
 8001872:	f04f 0100 	mov.w	r1, #0
 8001876:	0159      	lsls	r1, r3, #5
 8001878:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800187c:	0150      	lsls	r0, r2, #5
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4621      	mov	r1, r4
 8001884:	1a51      	subs	r1, r2, r1
 8001886:	6439      	str	r1, [r7, #64]	; 0x40
 8001888:	4629      	mov	r1, r5
 800188a:	eb63 0301 	sbc.w	r3, r3, r1
 800188e:	647b      	str	r3, [r7, #68]	; 0x44
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	f04f 0300 	mov.w	r3, #0
 8001898:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800189c:	4649      	mov	r1, r9
 800189e:	018b      	lsls	r3, r1, #6
 80018a0:	4641      	mov	r1, r8
 80018a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018a6:	4641      	mov	r1, r8
 80018a8:	018a      	lsls	r2, r1, #6
 80018aa:	4641      	mov	r1, r8
 80018ac:	1a51      	subs	r1, r2, r1
 80018ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80018b0:	4649      	mov	r1, r9
 80018b2:	eb63 0301 	sbc.w	r3, r3, r1
 80018b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80018c4:	4649      	mov	r1, r9
 80018c6:	00cb      	lsls	r3, r1, #3
 80018c8:	4641      	mov	r1, r8
 80018ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80018ce:	4641      	mov	r1, r8
 80018d0:	00ca      	lsls	r2, r1, #3
 80018d2:	4610      	mov	r0, r2
 80018d4:	4619      	mov	r1, r3
 80018d6:	4603      	mov	r3, r0
 80018d8:	4622      	mov	r2, r4
 80018da:	189b      	adds	r3, r3, r2
 80018dc:	633b      	str	r3, [r7, #48]	; 0x30
 80018de:	462b      	mov	r3, r5
 80018e0:	460a      	mov	r2, r1
 80018e2:	eb42 0303 	adc.w	r3, r2, r3
 80018e6:	637b      	str	r3, [r7, #52]	; 0x34
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80018f4:	4629      	mov	r1, r5
 80018f6:	024b      	lsls	r3, r1, #9
 80018f8:	4621      	mov	r1, r4
 80018fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018fe:	4621      	mov	r1, r4
 8001900:	024a      	lsls	r2, r1, #9
 8001902:	4610      	mov	r0, r2
 8001904:	4619      	mov	r1, r3
 8001906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800190a:	2200      	movs	r2, #0
 800190c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001910:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001914:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001918:	f7fe fcd2 	bl	80002c0 <__aeabi_uldivmod>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4613      	mov	r3, r2
 8001922:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001926:	e067      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001928:	4b75      	ldr	r3, [pc, #468]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	099b      	lsrs	r3, r3, #6
 800192e:	2200      	movs	r2, #0
 8001930:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001934:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001938:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800193c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001940:	67bb      	str	r3, [r7, #120]	; 0x78
 8001942:	2300      	movs	r3, #0
 8001944:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001946:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800194a:	4622      	mov	r2, r4
 800194c:	462b      	mov	r3, r5
 800194e:	f04f 0000 	mov.w	r0, #0
 8001952:	f04f 0100 	mov.w	r1, #0
 8001956:	0159      	lsls	r1, r3, #5
 8001958:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800195c:	0150      	lsls	r0, r2, #5
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4621      	mov	r1, r4
 8001964:	1a51      	subs	r1, r2, r1
 8001966:	62b9      	str	r1, [r7, #40]	; 0x28
 8001968:	4629      	mov	r1, r5
 800196a:	eb63 0301 	sbc.w	r3, r3, r1
 800196e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	f04f 0300 	mov.w	r3, #0
 8001978:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800197c:	4649      	mov	r1, r9
 800197e:	018b      	lsls	r3, r1, #6
 8001980:	4641      	mov	r1, r8
 8001982:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001986:	4641      	mov	r1, r8
 8001988:	018a      	lsls	r2, r1, #6
 800198a:	4641      	mov	r1, r8
 800198c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001990:	4649      	mov	r1, r9
 8001992:	eb63 0b01 	sbc.w	fp, r3, r1
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80019a2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80019a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80019aa:	4692      	mov	sl, r2
 80019ac:	469b      	mov	fp, r3
 80019ae:	4623      	mov	r3, r4
 80019b0:	eb1a 0303 	adds.w	r3, sl, r3
 80019b4:	623b      	str	r3, [r7, #32]
 80019b6:	462b      	mov	r3, r5
 80019b8:	eb4b 0303 	adc.w	r3, fp, r3
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80019ca:	4629      	mov	r1, r5
 80019cc:	028b      	lsls	r3, r1, #10
 80019ce:	4621      	mov	r1, r4
 80019d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019d4:	4621      	mov	r1, r4
 80019d6:	028a      	lsls	r2, r1, #10
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019e0:	2200      	movs	r2, #0
 80019e2:	673b      	str	r3, [r7, #112]	; 0x70
 80019e4:	677a      	str	r2, [r7, #116]	; 0x74
 80019e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80019ea:	f7fe fc69 	bl	80002c0 <__aeabi_uldivmod>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4613      	mov	r3, r2
 80019f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019f8:	4b41      	ldr	r3, [pc, #260]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	0c1b      	lsrs	r3, r3, #16
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	3301      	adds	r3, #1
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001a0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001a0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a1a:	e0eb      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a1c:	4b38      	ldr	r3, [pc, #224]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a28:	4b35      	ldr	r3, [pc, #212]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d06b      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a34:	4b32      	ldr	r3, [pc, #200]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	099b      	lsrs	r3, r3, #6
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8001a3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001a40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a46:	663b      	str	r3, [r7, #96]	; 0x60
 8001a48:	2300      	movs	r3, #0
 8001a4a:	667b      	str	r3, [r7, #100]	; 0x64
 8001a4c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a50:	4622      	mov	r2, r4
 8001a52:	462b      	mov	r3, r5
 8001a54:	f04f 0000 	mov.w	r0, #0
 8001a58:	f04f 0100 	mov.w	r1, #0
 8001a5c:	0159      	lsls	r1, r3, #5
 8001a5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a62:	0150      	lsls	r0, r2, #5
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4621      	mov	r1, r4
 8001a6a:	1a51      	subs	r1, r2, r1
 8001a6c:	61b9      	str	r1, [r7, #24]
 8001a6e:	4629      	mov	r1, r5
 8001a70:	eb63 0301 	sbc.w	r3, r3, r1
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001a82:	4659      	mov	r1, fp
 8001a84:	018b      	lsls	r3, r1, #6
 8001a86:	4651      	mov	r1, sl
 8001a88:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a8c:	4651      	mov	r1, sl
 8001a8e:	018a      	lsls	r2, r1, #6
 8001a90:	4651      	mov	r1, sl
 8001a92:	ebb2 0801 	subs.w	r8, r2, r1
 8001a96:	4659      	mov	r1, fp
 8001a98:	eb63 0901 	sbc.w	r9, r3, r1
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001aa8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001aac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ab0:	4690      	mov	r8, r2
 8001ab2:	4699      	mov	r9, r3
 8001ab4:	4623      	mov	r3, r4
 8001ab6:	eb18 0303 	adds.w	r3, r8, r3
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	462b      	mov	r3, r5
 8001abe:	eb49 0303 	adc.w	r3, r9, r3
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001ad0:	4629      	mov	r1, r5
 8001ad2:	024b      	lsls	r3, r1, #9
 8001ad4:	4621      	mov	r1, r4
 8001ad6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ada:	4621      	mov	r1, r4
 8001adc:	024a      	lsls	r2, r1, #9
 8001ade:	4610      	mov	r0, r2
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	65bb      	str	r3, [r7, #88]	; 0x58
 8001aea:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001aec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001af0:	f7fe fbe6 	bl	80002c0 <__aeabi_uldivmod>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4613      	mov	r3, r2
 8001afa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001afe:	e065      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0x420>
 8001b00:	40023800 	.word	0x40023800
 8001b04:	00f42400 	.word	0x00f42400
 8001b08:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b0c:	4b3d      	ldr	r3, [pc, #244]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x458>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	099b      	lsrs	r3, r3, #6
 8001b12:	2200      	movs	r2, #0
 8001b14:	4618      	mov	r0, r3
 8001b16:	4611      	mov	r1, r2
 8001b18:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b1c:	653b      	str	r3, [r7, #80]	; 0x50
 8001b1e:	2300      	movs	r3, #0
 8001b20:	657b      	str	r3, [r7, #84]	; 0x54
 8001b22:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001b26:	4642      	mov	r2, r8
 8001b28:	464b      	mov	r3, r9
 8001b2a:	f04f 0000 	mov.w	r0, #0
 8001b2e:	f04f 0100 	mov.w	r1, #0
 8001b32:	0159      	lsls	r1, r3, #5
 8001b34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b38:	0150      	lsls	r0, r2, #5
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4641      	mov	r1, r8
 8001b40:	1a51      	subs	r1, r2, r1
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	4649      	mov	r1, r9
 8001b46:	eb63 0301 	sbc.w	r3, r3, r1
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001b58:	4659      	mov	r1, fp
 8001b5a:	018b      	lsls	r3, r1, #6
 8001b5c:	4651      	mov	r1, sl
 8001b5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b62:	4651      	mov	r1, sl
 8001b64:	018a      	lsls	r2, r1, #6
 8001b66:	4651      	mov	r1, sl
 8001b68:	1a54      	subs	r4, r2, r1
 8001b6a:	4659      	mov	r1, fp
 8001b6c:	eb63 0501 	sbc.w	r5, r3, r1
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	00eb      	lsls	r3, r5, #3
 8001b7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b7e:	00e2      	lsls	r2, r4, #3
 8001b80:	4614      	mov	r4, r2
 8001b82:	461d      	mov	r5, r3
 8001b84:	4643      	mov	r3, r8
 8001b86:	18e3      	adds	r3, r4, r3
 8001b88:	603b      	str	r3, [r7, #0]
 8001b8a:	464b      	mov	r3, r9
 8001b8c:	eb45 0303 	adc.w	r3, r5, r3
 8001b90:	607b      	str	r3, [r7, #4]
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	028b      	lsls	r3, r1, #10
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ba8:	4621      	mov	r1, r4
 8001baa:	028a      	lsls	r2, r1, #10
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bb8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001bba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001bbe:	f7fe fb7f 	bl	80002c0 <__aeabi_uldivmod>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x458>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	0f1b      	lsrs	r3, r3, #28
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001bda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001bde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001bea:	e003      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001bee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001bf2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bf4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	37b8      	adds	r7, #184	; 0xb8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800
 8001c08:	00f42400 	.word	0x00f42400

08001c0c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e28d      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 8083 	beq.w	8001d32 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c2c:	4b94      	ldr	r3, [pc, #592]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 030c 	and.w	r3, r3, #12
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d019      	beq.n	8001c6c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c38:	4b91      	ldr	r3, [pc, #580]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d106      	bne.n	8001c52 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c44:	4b8e      	ldr	r3, [pc, #568]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c50:	d00c      	beq.n	8001c6c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c52:	4b8b      	ldr	r3, [pc, #556]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c5a:	2b0c      	cmp	r3, #12
 8001c5c:	d112      	bne.n	8001c84 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c5e:	4b88      	ldr	r3, [pc, #544]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c6a:	d10b      	bne.n	8001c84 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6c:	4b84      	ldr	r3, [pc, #528]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d05b      	beq.n	8001d30 <HAL_RCC_OscConfig+0x124>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d157      	bne.n	8001d30 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e25a      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c8c:	d106      	bne.n	8001c9c <HAL_RCC_OscConfig+0x90>
 8001c8e:	4b7c      	ldr	r3, [pc, #496]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a7b      	ldr	r2, [pc, #492]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	e01d      	b.n	8001cd8 <HAL_RCC_OscConfig+0xcc>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0xb4>
 8001ca6:	4b76      	ldr	r3, [pc, #472]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a75      	ldr	r2, [pc, #468]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	4b73      	ldr	r3, [pc, #460]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a72      	ldr	r2, [pc, #456]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	e00b      	b.n	8001cd8 <HAL_RCC_OscConfig+0xcc>
 8001cc0:	4b6f      	ldr	r3, [pc, #444]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a6e      	ldr	r2, [pc, #440]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	4b6c      	ldr	r3, [pc, #432]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a6b      	ldr	r2, [pc, #428]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d013      	beq.n	8001d08 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce0:	f7ff f96c 	bl	8000fbc <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce8:	f7ff f968 	bl	8000fbc <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	; 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e21f      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfa:	4b61      	ldr	r3, [pc, #388]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0xdc>
 8001d06:	e014      	b.n	8001d32 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d08:	f7ff f958 	bl	8000fbc <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d10:	f7ff f954 	bl	8000fbc <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	; 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e20b      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d22:	4b57      	ldr	r3, [pc, #348]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x104>
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d06f      	beq.n	8001e1e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d3e:	4b50      	ldr	r3, [pc, #320]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d017      	beq.n	8001d7a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d4a:	4b4d      	ldr	r3, [pc, #308]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d105      	bne.n	8001d62 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d56:	4b4a      	ldr	r3, [pc, #296]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00b      	beq.n	8001d7a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d62:	4b47      	ldr	r3, [pc, #284]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d6a:	2b0c      	cmp	r3, #12
 8001d6c:	d11c      	bne.n	8001da8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d6e:	4b44      	ldr	r3, [pc, #272]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d116      	bne.n	8001da8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7a:	4b41      	ldr	r3, [pc, #260]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d005      	beq.n	8001d92 <HAL_RCC_OscConfig+0x186>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d001      	beq.n	8001d92 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e1d3      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d92:	4b3b      	ldr	r3, [pc, #236]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	4937      	ldr	r1, [pc, #220]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da6:	e03a      	b.n	8001e1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d020      	beq.n	8001df2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db0:	4b34      	ldr	r3, [pc, #208]	; (8001e84 <HAL_RCC_OscConfig+0x278>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db6:	f7ff f901 	bl	8000fbc <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dbe:	f7ff f8fd 	bl	8000fbc <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e1b4      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd0:	4b2b      	ldr	r3, [pc, #172]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f0      	beq.n	8001dbe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ddc:	4b28      	ldr	r3, [pc, #160]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4925      	ldr	r1, [pc, #148]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	600b      	str	r3, [r1, #0]
 8001df0:	e015      	b.n	8001e1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df2:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <HAL_RCC_OscConfig+0x278>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df8:	f7ff f8e0 	bl	8000fbc <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e00:	f7ff f8dc 	bl	8000fbc <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e193      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e12:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f0      	bne.n	8001e00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d036      	beq.n	8001e98 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d016      	beq.n	8001e60 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e32:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e38:	f7ff f8c0 	bl	8000fbc <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e40:	f7ff f8bc 	bl	8000fbc <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e173      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_RCC_OscConfig+0x274>)
 8001e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCC_OscConfig+0x234>
 8001e5e:	e01b      	b.n	8001e98 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e60:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <HAL_RCC_OscConfig+0x27c>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e66:	f7ff f8a9 	bl	8000fbc <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e6c:	e00e      	b.n	8001e8c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e6e:	f7ff f8a5 	bl	8000fbc <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d907      	bls.n	8001e8c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e15c      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
 8001e80:	40023800 	.word	0x40023800
 8001e84:	42470000 	.word	0x42470000
 8001e88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e8c:	4b8a      	ldr	r3, [pc, #552]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1ea      	bne.n	8001e6e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 8097 	beq.w	8001fd4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eaa:	4b83      	ldr	r3, [pc, #524]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10f      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	4b7f      	ldr	r3, [pc, #508]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	4a7e      	ldr	r2, [pc, #504]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec6:	4b7c      	ldr	r3, [pc, #496]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed6:	4b79      	ldr	r3, [pc, #484]	; (80020bc <HAL_RCC_OscConfig+0x4b0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d118      	bne.n	8001f14 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ee2:	4b76      	ldr	r3, [pc, #472]	; (80020bc <HAL_RCC_OscConfig+0x4b0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a75      	ldr	r2, [pc, #468]	; (80020bc <HAL_RCC_OscConfig+0x4b0>)
 8001ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eee:	f7ff f865 	bl	8000fbc <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef6:	f7ff f861 	bl	8000fbc <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e118      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f08:	4b6c      	ldr	r3, [pc, #432]	; (80020bc <HAL_RCC_OscConfig+0x4b0>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0f0      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d106      	bne.n	8001f2a <HAL_RCC_OscConfig+0x31e>
 8001f1c:	4b66      	ldr	r3, [pc, #408]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f20:	4a65      	ldr	r2, [pc, #404]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6713      	str	r3, [r2, #112]	; 0x70
 8001f28:	e01c      	b.n	8001f64 <HAL_RCC_OscConfig+0x358>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b05      	cmp	r3, #5
 8001f30:	d10c      	bne.n	8001f4c <HAL_RCC_OscConfig+0x340>
 8001f32:	4b61      	ldr	r3, [pc, #388]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f36:	4a60      	ldr	r2, [pc, #384]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f38:	f043 0304 	orr.w	r3, r3, #4
 8001f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f3e:	4b5e      	ldr	r3, [pc, #376]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f42:	4a5d      	ldr	r2, [pc, #372]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6713      	str	r3, [r2, #112]	; 0x70
 8001f4a:	e00b      	b.n	8001f64 <HAL_RCC_OscConfig+0x358>
 8001f4c:	4b5a      	ldr	r3, [pc, #360]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f50:	4a59      	ldr	r2, [pc, #356]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f52:	f023 0301 	bic.w	r3, r3, #1
 8001f56:	6713      	str	r3, [r2, #112]	; 0x70
 8001f58:	4b57      	ldr	r3, [pc, #348]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5c:	4a56      	ldr	r2, [pc, #344]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f5e:	f023 0304 	bic.w	r3, r3, #4
 8001f62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d015      	beq.n	8001f98 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6c:	f7ff f826 	bl	8000fbc <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f72:	e00a      	b.n	8001f8a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f74:	f7ff f822 	bl	8000fbc <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e0d7      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f8a:	4b4b      	ldr	r3, [pc, #300]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0ee      	beq.n	8001f74 <HAL_RCC_OscConfig+0x368>
 8001f96:	e014      	b.n	8001fc2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f98:	f7ff f810 	bl	8000fbc <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f9e:	e00a      	b.n	8001fb6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa0:	f7ff f80c 	bl	8000fbc <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e0c1      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb6:	4b40      	ldr	r3, [pc, #256]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1ee      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fc2:	7dfb      	ldrb	r3, [r7, #23]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d105      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc8:	4b3b      	ldr	r3, [pc, #236]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	4a3a      	ldr	r2, [pc, #232]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001fce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 80ad 	beq.w	8002138 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fde:	4b36      	ldr	r3, [pc, #216]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
 8001fe6:	2b08      	cmp	r3, #8
 8001fe8:	d060      	beq.n	80020ac <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d145      	bne.n	800207e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff2:	4b33      	ldr	r3, [pc, #204]	; (80020c0 <HAL_RCC_OscConfig+0x4b4>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff8:	f7fe ffe0 	bl	8000fbc <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002000:	f7fe ffdc 	bl	8000fbc <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e093      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002012:	4b29      	ldr	r3, [pc, #164]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69da      	ldr	r2, [r3, #28]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	431a      	orrs	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	019b      	lsls	r3, r3, #6
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002034:	085b      	lsrs	r3, r3, #1
 8002036:	3b01      	subs	r3, #1
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002040:	061b      	lsls	r3, r3, #24
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	071b      	lsls	r3, r3, #28
 800204a:	491b      	ldr	r1, [pc, #108]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 800204c:	4313      	orrs	r3, r2
 800204e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002050:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <HAL_RCC_OscConfig+0x4b4>)
 8002052:	2201      	movs	r2, #1
 8002054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002056:	f7fe ffb1 	bl	8000fbc <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800205e:	f7fe ffad 	bl	8000fbc <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e064      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0f0      	beq.n	800205e <HAL_RCC_OscConfig+0x452>
 800207c:	e05c      	b.n	8002138 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207e:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <HAL_RCC_OscConfig+0x4b4>)
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7fe ff9a 	bl	8000fbc <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800208c:	f7fe ff96 	bl	8000fbc <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e04d      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_RCC_OscConfig+0x4ac>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x480>
 80020aa:	e045      	b.n	8002138 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d107      	bne.n	80020c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e040      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40007000 	.word	0x40007000
 80020c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020c4:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <HAL_RCC_OscConfig+0x538>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d030      	beq.n	8002134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020dc:	429a      	cmp	r2, r3
 80020de:	d129      	bne.n	8002134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d122      	bne.n	8002134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020f4:	4013      	ands	r3, r2
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d119      	bne.n	8002134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210a:	085b      	lsrs	r3, r3, #1
 800210c:	3b01      	subs	r3, #1
 800210e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002110:	429a      	cmp	r2, r3
 8002112:	d10f      	bne.n	8002134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002120:	429a      	cmp	r2, r3
 8002122:	d107      	bne.n	8002134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002130:	429a      	cmp	r2, r3
 8002132:	d001      	beq.n	8002138 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e000      	b.n	800213a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800

08002148 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e03f      	b.n	80021da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d106      	bne.n	8002174 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7fe fdda 	bl	8000d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2224      	movs	r2, #36	; 0x24
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800218a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f829 	bl	80021e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695a      	ldr	r2, [r3, #20]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68da      	ldr	r2, [r3, #12]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2220      	movs	r2, #32
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2220      	movs	r2, #32
 80021d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021e8:	b0c0      	sub	sp, #256	; 0x100
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80021fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002200:	68d9      	ldr	r1, [r3, #12]
 8002202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	ea40 0301 	orr.w	r3, r0, r1
 800220c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800220e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	431a      	orrs	r2, r3
 800221c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	431a      	orrs	r2, r3
 8002224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	4313      	orrs	r3, r2
 800222c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800223c:	f021 010c 	bic.w	r1, r1, #12
 8002240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800224a:	430b      	orrs	r3, r1
 800224c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800224e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800225a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800225e:	6999      	ldr	r1, [r3, #24]
 8002260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	ea40 0301 	orr.w	r3, r0, r1
 800226a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800226c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	4b8f      	ldr	r3, [pc, #572]	; (80024b0 <UART_SetConfig+0x2cc>)
 8002274:	429a      	cmp	r2, r3
 8002276:	d005      	beq.n	8002284 <UART_SetConfig+0xa0>
 8002278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	4b8d      	ldr	r3, [pc, #564]	; (80024b4 <UART_SetConfig+0x2d0>)
 8002280:	429a      	cmp	r2, r3
 8002282:	d104      	bne.n	800228e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002284:	f7ff fa7e 	bl	8001784 <HAL_RCC_GetPCLK2Freq>
 8002288:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800228c:	e003      	b.n	8002296 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800228e:	f7ff fa65 	bl	800175c <HAL_RCC_GetPCLK1Freq>
 8002292:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022a0:	f040 810c 	bne.w	80024bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022a8:	2200      	movs	r2, #0
 80022aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80022ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80022b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80022b6:	4622      	mov	r2, r4
 80022b8:	462b      	mov	r3, r5
 80022ba:	1891      	adds	r1, r2, r2
 80022bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80022be:	415b      	adcs	r3, r3
 80022c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80022c6:	4621      	mov	r1, r4
 80022c8:	eb12 0801 	adds.w	r8, r2, r1
 80022cc:	4629      	mov	r1, r5
 80022ce:	eb43 0901 	adc.w	r9, r3, r1
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	f04f 0300 	mov.w	r3, #0
 80022da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022e6:	4690      	mov	r8, r2
 80022e8:	4699      	mov	r9, r3
 80022ea:	4623      	mov	r3, r4
 80022ec:	eb18 0303 	adds.w	r3, r8, r3
 80022f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80022f4:	462b      	mov	r3, r5
 80022f6:	eb49 0303 	adc.w	r3, r9, r3
 80022fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80022fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800230a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800230e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002312:	460b      	mov	r3, r1
 8002314:	18db      	adds	r3, r3, r3
 8002316:	653b      	str	r3, [r7, #80]	; 0x50
 8002318:	4613      	mov	r3, r2
 800231a:	eb42 0303 	adc.w	r3, r2, r3
 800231e:	657b      	str	r3, [r7, #84]	; 0x54
 8002320:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002324:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002328:	f7fd ffca 	bl	80002c0 <__aeabi_uldivmod>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	4b61      	ldr	r3, [pc, #388]	; (80024b8 <UART_SetConfig+0x2d4>)
 8002332:	fba3 2302 	umull	r2, r3, r3, r2
 8002336:	095b      	lsrs	r3, r3, #5
 8002338:	011c      	lsls	r4, r3, #4
 800233a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800233e:	2200      	movs	r2, #0
 8002340:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002344:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002348:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800234c:	4642      	mov	r2, r8
 800234e:	464b      	mov	r3, r9
 8002350:	1891      	adds	r1, r2, r2
 8002352:	64b9      	str	r1, [r7, #72]	; 0x48
 8002354:	415b      	adcs	r3, r3
 8002356:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002358:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800235c:	4641      	mov	r1, r8
 800235e:	eb12 0a01 	adds.w	sl, r2, r1
 8002362:	4649      	mov	r1, r9
 8002364:	eb43 0b01 	adc.w	fp, r3, r1
 8002368:	f04f 0200 	mov.w	r2, #0
 800236c:	f04f 0300 	mov.w	r3, #0
 8002370:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002374:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002378:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800237c:	4692      	mov	sl, r2
 800237e:	469b      	mov	fp, r3
 8002380:	4643      	mov	r3, r8
 8002382:	eb1a 0303 	adds.w	r3, sl, r3
 8002386:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800238a:	464b      	mov	r3, r9
 800238c:	eb4b 0303 	adc.w	r3, fp, r3
 8002390:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80023a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80023a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80023a8:	460b      	mov	r3, r1
 80023aa:	18db      	adds	r3, r3, r3
 80023ac:	643b      	str	r3, [r7, #64]	; 0x40
 80023ae:	4613      	mov	r3, r2
 80023b0:	eb42 0303 	adc.w	r3, r2, r3
 80023b4:	647b      	str	r3, [r7, #68]	; 0x44
 80023b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80023ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80023be:	f7fd ff7f 	bl	80002c0 <__aeabi_uldivmod>
 80023c2:	4602      	mov	r2, r0
 80023c4:	460b      	mov	r3, r1
 80023c6:	4611      	mov	r1, r2
 80023c8:	4b3b      	ldr	r3, [pc, #236]	; (80024b8 <UART_SetConfig+0x2d4>)
 80023ca:	fba3 2301 	umull	r2, r3, r3, r1
 80023ce:	095b      	lsrs	r3, r3, #5
 80023d0:	2264      	movs	r2, #100	; 0x64
 80023d2:	fb02 f303 	mul.w	r3, r2, r3
 80023d6:	1acb      	subs	r3, r1, r3
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80023de:	4b36      	ldr	r3, [pc, #216]	; (80024b8 <UART_SetConfig+0x2d4>)
 80023e0:	fba3 2302 	umull	r2, r3, r3, r2
 80023e4:	095b      	lsrs	r3, r3, #5
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80023ec:	441c      	add	r4, r3
 80023ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023f2:	2200      	movs	r2, #0
 80023f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80023f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80023fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002400:	4642      	mov	r2, r8
 8002402:	464b      	mov	r3, r9
 8002404:	1891      	adds	r1, r2, r2
 8002406:	63b9      	str	r1, [r7, #56]	; 0x38
 8002408:	415b      	adcs	r3, r3
 800240a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800240c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002410:	4641      	mov	r1, r8
 8002412:	1851      	adds	r1, r2, r1
 8002414:	6339      	str	r1, [r7, #48]	; 0x30
 8002416:	4649      	mov	r1, r9
 8002418:	414b      	adcs	r3, r1
 800241a:	637b      	str	r3, [r7, #52]	; 0x34
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	f04f 0300 	mov.w	r3, #0
 8002424:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002428:	4659      	mov	r1, fp
 800242a:	00cb      	lsls	r3, r1, #3
 800242c:	4651      	mov	r1, sl
 800242e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002432:	4651      	mov	r1, sl
 8002434:	00ca      	lsls	r2, r1, #3
 8002436:	4610      	mov	r0, r2
 8002438:	4619      	mov	r1, r3
 800243a:	4603      	mov	r3, r0
 800243c:	4642      	mov	r2, r8
 800243e:	189b      	adds	r3, r3, r2
 8002440:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002444:	464b      	mov	r3, r9
 8002446:	460a      	mov	r2, r1
 8002448:	eb42 0303 	adc.w	r3, r2, r3
 800244c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800245c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002460:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002464:	460b      	mov	r3, r1
 8002466:	18db      	adds	r3, r3, r3
 8002468:	62bb      	str	r3, [r7, #40]	; 0x28
 800246a:	4613      	mov	r3, r2
 800246c:	eb42 0303 	adc.w	r3, r2, r3
 8002470:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002472:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002476:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800247a:	f7fd ff21 	bl	80002c0 <__aeabi_uldivmod>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <UART_SetConfig+0x2d4>)
 8002484:	fba3 1302 	umull	r1, r3, r3, r2
 8002488:	095b      	lsrs	r3, r3, #5
 800248a:	2164      	movs	r1, #100	; 0x64
 800248c:	fb01 f303 	mul.w	r3, r1, r3
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	3332      	adds	r3, #50	; 0x32
 8002496:	4a08      	ldr	r2, [pc, #32]	; (80024b8 <UART_SetConfig+0x2d4>)
 8002498:	fba2 2303 	umull	r2, r3, r2, r3
 800249c:	095b      	lsrs	r3, r3, #5
 800249e:	f003 0207 	and.w	r2, r3, #7
 80024a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4422      	add	r2, r4
 80024aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80024ac:	e105      	b.n	80026ba <UART_SetConfig+0x4d6>
 80024ae:	bf00      	nop
 80024b0:	40011000 	.word	0x40011000
 80024b4:	40011400 	.word	0x40011400
 80024b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024c0:	2200      	movs	r2, #0
 80024c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80024c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80024ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80024ce:	4642      	mov	r2, r8
 80024d0:	464b      	mov	r3, r9
 80024d2:	1891      	adds	r1, r2, r2
 80024d4:	6239      	str	r1, [r7, #32]
 80024d6:	415b      	adcs	r3, r3
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
 80024da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024de:	4641      	mov	r1, r8
 80024e0:	1854      	adds	r4, r2, r1
 80024e2:	4649      	mov	r1, r9
 80024e4:	eb43 0501 	adc.w	r5, r3, r1
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	f04f 0300 	mov.w	r3, #0
 80024f0:	00eb      	lsls	r3, r5, #3
 80024f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024f6:	00e2      	lsls	r2, r4, #3
 80024f8:	4614      	mov	r4, r2
 80024fa:	461d      	mov	r5, r3
 80024fc:	4643      	mov	r3, r8
 80024fe:	18e3      	adds	r3, r4, r3
 8002500:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002504:	464b      	mov	r3, r9
 8002506:	eb45 0303 	adc.w	r3, r5, r3
 800250a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800250e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800251a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800251e:	f04f 0200 	mov.w	r2, #0
 8002522:	f04f 0300 	mov.w	r3, #0
 8002526:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800252a:	4629      	mov	r1, r5
 800252c:	008b      	lsls	r3, r1, #2
 800252e:	4621      	mov	r1, r4
 8002530:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002534:	4621      	mov	r1, r4
 8002536:	008a      	lsls	r2, r1, #2
 8002538:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800253c:	f7fd fec0 	bl	80002c0 <__aeabi_uldivmod>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4b60      	ldr	r3, [pc, #384]	; (80026c8 <UART_SetConfig+0x4e4>)
 8002546:	fba3 2302 	umull	r2, r3, r3, r2
 800254a:	095b      	lsrs	r3, r3, #5
 800254c:	011c      	lsls	r4, r3, #4
 800254e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002552:	2200      	movs	r2, #0
 8002554:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002558:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800255c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002560:	4642      	mov	r2, r8
 8002562:	464b      	mov	r3, r9
 8002564:	1891      	adds	r1, r2, r2
 8002566:	61b9      	str	r1, [r7, #24]
 8002568:	415b      	adcs	r3, r3
 800256a:	61fb      	str	r3, [r7, #28]
 800256c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002570:	4641      	mov	r1, r8
 8002572:	1851      	adds	r1, r2, r1
 8002574:	6139      	str	r1, [r7, #16]
 8002576:	4649      	mov	r1, r9
 8002578:	414b      	adcs	r3, r1
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002588:	4659      	mov	r1, fp
 800258a:	00cb      	lsls	r3, r1, #3
 800258c:	4651      	mov	r1, sl
 800258e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002592:	4651      	mov	r1, sl
 8002594:	00ca      	lsls	r2, r1, #3
 8002596:	4610      	mov	r0, r2
 8002598:	4619      	mov	r1, r3
 800259a:	4603      	mov	r3, r0
 800259c:	4642      	mov	r2, r8
 800259e:	189b      	adds	r3, r3, r2
 80025a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025a4:	464b      	mov	r3, r9
 80025a6:	460a      	mov	r2, r1
 80025a8:	eb42 0303 	adc.w	r3, r2, r3
 80025ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80025b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80025ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	f04f 0300 	mov.w	r3, #0
 80025c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80025c8:	4649      	mov	r1, r9
 80025ca:	008b      	lsls	r3, r1, #2
 80025cc:	4641      	mov	r1, r8
 80025ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025d2:	4641      	mov	r1, r8
 80025d4:	008a      	lsls	r2, r1, #2
 80025d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80025da:	f7fd fe71 	bl	80002c0 <__aeabi_uldivmod>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4b39      	ldr	r3, [pc, #228]	; (80026c8 <UART_SetConfig+0x4e4>)
 80025e4:	fba3 1302 	umull	r1, r3, r3, r2
 80025e8:	095b      	lsrs	r3, r3, #5
 80025ea:	2164      	movs	r1, #100	; 0x64
 80025ec:	fb01 f303 	mul.w	r3, r1, r3
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	3332      	adds	r3, #50	; 0x32
 80025f6:	4a34      	ldr	r2, [pc, #208]	; (80026c8 <UART_SetConfig+0x4e4>)
 80025f8:	fba2 2303 	umull	r2, r3, r2, r3
 80025fc:	095b      	lsrs	r3, r3, #5
 80025fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002602:	441c      	add	r4, r3
 8002604:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002608:	2200      	movs	r2, #0
 800260a:	673b      	str	r3, [r7, #112]	; 0x70
 800260c:	677a      	str	r2, [r7, #116]	; 0x74
 800260e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002612:	4642      	mov	r2, r8
 8002614:	464b      	mov	r3, r9
 8002616:	1891      	adds	r1, r2, r2
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	415b      	adcs	r3, r3
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002622:	4641      	mov	r1, r8
 8002624:	1851      	adds	r1, r2, r1
 8002626:	6039      	str	r1, [r7, #0]
 8002628:	4649      	mov	r1, r9
 800262a:	414b      	adcs	r3, r1
 800262c:	607b      	str	r3, [r7, #4]
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	f04f 0300 	mov.w	r3, #0
 8002636:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800263a:	4659      	mov	r1, fp
 800263c:	00cb      	lsls	r3, r1, #3
 800263e:	4651      	mov	r1, sl
 8002640:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002644:	4651      	mov	r1, sl
 8002646:	00ca      	lsls	r2, r1, #3
 8002648:	4610      	mov	r0, r2
 800264a:	4619      	mov	r1, r3
 800264c:	4603      	mov	r3, r0
 800264e:	4642      	mov	r2, r8
 8002650:	189b      	adds	r3, r3, r2
 8002652:	66bb      	str	r3, [r7, #104]	; 0x68
 8002654:	464b      	mov	r3, r9
 8002656:	460a      	mov	r2, r1
 8002658:	eb42 0303 	adc.w	r3, r2, r3
 800265c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800265e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	663b      	str	r3, [r7, #96]	; 0x60
 8002668:	667a      	str	r2, [r7, #100]	; 0x64
 800266a:	f04f 0200 	mov.w	r2, #0
 800266e:	f04f 0300 	mov.w	r3, #0
 8002672:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002676:	4649      	mov	r1, r9
 8002678:	008b      	lsls	r3, r1, #2
 800267a:	4641      	mov	r1, r8
 800267c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002680:	4641      	mov	r1, r8
 8002682:	008a      	lsls	r2, r1, #2
 8002684:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002688:	f7fd fe1a 	bl	80002c0 <__aeabi_uldivmod>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <UART_SetConfig+0x4e4>)
 8002692:	fba3 1302 	umull	r1, r3, r3, r2
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	2164      	movs	r1, #100	; 0x64
 800269a:	fb01 f303 	mul.w	r3, r1, r3
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	3332      	adds	r3, #50	; 0x32
 80026a4:	4a08      	ldr	r2, [pc, #32]	; (80026c8 <UART_SetConfig+0x4e4>)
 80026a6:	fba2 2303 	umull	r2, r3, r2, r3
 80026aa:	095b      	lsrs	r3, r3, #5
 80026ac:	f003 020f 	and.w	r2, r3, #15
 80026b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4422      	add	r2, r4
 80026b8:	609a      	str	r2, [r3, #8]
}
 80026ba:	bf00      	nop
 80026bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80026c0:	46bd      	mov	sp, r7
 80026c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026c6:	bf00      	nop
 80026c8:	51eb851f 	.word	0x51eb851f

080026cc <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af02      	add	r7, sp, #8
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80026d6:	2300      	movs	r3, #0
 80026d8:	9301      	str	r3, [sp, #4]
 80026da:	2304      	movs	r3, #4
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	2301      	movs	r3, #1
 80026e0:	4a04      	ldr	r2, [pc, #16]	; (80026f4 <ai_network_create+0x28>)
 80026e2:	6839      	ldr	r1, [r7, #0]
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 f825 	bl	8002734 <ai_platform_network_create>
 80026ea:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	200009cc 	.word	0x200009cc

080026f8 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	68b9      	ldr	r1, [r7, #8]
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f000 f8e9 	bl	80028e0 <ai_platform_network_process>
 800270e:	4603      	mov	r3, r0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <ai_network_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_network_data_weights_get(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
    AI_PTR(AI_MAGIC_MARKER),
    AI_PTR(s_network_weights_array_u64),
    AI_PTR(AI_MAGIC_MARKER)
  };

  return AI_HANDLE_PTR(s_network_weights_map);
 800271c:	4b02      	ldr	r3, [pc, #8]	; (8002728 <ai_network_data_weights_get+0x10>)

}
 800271e:	4618      	mov	r0, r3
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	0802a0f8 	.word	0x0802a0f8

0800272c <_ai_platform_acquire_crc>:
 800272c:	2001      	movs	r0, #1
 800272e:	4770      	bx	lr

08002730 <_ai_platform_release_crc>:
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop

08002734 <ai_platform_network_create>:
 8002734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	4607      	mov	r7, r0
 800273c:	4616      	mov	r6, r2
 800273e:	461d      	mov	r5, r3
 8002740:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8002744:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 8002748:	f7ff fff0 	bl	800272c <_ai_platform_acquire_crc>
 800274c:	b178      	cbz	r0, 800276e <ai_platform_network_create+0x3a>
 800274e:	4b5a      	ldr	r3, [pc, #360]	; (80028b8 <ai_platform_network_create+0x184>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800275a:	4602      	mov	r2, r0
 800275c:	d00c      	beq.n	8002778 <ai_platform_network_create+0x44>
 800275e:	4b57      	ldr	r3, [pc, #348]	; (80028bc <ai_platform_network_create+0x188>)
 8002760:	2118      	movs	r1, #24
 8002762:	6019      	str	r1, [r3, #0]
 8002764:	6819      	ldr	r1, [r3, #0]
 8002766:	2918      	cmp	r1, #24
 8002768:	d034      	beq.n	80027d4 <ai_platform_network_create+0xa0>
 800276a:	f7ff ffe1 	bl	8002730 <_ai_platform_release_crc>
 800276e:	f241 0033 	movw	r0, #4147	; 0x1033
 8002772:	b002      	add	sp, #8
 8002774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002778:	4b51      	ldr	r3, [pc, #324]	; (80028c0 <ai_platform_network_create+0x18c>)
 800277a:	2101      	movs	r1, #1
 800277c:	6019      	str	r1, [r3, #0]
 800277e:	2114      	movs	r1, #20
 8002780:	e001      	b.n	8002786 <ai_platform_network_create+0x52>
 8002782:	3901      	subs	r1, #1
 8002784:	d002      	beq.n	800278c <ai_platform_network_create+0x58>
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	2800      	cmp	r0, #0
 800278a:	d1fa      	bne.n	8002782 <ai_platform_network_create+0x4e>
 800278c:	4b4c      	ldr	r3, [pc, #304]	; (80028c0 <ai_platform_network_create+0x18c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	b9f3      	cbnz	r3, 80027d0 <ai_platform_network_create+0x9c>
 8002792:	4610      	mov	r0, r2
 8002794:	f7ff ffcc 	bl	8002730 <_ai_platform_release_crc>
 8002798:	4a4a      	ldr	r2, [pc, #296]	; (80028c4 <ai_platform_network_create+0x190>)
 800279a:	6813      	ldr	r3, [r2, #0]
 800279c:	f023 0301 	bic.w	r3, r3, #1
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	f7ff ffc3 	bl	800272c <_ai_platform_acquire_crc>
 80027a6:	4b44      	ldr	r3, [pc, #272]	; (80028b8 <ai_platform_network_create+0x184>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80027ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b2:	d015      	beq.n	80027e0 <ai_platform_network_create+0xac>
 80027b4:	4b41      	ldr	r3, [pc, #260]	; (80028bc <ai_platform_network_create+0x188>)
 80027b6:	2201      	movs	r2, #1
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	2a00      	cmp	r2, #0
 80027be:	d1fc      	bne.n	80027ba <ai_platform_network_create+0x86>
 80027c0:	4b41      	ldr	r3, [pc, #260]	; (80028c8 <ai_platform_network_create+0x194>)
 80027c2:	4a42      	ldr	r2, [pc, #264]	; (80028cc <ai_platform_network_create+0x198>)
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4b41      	ldr	r3, [pc, #260]	; (80028d0 <ai_platform_network_create+0x19c>)
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d016      	beq.n	80027fc <ai_platform_network_create+0xc8>
 80027ce:	e7fe      	b.n	80027ce <ai_platform_network_create+0x9a>
 80027d0:	4610      	mov	r0, r2
 80027d2:	e7ca      	b.n	800276a <ai_platform_network_create+0x36>
 80027d4:	2101      	movs	r1, #1
 80027d6:	6019      	str	r1, [r3, #0]
 80027d8:	6819      	ldr	r1, [r3, #0]
 80027da:	2900      	cmp	r1, #0
 80027dc:	d1fc      	bne.n	80027d8 <ai_platform_network_create+0xa4>
 80027de:	e7d8      	b.n	8002792 <ai_platform_network_create+0x5e>
 80027e0:	4b37      	ldr	r3, [pc, #220]	; (80028c0 <ai_platform_network_create+0x18c>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	2a00      	cmp	r2, #0
 80027ea:	d1fc      	bne.n	80027e6 <ai_platform_network_create+0xb2>
 80027ec:	4b39      	ldr	r3, [pc, #228]	; (80028d4 <ai_platform_network_create+0x1a0>)
 80027ee:	4a37      	ldr	r2, [pc, #220]	; (80028cc <ai_platform_network_create+0x198>)
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	4b36      	ldr	r3, [pc, #216]	; (80028d0 <ai_platform_network_create+0x19c>)
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d000      	beq.n	80027fc <ai_platform_network_create+0xc8>
 80027fa:	e7fe      	b.n	80027fa <ai_platform_network_create+0xc6>
 80027fc:	f7ff ff98 	bl	8002730 <_ai_platform_release_crc>
 8002800:	b1af      	cbz	r7, 800282e <ai_platform_network_create+0xfa>
 8002802:	4b35      	ldr	r3, [pc, #212]	; (80028d8 <ai_platform_network_create+0x1a4>)
 8002804:	6033      	str	r3, [r6, #0]
 8002806:	603e      	str	r6, [r7, #0]
 8002808:	f000 fae8 	bl	8002ddc <core_init>
 800280c:	b990      	cbnz	r0, 8002834 <ai_platform_network_create+0x100>
 800280e:	062d      	lsls	r5, r5, #24
 8002810:	0424      	lsls	r4, r4, #16
 8002812:	2230      	movs	r2, #48	; 0x30
 8002814:	2300      	movs	r3, #0
 8002816:	603b      	str	r3, [r7, #0]
 8002818:	2110      	movs	r1, #16
 800281a:	ea44 2308 	orr.w	r3, r4, r8, lsl #8
 800281e:	2000      	movs	r0, #0
 8002820:	432b      	orrs	r3, r5
 8002822:	f362 0007 	bfi	r0, r2, #0, #8
 8002826:	6473      	str	r3, [r6, #68]	; 0x44
 8002828:	f361 201f 	bfi	r0, r1, #8, #24
 800282c:	e7a1      	b.n	8002772 <ai_platform_network_create+0x3e>
 800282e:	f241 0010 	movw	r0, #4112	; 0x1010
 8002832:	e79e      	b.n	8002772 <ai_platform_network_create+0x3e>
 8002834:	4a23      	ldr	r2, [pc, #140]	; (80028c4 <ai_platform_network_create+0x190>)
 8002836:	6813      	ldr	r3, [r2, #0]
 8002838:	f023 0301 	bic.w	r3, r3, #1
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	f7ff ff75 	bl	800272c <_ai_platform_acquire_crc>
 8002842:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <ai_platform_network_create+0x184>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800284a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800284e:	d00d      	beq.n	800286c <ai_platform_network_create+0x138>
 8002850:	4b1a      	ldr	r3, [pc, #104]	; (80028bc <ai_platform_network_create+0x188>)
 8002852:	2201      	movs	r2, #1
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	2a00      	cmp	r2, #0
 800285a:	d1fc      	bne.n	8002856 <ai_platform_network_create+0x122>
 800285c:	4b1a      	ldr	r3, [pc, #104]	; (80028c8 <ai_platform_network_create+0x194>)
 800285e:	4a1b      	ldr	r2, [pc, #108]	; (80028cc <ai_platform_network_create+0x198>)
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	4b1a      	ldr	r3, [pc, #104]	; (80028d0 <ai_platform_network_create+0x19c>)
 8002866:	429a      	cmp	r2, r3
 8002868:	d00e      	beq.n	8002888 <ai_platform_network_create+0x154>
 800286a:	e7fe      	b.n	800286a <ai_platform_network_create+0x136>
 800286c:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <ai_platform_network_create+0x18c>)
 800286e:	2201      	movs	r2, #1
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	2a00      	cmp	r2, #0
 8002876:	d1fc      	bne.n	8002872 <ai_platform_network_create+0x13e>
 8002878:	4b16      	ldr	r3, [pc, #88]	; (80028d4 <ai_platform_network_create+0x1a0>)
 800287a:	4a14      	ldr	r2, [pc, #80]	; (80028cc <ai_platform_network_create+0x198>)
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <ai_platform_network_create+0x19c>)
 8002882:	429a      	cmp	r2, r3
 8002884:	d000      	beq.n	8002888 <ai_platform_network_create+0x154>
 8002886:	e7fe      	b.n	8002886 <ai_platform_network_create+0x152>
 8002888:	062d      	lsls	r5, r5, #24
 800288a:	0424      	lsls	r4, r4, #16
 800288c:	f7ff ff50 	bl	8002730 <_ai_platform_release_crc>
 8002890:	ea45 0304 	orr.w	r3, r5, r4
 8002894:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8002898:	d001      	beq.n	800289e <ai_platform_network_create+0x16a>
 800289a:	2201      	movs	r2, #1
 800289c:	e7ba      	b.n	8002814 <ai_platform_network_create+0xe0>
 800289e:	a802      	add	r0, sp, #8
 80028a0:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <ai_platform_network_create+0x1a8>)
 80028a2:	f840 3d04 	str.w	r3, [r0, #-4]!
 80028a6:	f002 fa89 	bl	8004dbc <ai_check_custom_types>
 80028aa:	b110      	cbz	r0, 80028b2 <ai_platform_network_create+0x17e>
 80028ac:	2100      	movs	r1, #0
 80028ae:	460a      	mov	r2, r1
 80028b0:	e7b3      	b.n	800281a <ai_platform_network_create+0xe6>
 80028b2:	2202      	movs	r2, #2
 80028b4:	e7ae      	b.n	8002814 <ai_platform_network_create+0xe0>
 80028b6:	bf00      	nop
 80028b8:	e0042000 	.word	0xe0042000
 80028bc:	58024c08 	.word	0x58024c08
 80028c0:	40023008 	.word	0x40023008
 80028c4:	e0002000 	.word	0xe0002000
 80028c8:	58024c00 	.word	0x58024c00
 80028cc:	f407a5c2 	.word	0xf407a5c2
 80028d0:	b5e8b5cd 	.word	0xb5e8b5cd
 80028d4:	40023000 	.word	0x40023000
 80028d8:	a1c00100 	.word	0xa1c00100
 80028dc:	84048403 	.word	0x84048403

080028e0 <ai_platform_network_process>:
 80028e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028e4:	b085      	sub	sp, #20
 80028e6:	460d      	mov	r5, r1
 80028e8:	9202      	str	r2, [sp, #8]
 80028ea:	4604      	mov	r4, r0
 80028ec:	b120      	cbz	r0, 80028f8 <ai_platform_network_process+0x18>
 80028ee:	4b7b      	ldr	r3, [pc, #492]	; (8002adc <ai_platform_network_process+0x1fc>)
 80028f0:	6802      	ldr	r2, [r0, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	bf18      	it	ne
 80028f6:	2400      	movne	r4, #0
 80028f8:	4a79      	ldr	r2, [pc, #484]	; (8002ae0 <ai_platform_network_process+0x200>)
 80028fa:	6813      	ldr	r3, [r2, #0]
 80028fc:	f023 0301 	bic.w	r3, r3, #1
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	f7ff ff13 	bl	800272c <_ai_platform_acquire_crc>
 8002906:	4b77      	ldr	r3, [pc, #476]	; (8002ae4 <ai_platform_network_process+0x204>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800290e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002912:	d00d      	beq.n	8002930 <ai_platform_network_process+0x50>
 8002914:	4b74      	ldr	r3, [pc, #464]	; (8002ae8 <ai_platform_network_process+0x208>)
 8002916:	2201      	movs	r2, #1
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	2a00      	cmp	r2, #0
 800291e:	d1fc      	bne.n	800291a <ai_platform_network_process+0x3a>
 8002920:	4b72      	ldr	r3, [pc, #456]	; (8002aec <ai_platform_network_process+0x20c>)
 8002922:	4a73      	ldr	r2, [pc, #460]	; (8002af0 <ai_platform_network_process+0x210>)
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	4b72      	ldr	r3, [pc, #456]	; (8002af4 <ai_platform_network_process+0x214>)
 800292a:	429a      	cmp	r2, r3
 800292c:	d00e      	beq.n	800294c <ai_platform_network_process+0x6c>
 800292e:	e7fe      	b.n	800292e <ai_platform_network_process+0x4e>
 8002930:	4b71      	ldr	r3, [pc, #452]	; (8002af8 <ai_platform_network_process+0x218>)
 8002932:	2201      	movs	r2, #1
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	2a00      	cmp	r2, #0
 800293a:	d1fc      	bne.n	8002936 <ai_platform_network_process+0x56>
 800293c:	4b6f      	ldr	r3, [pc, #444]	; (8002afc <ai_platform_network_process+0x21c>)
 800293e:	4a6c      	ldr	r2, [pc, #432]	; (8002af0 <ai_platform_network_process+0x210>)
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4b6b      	ldr	r3, [pc, #428]	; (8002af4 <ai_platform_network_process+0x214>)
 8002946:	429a      	cmp	r2, r3
 8002948:	d000      	beq.n	800294c <ai_platform_network_process+0x6c>
 800294a:	e7fe      	b.n	800294a <ai_platform_network_process+0x6a>
 800294c:	f7ff fef0 	bl	8002730 <_ai_platform_release_crc>
 8002950:	2c00      	cmp	r4, #0
 8002952:	f000 808e 	beq.w	8002a72 <ai_platform_network_process+0x192>
 8002956:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 8002958:	2f00      	cmp	r7, #0
 800295a:	f040 823c 	bne.w	8002dd6 <ai_platform_network_process+0x4f6>
 800295e:	68e3      	ldr	r3, [r4, #12]
 8002960:	f003 0303 	and.w	r3, r3, #3
 8002964:	f04f 0b00 	mov.w	fp, #0
 8002968:	2b03      	cmp	r3, #3
 800296a:	f8c4 b014 	str.w	fp, [r4, #20]
 800296e:	f040 822b 	bne.w	8002dc8 <ai_platform_network_process+0x4e8>
 8002972:	2d00      	cmp	r5, #0
 8002974:	f000 80a8 	beq.w	8002ac8 <ai_platform_network_process+0x1e8>
 8002978:	2f00      	cmp	r7, #0
 800297a:	f000 80a5 	beq.w	8002ac8 <ai_platform_network_process+0x1e8>
 800297e:	883b      	ldrh	r3, [r7, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 80a1 	beq.w	8002ac8 <ai_platform_network_process+0x1e8>
 8002986:	f8b5 9004 	ldrh.w	r9, [r5, #4]
 800298a:	9401      	str	r4, [sp, #4]
 800298c:	46d8      	mov	r8, fp
 800298e:	4598      	cmp	r8, r3
 8002990:	f080 80b6 	bcs.w	8002b00 <ai_platform_network_process+0x220>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 80b2 	beq.w	8002b00 <ai_platform_network_process+0x220>
 800299c:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 80029a0:	2e00      	cmp	r6, #0
 80029a2:	f000 80ad 	beq.w	8002b00 <ai_platform_network_process+0x220>
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	9303      	str	r3, [sp, #12]
 80029ac:	ea4f 1408 	mov.w	r4, r8, lsl #4
 80029b0:	eb13 0a04 	adds.w	sl, r3, r4
 80029b4:	f000 8087 	beq.w	8002ac6 <ai_platform_network_process+0x1e6>
 80029b8:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 80029bc:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 80029c0:	69b0      	ldr	r0, [r6, #24]
 80029c2:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 80029c6:	6841      	ldr	r1, [r0, #4]
 80029c8:	fb0b f30e 	mul.w	r3, fp, lr
 80029cc:	fb0c f303 	mul.w	r3, ip, r3
 80029d0:	4299      	cmp	r1, r3
 80029d2:	d36e      	bcc.n	8002ab2 <ai_platform_network_process+0x1d2>
 80029d4:	68f3      	ldr	r3, [r6, #12]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	455a      	cmp	r2, fp
 80029da:	d16a      	bne.n	8002ab2 <ai_platform_network_process+0x1d2>
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	4572      	cmp	r2, lr
 80029e0:	d167      	bne.n	8002ab2 <ai_platform_network_process+0x1d2>
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	459c      	cmp	ip, r3
 80029e6:	d164      	bne.n	8002ab2 <ai_platform_network_process+0x1d2>
 80029e8:	6800      	ldr	r0, [r0, #0]
 80029ea:	f002 fab7 	bl	8004f5c <ai_array_get_byte_size>
 80029ee:	68f2      	ldr	r2, [r6, #12]
 80029f0:	6973      	ldr	r3, [r6, #20]
 80029f2:	68d2      	ldr	r2, [r2, #12]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	fb03 f302 	mul.w	r3, r3, r2
 80029fa:	4298      	cmp	r0, r3
 80029fc:	d359      	bcc.n	8002ab2 <ai_platform_network_process+0x1d2>
 80029fe:	69b3      	ldr	r3, [r6, #24]
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	f002 fa53 	bl	8004eac <ai_array_to_buffer_fmt>
 8002a06:	682b      	ldr	r3, [r5, #0]
 8002a08:	4043      	eors	r3, r0
 8002a0a:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8002a0e:	d146      	bne.n	8002a9e <ai_platform_network_process+0x1be>
 8002a10:	692b      	ldr	r3, [r5, #16]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d03a      	beq.n	8002a8c <ai_platform_network_process+0x1ac>
 8002a16:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 8002a1a:	f1bb 0f00 	cmp.w	fp, #0
 8002a1e:	d02d      	beq.n	8002a7c <ai_platform_network_process+0x19c>
 8002a20:	68f2      	ldr	r2, [r6, #12]
 8002a22:	6973      	ldr	r3, [r6, #20]
 8002a24:	68d1      	ldr	r1, [r2, #12]
 8002a26:	68da      	ldr	r2, [r3, #12]
 8002a28:	fb02 f201 	mul.w	r2, r2, r1
 8002a2c:	f8ca 2008 	str.w	r2, [sl, #8]
 8002a30:	88ab      	ldrh	r3, [r5, #4]
 8002a32:	fb02 f203 	mul.w	r2, r2, r3
 8002a36:	f8ca 200c 	str.w	r2, [sl, #12]
 8002a3a:	6929      	ldr	r1, [r5, #16]
 8002a3c:	f8ca 1004 	str.w	r1, [sl, #4]
 8002a40:	692b      	ldr	r3, [r5, #16]
 8002a42:	4413      	add	r3, r2
 8002a44:	9a03      	ldr	r2, [sp, #12]
 8002a46:	5113      	str	r3, [r2, r4]
 8002a48:	69b0      	ldr	r0, [r6, #24]
 8002a4a:	6803      	ldr	r3, [r0, #0]
 8002a4c:	45d9      	cmp	r9, fp
 8002a4e:	bf38      	it	cc
 8002a50:	46d9      	movcc	r9, fp
 8002a52:	009a      	lsls	r2, r3, #2
 8002a54:	d408      	bmi.n	8002a68 <ai_platform_network_process+0x188>
 8002a56:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8002a5a:	1a9b      	subs	r3, r3, r2
 8002a5c:	4419      	add	r1, r3
 8002a5e:	6081      	str	r1, [r0, #8]
 8002a60:	69b3      	ldr	r3, [r6, #24]
 8002a62:	f8da 2004 	ldr.w	r2, [sl, #4]
 8002a66:	60da      	str	r2, [r3, #12]
 8002a68:	883b      	ldrh	r3, [r7, #0]
 8002a6a:	f108 0801 	add.w	r8, r8, #1
 8002a6e:	3518      	adds	r5, #24
 8002a70:	e78d      	b.n	800298e <ai_platform_network_process+0xae>
 8002a72:	46a3      	mov	fp, r4
 8002a74:	4658      	mov	r0, fp
 8002a76:	b005      	add	sp, #20
 8002a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a7c:	9c01      	ldr	r4, [sp, #4]
 8002a7e:	2221      	movs	r2, #33	; 0x21
 8002a80:	f104 0010 	add.w	r0, r4, #16
 8002a84:	2112      	movs	r1, #18
 8002a86:	f000 f9ab 	bl	8002de0 <core_set_error>
 8002a8a:	e7f3      	b.n	8002a74 <ai_platform_network_process+0x194>
 8002a8c:	9c01      	ldr	r4, [sp, #4]
 8002a8e:	2217      	movs	r2, #23
 8002a90:	f104 0010 	add.w	r0, r4, #16
 8002a94:	2112      	movs	r1, #18
 8002a96:	469b      	mov	fp, r3
 8002a98:	f000 f9a2 	bl	8002de0 <core_set_error>
 8002a9c:	e7ea      	b.n	8002a74 <ai_platform_network_process+0x194>
 8002a9e:	9c01      	ldr	r4, [sp, #4]
 8002aa0:	2219      	movs	r2, #25
 8002aa2:	f104 0010 	add.w	r0, r4, #16
 8002aa6:	2112      	movs	r1, #18
 8002aa8:	f000 f99a 	bl	8002de0 <core_set_error>
 8002aac:	f04f 0b00 	mov.w	fp, #0
 8002ab0:	e7e0      	b.n	8002a74 <ai_platform_network_process+0x194>
 8002ab2:	9c01      	ldr	r4, [sp, #4]
 8002ab4:	2218      	movs	r2, #24
 8002ab6:	f104 0010 	add.w	r0, r4, #16
 8002aba:	2112      	movs	r1, #18
 8002abc:	f000 f990 	bl	8002de0 <core_set_error>
 8002ac0:	f04f 0b00 	mov.w	fp, #0
 8002ac4:	e7d6      	b.n	8002a74 <ai_platform_network_process+0x194>
 8002ac6:	9c01      	ldr	r4, [sp, #4]
 8002ac8:	f104 0010 	add.w	r0, r4, #16
 8002acc:	2217      	movs	r2, #23
 8002ace:	2112      	movs	r1, #18
 8002ad0:	f000 f986 	bl	8002de0 <core_set_error>
 8002ad4:	f04f 0b00 	mov.w	fp, #0
 8002ad8:	e7cc      	b.n	8002a74 <ai_platform_network_process+0x194>
 8002ada:	bf00      	nop
 8002adc:	a1c00100 	.word	0xa1c00100
 8002ae0:	e0002000 	.word	0xe0002000
 8002ae4:	e0042000 	.word	0xe0042000
 8002ae8:	58024c08 	.word	0x58024c08
 8002aec:	58024c00 	.word	0x58024c00
 8002af0:	f407a5c2 	.word	0xf407a5c2
 8002af4:	b5e8b5cd 	.word	0xb5e8b5cd
 8002af8:	40023008 	.word	0x40023008
 8002afc:	40023000 	.word	0x40023000
 8002b00:	9c01      	ldr	r4, [sp, #4]
 8002b02:	9a02      	ldr	r2, [sp, #8]
 8002b04:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8002b06:	2a00      	cmp	r2, #0
 8002b08:	f000 80a9 	beq.w	8002c5e <ai_platform_network_process+0x37e>
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	f240 809b 	bls.w	8002c48 <ai_platform_network_process+0x368>
 8002b12:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8002b16:	f11a 0f0c 	cmn.w	sl, #12
 8002b1a:	f000 8095 	beq.w	8002c48 <ai_platform_network_process+0x368>
 8002b1e:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 8090 	beq.w	8002c48 <ai_platform_network_process+0x368>
 8002b28:	9d02      	ldr	r5, [sp, #8]
 8002b2a:	9401      	str	r4, [sp, #4]
 8002b2c:	f04f 0800 	mov.w	r8, #0
 8002b30:	4598      	cmp	r8, r3
 8002b32:	f080 8092 	bcs.w	8002c5a <ai_platform_network_process+0x37a>
 8002b36:	f8da 3010 	ldr.w	r3, [sl, #16]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 808d 	beq.w	8002c5a <ai_platform_network_process+0x37a>
 8002b40:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 8002b44:	2e00      	cmp	r6, #0
 8002b46:	f000 8088 	beq.w	8002c5a <ai_platform_network_process+0x37a>
 8002b4a:	f8da 3014 	ldr.w	r3, [sl, #20]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	9302      	str	r3, [sp, #8]
 8002b52:	ea4f 1408 	mov.w	r4, r8, lsl #4
 8002b56:	191f      	adds	r7, r3, r4
 8002b58:	f000 812d 	beq.w	8002db6 <ai_platform_network_process+0x4d6>
 8002b5c:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8002b60:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 8002b64:	69b0      	ldr	r0, [r6, #24]
 8002b66:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8002b6a:	6841      	ldr	r1, [r0, #4]
 8002b6c:	fb0b f30e 	mul.w	r3, fp, lr
 8002b70:	fb0c f303 	mul.w	r3, ip, r3
 8002b74:	4299      	cmp	r1, r3
 8002b76:	d366      	bcc.n	8002c46 <ai_platform_network_process+0x366>
 8002b78:	68f3      	ldr	r3, [r6, #12]
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	455a      	cmp	r2, fp
 8002b7e:	d162      	bne.n	8002c46 <ai_platform_network_process+0x366>
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	4572      	cmp	r2, lr
 8002b84:	d15f      	bne.n	8002c46 <ai_platform_network_process+0x366>
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	459c      	cmp	ip, r3
 8002b8a:	d15c      	bne.n	8002c46 <ai_platform_network_process+0x366>
 8002b8c:	6800      	ldr	r0, [r0, #0]
 8002b8e:	f002 f9e5 	bl	8004f5c <ai_array_get_byte_size>
 8002b92:	68f2      	ldr	r2, [r6, #12]
 8002b94:	6973      	ldr	r3, [r6, #20]
 8002b96:	68d2      	ldr	r2, [r2, #12]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	fb03 f302 	mul.w	r3, r3, r2
 8002b9e:	4298      	cmp	r0, r3
 8002ba0:	d351      	bcc.n	8002c46 <ai_platform_network_process+0x366>
 8002ba2:	69b3      	ldr	r3, [r6, #24]
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	f002 f981 	bl	8004eac <ai_array_to_buffer_fmt>
 8002baa:	682b      	ldr	r3, [r5, #0]
 8002bac:	4043      	eors	r3, r0
 8002bae:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8002bb2:	d13e      	bne.n	8002c32 <ai_platform_network_process+0x352>
 8002bb4:	692b      	ldr	r3, [r5, #16]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d032      	beq.n	8002c20 <ai_platform_network_process+0x340>
 8002bba:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 8002bbe:	f1bb 0f00 	cmp.w	fp, #0
 8002bc2:	d025      	beq.n	8002c10 <ai_platform_network_process+0x330>
 8002bc4:	68f2      	ldr	r2, [r6, #12]
 8002bc6:	6973      	ldr	r3, [r6, #20]
 8002bc8:	68d1      	ldr	r1, [r2, #12]
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	fb02 f201 	mul.w	r2, r2, r1
 8002bd0:	60ba      	str	r2, [r7, #8]
 8002bd2:	88ab      	ldrh	r3, [r5, #4]
 8002bd4:	fb02 f203 	mul.w	r2, r2, r3
 8002bd8:	60fa      	str	r2, [r7, #12]
 8002bda:	6929      	ldr	r1, [r5, #16]
 8002bdc:	6079      	str	r1, [r7, #4]
 8002bde:	692b      	ldr	r3, [r5, #16]
 8002be0:	4413      	add	r3, r2
 8002be2:	9a02      	ldr	r2, [sp, #8]
 8002be4:	5113      	str	r3, [r2, r4]
 8002be6:	69b0      	ldr	r0, [r6, #24]
 8002be8:	6803      	ldr	r3, [r0, #0]
 8002bea:	45d9      	cmp	r9, fp
 8002bec:	bf38      	it	cc
 8002bee:	46d9      	movcc	r9, fp
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	d407      	bmi.n	8002c04 <ai_platform_network_process+0x324>
 8002bf4:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8002bf8:	1a9b      	subs	r3, r3, r2
 8002bfa:	4419      	add	r1, r3
 8002bfc:	6081      	str	r1, [r0, #8]
 8002bfe:	69b3      	ldr	r3, [r6, #24]
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	60da      	str	r2, [r3, #12]
 8002c04:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8002c08:	f108 0801 	add.w	r8, r8, #1
 8002c0c:	3518      	adds	r5, #24
 8002c0e:	e78f      	b.n	8002b30 <ai_platform_network_process+0x250>
 8002c10:	9c01      	ldr	r4, [sp, #4]
 8002c12:	2221      	movs	r2, #33	; 0x21
 8002c14:	f104 0010 	add.w	r0, r4, #16
 8002c18:	2113      	movs	r1, #19
 8002c1a:	f000 f8e1 	bl	8002de0 <core_set_error>
 8002c1e:	e729      	b.n	8002a74 <ai_platform_network_process+0x194>
 8002c20:	9c01      	ldr	r4, [sp, #4]
 8002c22:	2217      	movs	r2, #23
 8002c24:	f104 0010 	add.w	r0, r4, #16
 8002c28:	2113      	movs	r1, #19
 8002c2a:	469b      	mov	fp, r3
 8002c2c:	f000 f8d8 	bl	8002de0 <core_set_error>
 8002c30:	e720      	b.n	8002a74 <ai_platform_network_process+0x194>
 8002c32:	9c01      	ldr	r4, [sp, #4]
 8002c34:	2219      	movs	r2, #25
 8002c36:	f104 0010 	add.w	r0, r4, #16
 8002c3a:	2113      	movs	r1, #19
 8002c3c:	f000 f8d0 	bl	8002de0 <core_set_error>
 8002c40:	f04f 0b00 	mov.w	fp, #0
 8002c44:	e716      	b.n	8002a74 <ai_platform_network_process+0x194>
 8002c46:	9c01      	ldr	r4, [sp, #4]
 8002c48:	f104 0010 	add.w	r0, r4, #16
 8002c4c:	2218      	movs	r2, #24
 8002c4e:	2113      	movs	r1, #19
 8002c50:	f000 f8c6 	bl	8002de0 <core_set_error>
 8002c54:	f04f 0b00 	mov.w	fp, #0
 8002c58:	e70c      	b.n	8002a74 <ai_platform_network_process+0x194>
 8002c5a:	9c01      	ldr	r4, [sp, #4]
 8002c5c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8002c5e:	f8a4 9014 	strh.w	r9, [r4, #20]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 80a4 	beq.w	8002db0 <ai_platform_network_process+0x4d0>
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8002c6c:	f240 809e 	bls.w	8002dac <ai_platform_network_process+0x4cc>
 8002c70:	f105 070c 	add.w	r7, r5, #12
 8002c74:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 8002c78:	8aa3      	ldrh	r3, [r4, #20]
 8002c7a:	455b      	cmp	r3, fp
 8002c7c:	f67f aefa 	bls.w	8002a74 <ai_platform_network_process+0x194>
 8002c80:	9401      	str	r4, [sp, #4]
 8002c82:	2d00      	cmp	r5, #0
 8002c84:	d036      	beq.n	8002cf4 <ai_platform_network_process+0x414>
 8002c86:	882b      	ldrh	r3, [r5, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d033      	beq.n	8002cf4 <ai_platform_network_process+0x414>
 8002c8c:	686b      	ldr	r3, [r5, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d030      	beq.n	8002cf4 <ai_platform_network_process+0x414>
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f04f 0800 	mov.w	r8, #0
 8002c98:	b9db      	cbnz	r3, 8002cd2 <ai_platform_network_process+0x3f2>
 8002c9a:	e02b      	b.n	8002cf4 <ai_platform_network_process+0x414>
 8002c9c:	68d4      	ldr	r4, [r2, #12]
 8002c9e:	1b00      	subs	r0, r0, r4
 8002ca0:	4401      	add	r1, r0
 8002ca2:	6091      	str	r1, [r2, #8]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	6872      	ldr	r2, [r6, #4]
 8002ca8:	60da      	str	r2, [r3, #12]
 8002caa:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8002cae:	f85a 2009 	ldr.w	r2, [sl, r9]
 8002cb2:	440b      	add	r3, r1
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	bf24      	itt	cs
 8002cb8:	68f3      	ldrcs	r3, [r6, #12]
 8002cba:	1ad3      	subcs	r3, r2, r3
 8002cbc:	6073      	str	r3, [r6, #4]
 8002cbe:	882b      	ldrh	r3, [r5, #0]
 8002cc0:	f108 0801 	add.w	r8, r8, #1
 8002cc4:	4598      	cmp	r8, r3
 8002cc6:	d215      	bcs.n	8002cf4 <ai_platform_network_process+0x414>
 8002cc8:	686b      	ldr	r3, [r5, #4]
 8002cca:	b19b      	cbz	r3, 8002cf4 <ai_platform_network_process+0x414>
 8002ccc:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8002cd0:	b183      	cbz	r3, 8002cf4 <ai_platform_network_process+0x414>
 8002cd2:	68a9      	ldr	r1, [r5, #8]
 8002cd4:	699a      	ldr	r2, [r3, #24]
 8002cd6:	f8d1 a000 	ldr.w	sl, [r1]
 8002cda:	6814      	ldr	r4, [r2, #0]
 8002cdc:	6890      	ldr	r0, [r2, #8]
 8002cde:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8002ce2:	eb0a 0609 	add.w	r6, sl, r9
 8002ce6:	00a4      	lsls	r4, r4, #2
 8002ce8:	6871      	ldr	r1, [r6, #4]
 8002cea:	d5d7      	bpl.n	8002c9c <ai_platform_network_process+0x3bc>
 8002cec:	68b2      	ldr	r2, [r6, #8]
 8002cee:	f002 f981 	bl	8004ff4 <memcpy>
 8002cf2:	e7da      	b.n	8002caa <ai_platform_network_process+0x3ca>
 8002cf4:	9801      	ldr	r0, [sp, #4]
 8002cf6:	f002 f88b 	bl	8004e10 <ai_layers_forward_all>
 8002cfa:	2f00      	cmp	r7, #0
 8002cfc:	d047      	beq.n	8002d8e <ai_platform_network_process+0x4ae>
 8002cfe:	883b      	ldrh	r3, [r7, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d044      	beq.n	8002d8e <ai_platform_network_process+0x4ae>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d041      	beq.n	8002d8e <ai_platform_network_process+0x4ae>
 8002d0a:	6818      	ldr	r0, [r3, #0]
 8002d0c:	2800      	cmp	r0, #0
 8002d0e:	d03e      	beq.n	8002d8e <ai_platform_network_process+0x4ae>
 8002d10:	f04f 0800 	mov.w	r8, #0
 8002d14:	e019      	b.n	8002d4a <ai_platform_network_process+0x46a>
 8002d16:	f85a 2009 	ldr.w	r2, [sl, r9]
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	bf24      	itt	cs
 8002d1e:	68f3      	ldrcs	r3, [r6, #12]
 8002d20:	1ad3      	subcs	r3, r2, r3
 8002d22:	6073      	str	r3, [r6, #4]
 8002d24:	6981      	ldr	r1, [r0, #24]
 8002d26:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8002d2a:	1b12      	subs	r2, r2, r4
 8002d2c:	4413      	add	r3, r2
 8002d2e:	608b      	str	r3, [r1, #8]
 8002d30:	6983      	ldr	r3, [r0, #24]
 8002d32:	6872      	ldr	r2, [r6, #4]
 8002d34:	60da      	str	r2, [r3, #12]
 8002d36:	883b      	ldrh	r3, [r7, #0]
 8002d38:	f108 0801 	add.w	r8, r8, #1
 8002d3c:	4598      	cmp	r8, r3
 8002d3e:	d226      	bcs.n	8002d8e <ai_platform_network_process+0x4ae>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	b323      	cbz	r3, 8002d8e <ai_platform_network_process+0x4ae>
 8002d44:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8002d48:	b308      	cbz	r0, 8002d8e <ai_platform_network_process+0x4ae>
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	6981      	ldr	r1, [r0, #24]
 8002d4e:	f8d3 a000 	ldr.w	sl, [r3]
 8002d52:	680c      	ldr	r4, [r1, #0]
 8002d54:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8002d58:	eb0a 0609 	add.w	r6, sl, r9
 8002d5c:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8002d60:	00a4      	lsls	r4, r4, #2
 8002d62:	eb0c 0302 	add.w	r3, ip, r2
 8002d66:	d5d6      	bpl.n	8002d16 <ai_platform_network_process+0x436>
 8002d68:	6889      	ldr	r1, [r1, #8]
 8002d6a:	4660      	mov	r0, ip
 8002d6c:	f002 f942 	bl	8004ff4 <memcpy>
 8002d70:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8002d74:	f85a 2009 	ldr.w	r2, [sl, r9]
 8002d78:	440b      	add	r3, r1
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	bf24      	itt	cs
 8002d7e:	68f3      	ldrcs	r3, [r6, #12]
 8002d80:	1ad3      	subcs	r3, r2, r3
 8002d82:	6073      	str	r3, [r6, #4]
 8002d84:	883b      	ldrh	r3, [r7, #0]
 8002d86:	f108 0801 	add.w	r8, r8, #1
 8002d8a:	4598      	cmp	r8, r3
 8002d8c:	d3d8      	bcc.n	8002d40 <ai_platform_network_process+0x460>
 8002d8e:	9b01      	ldr	r3, [sp, #4]
 8002d90:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 8002d94:	461a      	mov	r2, r3
 8002d96:	f10b 0b01 	add.w	fp, fp, #1
 8002d9a:	8a9b      	ldrh	r3, [r3, #20]
 8002d9c:	fa1f fb8b 	uxth.w	fp, fp
 8002da0:	455b      	cmp	r3, fp
 8002da2:	f8a2 b016 	strh.w	fp, [r2, #22]
 8002da6:	f63f af6c 	bhi.w	8002c82 <ai_platform_network_process+0x3a2>
 8002daa:	e663      	b.n	8002a74 <ai_platform_network_process+0x194>
 8002dac:	2700      	movs	r7, #0
 8002dae:	e761      	b.n	8002c74 <ai_platform_network_process+0x394>
 8002db0:	461d      	mov	r5, r3
 8002db2:	461f      	mov	r7, r3
 8002db4:	e75e      	b.n	8002c74 <ai_platform_network_process+0x394>
 8002db6:	9c01      	ldr	r4, [sp, #4]
 8002db8:	2217      	movs	r2, #23
 8002dba:	f104 0010 	add.w	r0, r4, #16
 8002dbe:	2113      	movs	r1, #19
 8002dc0:	f000 f80e 	bl	8002de0 <core_set_error>
 8002dc4:	46bb      	mov	fp, r7
 8002dc6:	e655      	b.n	8002a74 <ai_platform_network_process+0x194>
 8002dc8:	f104 0010 	add.w	r0, r4, #16
 8002dcc:	2230      	movs	r2, #48	; 0x30
 8002dce:	2111      	movs	r1, #17
 8002dd0:	f000 f806 	bl	8002de0 <core_set_error>
 8002dd4:	e64e      	b.n	8002a74 <ai_platform_network_process+0x194>
 8002dd6:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8002dd8:	e5c1      	b.n	800295e <ai_platform_network_process+0x7e>
 8002dda:	bf00      	nop

08002ddc <core_init>:
 8002ddc:	2001      	movs	r0, #1
 8002dde:	4770      	bx	lr

08002de0 <core_set_error>:
 8002de0:	7803      	ldrb	r3, [r0, #0]
 8002de2:	b933      	cbnz	r3, 8002df2 <core_set_error+0x12>
 8002de4:	7001      	strb	r1, [r0, #0]
 8002de6:	6803      	ldr	r3, [r0, #0]
 8002de8:	f362 231f 	bfi	r3, r2, #8, #24
 8002dec:	6003      	str	r3, [r0, #0]
 8002dee:	2001      	movs	r0, #1
 8002df0:	4770      	bx	lr
 8002df2:	2000      	movs	r0, #0
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop

08002df8 <func_dummy>:
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop

08002dfc <ai_dict8_dot_array_f32>:
 8002dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e00:	f8dd c020 	ldr.w	ip, [sp, #32]
 8002e04:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 8002e08:	f000 80c0 	beq.w	8002f8c <ai_dict8_dot_array_f32+0x190>
 8002e0c:	f101 0408 	add.w	r4, r1, #8
 8002e10:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8002e14:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8002f94 <ai_dict8_dot_array_f32+0x198>
 8002e18:	eb04 0e09 	add.w	lr, r4, r9
 8002e1c:	f103 0520 	add.w	r5, r3, #32
 8002e20:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8002e24:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 8002e28:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 8002e2c:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8002e30:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8002e34:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 8002e38:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8002e3c:	ed55 3a04 	vldr	s7, [r5, #-16]
 8002e40:	ed55 4a03 	vldr	s9, [r5, #-12]
 8002e44:	ed55 5a02 	vldr	s11, [r5, #-8]
 8002e48:	ed55 6a01 	vldr	s13, [r5, #-4]
 8002e4c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8002e50:	edd6 7a00 	vldr	s15, [r6]
 8002e54:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 8002e58:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8002e5c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8002e60:	ed9a 3a00 	vldr	s6, [sl]
 8002e64:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8002e68:	eee3 7a05 	vfma.f32	s15, s6, s10
 8002e6c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8002e70:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8002e74:	ed97 3a00 	vldr	s6, [r7]
 8002e78:	ed96 5a00 	vldr	s10, [r6]
 8002e7c:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8002e80:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 8002e84:	eee3 7a04 	vfma.f32	s15, s6, s8
 8002e88:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8002e8c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8002e90:	ed9a 3a00 	vldr	s6, [sl]
 8002e94:	ed96 4a00 	vldr	s8, [r6]
 8002e98:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8002e9c:	eee5 7a06 	vfma.f32	s15, s10, s12
 8002ea0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8002ea4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8002ea8:	ed97 5a00 	vldr	s10, [r7]
 8002eac:	ed96 6a00 	vldr	s12, [r6]
 8002eb0:	eee3 7a23 	vfma.f32	s15, s6, s7
 8002eb4:	3408      	adds	r4, #8
 8002eb6:	45a6      	cmp	lr, r4
 8002eb8:	f105 0520 	add.w	r5, r5, #32
 8002ebc:	eee4 7a24 	vfma.f32	s15, s8, s9
 8002ec0:	eee5 7a25 	vfma.f32	s15, s10, s11
 8002ec4:	eee6 7a26 	vfma.f32	s15, s12, s13
 8002ec8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ecc:	d1a8      	bne.n	8002e20 <ai_dict8_dot_array_f32+0x24>
 8002ece:	4449      	add	r1, r9
 8002ed0:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8002ed4:	f01c 0c07 	ands.w	ip, ip, #7
 8002ed8:	d050      	beq.n	8002f7c <ai_dict8_dot_array_f32+0x180>
 8002eda:	780c      	ldrb	r4, [r1, #0]
 8002edc:	edd3 6a00 	vldr	s13, [r3]
 8002ee0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8002ee4:	edd4 7a00 	vldr	s15, [r4]
 8002ee8:	f1bc 0f01 	cmp.w	ip, #1
 8002eec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002ef0:	d044      	beq.n	8002f7c <ai_dict8_dot_array_f32+0x180>
 8002ef2:	784c      	ldrb	r4, [r1, #1]
 8002ef4:	edd3 6a01 	vldr	s13, [r3, #4]
 8002ef8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8002efc:	edd4 7a00 	vldr	s15, [r4]
 8002f00:	f1bc 0f02 	cmp.w	ip, #2
 8002f04:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002f08:	d038      	beq.n	8002f7c <ai_dict8_dot_array_f32+0x180>
 8002f0a:	788c      	ldrb	r4, [r1, #2]
 8002f0c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002f10:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8002f14:	edd4 7a00 	vldr	s15, [r4]
 8002f18:	f1bc 0f03 	cmp.w	ip, #3
 8002f1c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002f20:	d02c      	beq.n	8002f7c <ai_dict8_dot_array_f32+0x180>
 8002f22:	78cc      	ldrb	r4, [r1, #3]
 8002f24:	edd3 6a03 	vldr	s13, [r3, #12]
 8002f28:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8002f2c:	edd4 7a00 	vldr	s15, [r4]
 8002f30:	f1bc 0f04 	cmp.w	ip, #4
 8002f34:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002f38:	d020      	beq.n	8002f7c <ai_dict8_dot_array_f32+0x180>
 8002f3a:	790c      	ldrb	r4, [r1, #4]
 8002f3c:	edd3 6a04 	vldr	s13, [r3, #16]
 8002f40:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8002f44:	edd4 7a00 	vldr	s15, [r4]
 8002f48:	f1bc 0f05 	cmp.w	ip, #5
 8002f4c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002f50:	d014      	beq.n	8002f7c <ai_dict8_dot_array_f32+0x180>
 8002f52:	794c      	ldrb	r4, [r1, #5]
 8002f54:	edd3 6a05 	vldr	s13, [r3, #20]
 8002f58:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8002f5c:	edd4 7a00 	vldr	s15, [r4]
 8002f60:	f1bc 0f06 	cmp.w	ip, #6
 8002f64:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002f68:	d008      	beq.n	8002f7c <ai_dict8_dot_array_f32+0x180>
 8002f6a:	7989      	ldrb	r1, [r1, #6]
 8002f6c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002f70:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8002f74:	edd2 6a00 	vldr	s13, [r2]
 8002f78:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8002f7c:	edd0 7a00 	vldr	s15, [r0]
 8002f80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002f84:	ed80 7a00 	vstr	s14, [r0]
 8002f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f8c:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8002f94 <ai_dict8_dot_array_f32+0x198>
 8002f90:	e7a0      	b.n	8002ed4 <ai_dict8_dot_array_f32+0xd8>
 8002f92:	bf00      	nop
 8002f94:	00000000 	.word	0x00000000

08002f98 <ai_dict4_dot_array_f32>:
 8002f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f9c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8002f9e:	f027 0c01 	bic.w	ip, r7, #1
 8002fa2:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8002fa6:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8002faa:	f000 80ae 	beq.w	800310a <ai_dict4_dot_array_f32+0x172>
 8002fae:	1d0d      	adds	r5, r1, #4
 8002fb0:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8002fb4:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8003110 <ai_dict4_dot_array_f32+0x178>
 8002fb8:	eb05 0e09 	add.w	lr, r5, r9
 8002fbc:	f103 0420 	add.w	r4, r3, #32
 8002fc0:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8002fc4:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 8002fc8:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 8002fcc:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8002fd0:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8002fd4:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 8002fd8:	ed14 5a04 	vldr	s10, [r4, #-16]
 8002fdc:	ed54 5a03 	vldr	s11, [r4, #-12]
 8002fe0:	ed14 6a02 	vldr	s12, [r4, #-8]
 8002fe4:	ed54 6a01 	vldr	s13, [r4, #-4]
 8002fe8:	f006 0a0f 	and.w	sl, r6, #15
 8002fec:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8002ff0:	edda 7a00 	vldr	s15, [sl]
 8002ff4:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 8002ff8:	0936      	lsrs	r6, r6, #4
 8002ffa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8002ffe:	ee67 7a83 	vmul.f32	s15, s15, s6
 8003002:	ed96 3a00 	vldr	s6, [r6]
 8003006:	ea4f 161b 	mov.w	r6, fp, lsr #4
 800300a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800300e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8003012:	f00b 0b0f 	and.w	fp, fp, #15
 8003016:	edd6 3a00 	vldr	s7, [r6]
 800301a:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 800301e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8003022:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8003026:	3504      	adds	r5, #4
 8003028:	ed9b 4a00 	vldr	s8, [fp]
 800302c:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8003030:	eee4 7a24 	vfma.f32	s15, s8, s9
 8003034:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8003038:	f00a 0a0f 	and.w	sl, sl, #15
 800303c:	eddb 4a00 	vldr	s9, [fp]
 8003040:	eee4 7a85 	vfma.f32	s15, s9, s10
 8003044:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8003048:	45ae      	cmp	lr, r5
 800304a:	ed9a 5a00 	vldr	s10, [sl]
 800304e:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 8003052:	eee5 7a25 	vfma.f32	s15, s10, s11
 8003056:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800305a:	f006 060f 	and.w	r6, r6, #15
 800305e:	edda 5a00 	vldr	s11, [sl]
 8003062:	eee5 7a86 	vfma.f32	s15, s11, s12
 8003066:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800306a:	f104 0420 	add.w	r4, r4, #32
 800306e:	ed96 6a00 	vldr	s12, [r6]
 8003072:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003076:	ee37 7a27 	vadd.f32	s14, s14, s15
 800307a:	d1a1      	bne.n	8002fc0 <ai_dict4_dot_array_f32+0x28>
 800307c:	4449      	add	r1, r9
 800307e:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8003082:	459c      	cmp	ip, r3
 8003084:	d92d      	bls.n	80030e2 <ai_dict4_dot_array_f32+0x14a>
 8003086:	f10c 0c07 	add.w	ip, ip, #7
 800308a:	f103 0508 	add.w	r5, r3, #8
 800308e:	ebac 0c05 	sub.w	ip, ip, r5
 8003092:	f02c 0407 	bic.w	r4, ip, #7
 8003096:	f103 0810 	add.w	r8, r3, #16
 800309a:	44a0      	add	r8, r4
 800309c:	f101 3eff 	add.w	lr, r1, #4294967295
 80030a0:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 80030a4:	ed15 6a01 	vldr	s12, [r5, #-4]
 80030a8:	ed55 6a02 	vldr	s13, [r5, #-8]
 80030ac:	f004 060f 	and.w	r6, r4, #15
 80030b0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80030b4:	0924      	lsrs	r4, r4, #4
 80030b6:	edd6 7a00 	vldr	s15, [r6]
 80030ba:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80030be:	ee67 7a86 	vmul.f32	s15, s15, s12
 80030c2:	ed94 6a00 	vldr	s12, [r4]
 80030c6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80030ca:	3508      	adds	r5, #8
 80030cc:	45a8      	cmp	r8, r5
 80030ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030d2:	d1e5      	bne.n	80030a0 <ai_dict4_dot_array_f32+0x108>
 80030d4:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 80030d8:	f10c 0c01 	add.w	ip, ip, #1
 80030dc:	4461      	add	r1, ip
 80030de:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 80030e2:	07fc      	lsls	r4, r7, #31
 80030e4:	d509      	bpl.n	80030fa <ai_dict4_dot_array_f32+0x162>
 80030e6:	7809      	ldrb	r1, [r1, #0]
 80030e8:	edd3 7a00 	vldr	s15, [r3]
 80030ec:	090b      	lsrs	r3, r1, #4
 80030ee:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80030f2:	edd2 6a00 	vldr	s13, [r2]
 80030f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80030fa:	edd0 7a00 	vldr	s15, [r0]
 80030fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003102:	ed80 7a00 	vstr	s14, [r0]
 8003106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800310a:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8003110 <ai_dict4_dot_array_f32+0x178>
 800310e:	e7b8      	b.n	8003082 <ai_dict4_dot_array_f32+0xea>
 8003110:	00000000 	.word	0x00000000

08003114 <ai_dict_decompress_f32>:
 8003114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003118:	9f08      	ldr	r7, [sp, #32]
 800311a:	2b04      	cmp	r3, #4
 800311c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8003120:	d00e      	beq.n	8003140 <ai_dict_decompress_f32+0x2c>
 8003122:	2b08      	cmp	r3, #8
 8003124:	d10a      	bne.n	800313c <ai_dict_decompress_f32+0x28>
 8003126:	42b8      	cmp	r0, r7
 8003128:	d208      	bcs.n	800313c <ai_dict_decompress_f32+0x28>
 800312a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800312e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f840 3b04 	str.w	r3, [r0], #4
 8003138:	4287      	cmp	r7, r0
 800313a:	d8f6      	bhi.n	800312a <ai_dict_decompress_f32+0x16>
 800313c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003140:	9b07      	ldr	r3, [sp, #28]
 8003142:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8003146:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 800314a:	f10c 38ff 	add.w	r8, ip, #4294967295
 800314e:	f003 0e01 	and.w	lr, r3, #1
 8003152:	42b8      	cmp	r0, r7
 8003154:	d2f2      	bcs.n	800313c <ai_dict_decompress_f32+0x28>
 8003156:	f1bc 0f00 	cmp.w	ip, #0
 800315a:	d01a      	beq.n	8003192 <ai_dict_decompress_f32+0x7e>
 800315c:	f100 0508 	add.w	r5, r0, #8
 8003160:	1e4c      	subs	r4, r1, #1
 8003162:	eb01 0608 	add.w	r6, r1, r8
 8003166:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800316a:	091b      	lsrs	r3, r3, #4
 800316c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003170:	42a6      	cmp	r6, r4
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f845 3c08 	str.w	r3, [r5, #-8]
 8003178:	7823      	ldrb	r3, [r4, #0]
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003182:	f105 0508 	add.w	r5, r5, #8
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f845 3c0c 	str.w	r3, [r5, #-12]
 800318c:	d1eb      	bne.n	8003166 <ai_dict_decompress_f32+0x52>
 800318e:	4461      	add	r1, ip
 8003190:	4448      	add	r0, r9
 8003192:	f1be 0f00 	cmp.w	lr, #0
 8003196:	d103      	bne.n	80031a0 <ai_dict_decompress_f32+0x8c>
 8003198:	4287      	cmp	r7, r0
 800319a:	d8dc      	bhi.n	8003156 <ai_dict_decompress_f32+0x42>
 800319c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80031a0:	780b      	ldrb	r3, [r1, #0]
 80031a2:	091b      	lsrs	r3, r3, #4
 80031a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80031a8:	3101      	adds	r1, #1
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6003      	str	r3, [r0, #0]
 80031ae:	3004      	adds	r0, #4
 80031b0:	e7cf      	b.n	8003152 <ai_dict_decompress_f32+0x3e>
 80031b2:	bf00      	nop

080031b4 <forward_conv2d_nl_pool>:
 80031b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031b8:	ed2d 8b10 	vpush	{d8-d15}
 80031bc:	b0e1      	sub	sp, #388	; 0x184
 80031be:	6983      	ldr	r3, [r0, #24]
 80031c0:	881e      	ldrh	r6, [r3, #0]
 80031c2:	af0a      	add	r7, sp, #40	; 0x28
 80031c4:	2e00      	cmp	r6, #0
 80031c6:	f000 859b 	beq.w	8003d00 <forward_conv2d_nl_pool+0xb4c>
 80031ca:	6859      	ldr	r1, [r3, #4]
 80031cc:	684a      	ldr	r2, [r1, #4]
 80031ce:	2a00      	cmp	r2, #0
 80031d0:	f000 8593 	beq.w	8003cfa <forward_conv2d_nl_pool+0xb46>
 80031d4:	f8d2 c000 	ldr.w	ip, [r2]
 80031d8:	2e01      	cmp	r6, #1
 80031da:	f240 858b 	bls.w	8003cf4 <forward_conv2d_nl_pool+0xb40>
 80031de:	690a      	ldr	r2, [r1, #16]
 80031e0:	2a00      	cmp	r2, #0
 80031e2:	f000 8582 	beq.w	8003cea <forward_conv2d_nl_pool+0xb36>
 80031e6:	f8d2 9000 	ldr.w	r9, [r2]
 80031ea:	2e02      	cmp	r6, #2
 80031ec:	f000 8582 	beq.w	8003cf4 <forward_conv2d_nl_pool+0xb40>
 80031f0:	69cd      	ldr	r5, [r1, #28]
 80031f2:	2d00      	cmp	r5, #0
 80031f4:	f000 8571 	beq.w	8003cda <forward_conv2d_nl_pool+0xb26>
 80031f8:	682a      	ldr	r2, [r5, #0]
 80031fa:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 80031fe:	f111 0218 	adds.w	r2, r1, #24
 8003202:	d004      	beq.n	800320e <forward_conv2d_nl_pool+0x5a>
 8003204:	8b0a      	ldrh	r2, [r1, #24]
 8003206:	2a01      	cmp	r2, #1
 8003208:	f240 857c 	bls.w	8003d04 <forward_conv2d_nl_pool+0xb50>
 800320c:	686a      	ldr	r2, [r5, #4]
 800320e:	68a9      	ldr	r1, [r5, #8]
 8003210:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003212:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 8003216:	f8dc b018 	ldr.w	fp, [ip, #24]
 800321a:	f8d7 4150 	ldr.w	r4, [r7, #336]	; 0x150
 800321e:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8003222:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8003226:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800322a:	f8db 4008 	ldr.w	r4, [fp, #8]
 800322e:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003232:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8003236:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 800323a:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
 800323e:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8003242:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8003246:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800324a:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 800324e:	f8de 4004 	ldr.w	r4, [lr, #4]
 8003252:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 8003256:	f8de 400c 	ldr.w	r4, [lr, #12]
 800325a:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 800325e:	f8de 4008 	ldr.w	r4, [lr, #8]
 8003262:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 8003266:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 800326a:	6824      	ldr	r4, [r4, #0]
 800326c:	f8c7 4144 	str.w	r4, [r7, #324]	; 0x144
 8003270:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 8003274:	6864      	ldr	r4, [r4, #4]
 8003276:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800327a:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 800327e:	68a5      	ldr	r5, [r4, #8]
 8003280:	f8da 4004 	ldr.w	r4, [sl, #4]
 8003284:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 8003288:	f8da 4008 	ldr.w	r4, [sl, #8]
 800328c:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8003290:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8003292:	6824      	ldr	r4, [r4, #0]
 8003294:	f8c7 4134 	str.w	r4, [r7, #308]	; 0x134
 8003298:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800329a:	6864      	ldr	r4, [r4, #4]
 800329c:	643c      	str	r4, [r7, #64]	; 0x40
 800329e:	f8dc 4008 	ldr.w	r4, [ip, #8]
 80032a2:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 80032a6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80032a8:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 80032ac:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80032ae:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 80032b2:	69c4      	ldr	r4, [r0, #28]
 80032b4:	f8c7 4124 	str.w	r4, [r7, #292]	; 0x124
 80032b8:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80032ba:	64bc      	str	r4, [r7, #72]	; 0x48
 80032bc:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80032be:	647c      	str	r4, [r7, #68]	; 0x44
 80032c0:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80032c2:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 80032c6:	e9d0 ba0c 	ldrd	fp, sl, [r0, #48]	; 0x30
 80032ca:	2a00      	cmp	r2, #0
 80032cc:	f000 84f8 	beq.w	8003cc0 <forward_conv2d_nl_pool+0xb0c>
 80032d0:	6992      	ldr	r2, [r2, #24]
 80032d2:	6892      	ldr	r2, [r2, #8]
 80032d4:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80032d8:	4680      	mov	r8, r0
 80032da:	6a00      	ldr	r0, [r0, #32]
 80032dc:	2900      	cmp	r1, #0
 80032de:	f000 84e4 	beq.w	8003caa <forward_conv2d_nl_pool+0xaf6>
 80032e2:	698a      	ldr	r2, [r1, #24]
 80032e4:	2a00      	cmp	r2, #0
 80032e6:	f000 8533 	beq.w	8003d50 <forward_conv2d_nl_pool+0xb9c>
 80032ea:	694b      	ldr	r3, [r1, #20]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80032f2:	e9d2 0100 	ldrd	r0, r1, [r2]
 80032f6:	6893      	ldr	r3, [r2, #8]
 80032f8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80032fc:	f001 fe2e 	bl	8004f5c <ai_array_get_byte_size>
 8003300:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8003304:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8003308:	881e      	ldrh	r6, [r3, #0]
 800330a:	f8d2 c018 	ldr.w	ip, [r2, #24]
 800330e:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8003312:	f8d8 1058 	ldr.w	r1, [r8, #88]	; 0x58
 8003316:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003318:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 800331c:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8003320:	fa11 f585 	uxtah	r5, r1, r5
 8003324:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8003328:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800332c:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8003330:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8003334:	3901      	subs	r1, #1
 8003336:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 800333a:	eb05 0e00 	add.w	lr, r5, r0
 800333e:	fa1f f28a 	uxth.w	r2, sl
 8003342:	f8d7 5120 	ldr.w	r5, [r7, #288]	; 0x120
 8003346:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800334a:	f8dc 4000 	ldr.w	r4, [ip]
 800334e:	f8dc 1000 	ldr.w	r1, [ip]
 8003352:	3a01      	subs	r2, #1
 8003354:	fb00 5002 	mla	r0, r0, r2, r5
 8003358:	fa1f f28b 	uxth.w	r2, fp
 800335c:	f3c4 14c6 	ubfx	r4, r4, #7, #7
 8003360:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8003364:	f3c1 5141 	ubfx	r1, r1, #21, #2
 8003368:	1e50      	subs	r0, r2, #1
 800336a:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 800336e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8003372:	fa44 f101 	asr.w	r1, r4, r1
 8003376:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 800337a:	f8dc 4000 	ldr.w	r4, [ip]
 800337e:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003382:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003386:	f3c4 4543 	ubfx	r5, r4, #17, #4
 800338a:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 800338e:	ebae 0202 	sub.w	r2, lr, r2
 8003392:	fa1f fe81 	uxth.w	lr, r1
 8003396:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800339a:	fbb2 f2f1 	udiv	r2, r2, r1
 800339e:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 80033a2:	3c01      	subs	r4, #1
 80033a4:	fb04 1100 	mla	r1, r4, r0, r1
 80033a8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80033ac:	1c51      	adds	r1, r2, #1
 80033ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80033b2:	487c      	ldr	r0, [pc, #496]	; (80035a4 <forward_conv2d_nl_pool+0x3f0>)
 80033b4:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 80033b8:	4611      	mov	r1, r2
 80033ba:	2a00      	cmp	r2, #0
 80033bc:	bf08      	it	eq
 80033be:	4601      	moveq	r1, r0
 80033c0:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 80033c4:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80033c8:	2d04      	cmp	r5, #4
 80033ca:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80033ce:	f000 849e 	beq.w	8003d0e <forward_conv2d_nl_pool+0xb5a>
 80033d2:	2d08      	cmp	r5, #8
 80033d4:	f000 849b 	beq.w	8003d0e <forward_conv2d_nl_pool+0xb5a>
 80033d8:	f8d9 2018 	ldr.w	r2, [r9, #24]
 80033dc:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 80033e0:	2e03      	cmp	r6, #3
 80033e2:	f9b7 2134 	ldrsh.w	r2, [r7, #308]	; 0x134
 80033e6:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 80033ea:	f240 8483 	bls.w	8003cf4 <forward_conv2d_nl_pool+0xb40>
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 8489 	beq.w	8003d0a <forward_conv2d_nl_pool+0xb56>
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80033fe:	68da      	ldr	r2, [r3, #12]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8003406:	6899      	ldr	r1, [r3, #8]
 8003408:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 800340c:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8003410:	6896      	ldr	r6, [r2, #8]
 8003412:	f8c7 6144 	str.w	r6, [r7, #324]	; 0x144
 8003416:	4249      	negs	r1, r1
 8003418:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 800341c:	2800      	cmp	r0, #0
 800341e:	f000 82dd 	beq.w	80039dc <forward_conv2d_nl_pool+0x828>
 8003422:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003426:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800342a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800342e:	f8d7 50bc 	ldr.w	r5, [r7, #188]	; 0xbc
 8003432:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 80035a8 <forward_conv2d_nl_pool+0x3f4>
 8003436:	fb03 f200 	mul.w	r2, r3, r0
 800343a:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800343e:	008c      	lsls	r4, r1, #2
 8003440:	fb04 f000 	mul.w	r0, r4, r0
 8003444:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 8003448:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800344c:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 8003450:	fb01 fc02 	mul.w	ip, r1, r2
 8003454:	00a2      	lsls	r2, r4, #2
 8003456:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 800345a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800345e:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
 8003462:	00ab      	lsls	r3, r5, #2
 8003464:	4694      	mov	ip, r2
 8003466:	fb0c f204 	mul.w	r2, ip, r4
 800346a:	fb04 f303 	mul.w	r3, r4, r3
 800346e:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8003472:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8003476:	00a4      	lsls	r4, r4, #2
 8003478:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800347c:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 8003480:	f04f 0c00 	mov.w	ip, #0
 8003484:	fa0f f58b 	sxth.w	r5, fp
 8003488:	f8c7 c0e0 	str.w	ip, [r7, #224]	; 0xe0
 800348c:	46a4      	mov	ip, r4
 800348e:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
 8003492:	f8c7 50e8 	str.w	r5, [r7, #232]	; 0xe8
 8003496:	fa0f f58a 	sxth.w	r5, sl
 800349a:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
 800349e:	fb0c fc04 	mul.w	ip, ip, r4
 80034a2:	f8c7 c034 	str.w	ip, [r7, #52]	; 0x34
 80034a6:	fb06 fc03 	mul.w	ip, r6, r3
 80034aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80034ae:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 80034b2:	4240      	negs	r0, r0
 80034b4:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 80034b8:	469c      	mov	ip, r3
 80034ba:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 80034be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80034c2:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 80034c6:	f8b7 5130 	ldrh.w	r5, [r7, #304]	; 0x130
 80034ca:	f8c7 50ec 	str.w	r5, [r7, #236]	; 0xec
 80034ce:	fb00 f303 	mul.w	r3, r0, r3
 80034d2:	460d      	mov	r5, r1
 80034d4:	fb0c fc04 	mul.w	ip, ip, r4
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
 80034da:	fb04 f305 	mul.w	r3, r4, r5
 80034de:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 80034e2:	f8d7 50ec 	ldr.w	r5, [r7, #236]	; 0xec
 80034e6:	623b      	str	r3, [r7, #32]
 80034e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034ec:	46a6      	mov	lr, r4
 80034ee:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 80034f2:	fb05 f503 	mul.w	r5, r5, r3
 80034f6:	667d      	str	r5, [r7, #100]	; 0x64
 80034f8:	4625      	mov	r5, r4
 80034fa:	fb05 f503 	mul.w	r5, r5, r3
 80034fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003502:	66bd      	str	r5, [r7, #104]	; 0x68
 8003504:	fb00 f101 	mul.w	r1, r0, r1
 8003508:	fb03 f306 	mul.w	r3, r3, r6
 800350c:	657b      	str	r3, [r7, #84]	; 0x54
 800350e:	008b      	lsls	r3, r1, #2
 8003510:	633b      	str	r3, [r7, #48]	; 0x30
 8003512:	0093      	lsls	r3, r2, #2
 8003514:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003516:	0083      	lsls	r3, r0, #2
 8003518:	61bb      	str	r3, [r7, #24]
 800351a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800351e:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8003522:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003526:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800352a:	2400      	movs	r4, #0
 800352c:	63bb      	str	r3, [r7, #56]	; 0x38
 800352e:	4603      	mov	r3, r0
 8003530:	fb03 f301 	mul.w	r3, r3, r1
 8003534:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
 8003538:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 800353c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003540:	00d1      	lsls	r1, r2, #3
 8003542:	0113      	lsls	r3, r2, #4
 8003544:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8003548:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800354c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003550:	fb00 f004 	mul.w	r0, r0, r4
 8003554:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8003558:	66f8      	str	r0, [r7, #108]	; 0x6c
 800355a:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800355e:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8003562:	469a      	mov	sl, r3
 8003564:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003568:	2b00      	cmp	r3, #0
 800356a:	f340 81d0 	ble.w	800390e <forward_conv2d_nl_pool+0x75a>
 800356e:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8003572:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003576:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800357a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800357e:	2900      	cmp	r1, #0
 8003580:	441a      	add	r2, r3
 8003582:	bfb4      	ite	lt
 8003584:	2100      	movlt	r1, #0
 8003586:	2300      	movge	r3, #0
 8003588:	4282      	cmp	r2, r0
 800358a:	bf28      	it	cs
 800358c:	4602      	movcs	r2, r0
 800358e:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8003592:	2801      	cmp	r0, #1
 8003594:	f000 83f6 	beq.w	8003d84 <forward_conv2d_nl_pool+0xbd0>
 8003598:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800359c:	4281      	cmp	r1, r0
 800359e:	f000 822a 	beq.w	80039f6 <forward_conv2d_nl_pool+0x842>
 80035a2:	e003      	b.n	80035ac <forward_conv2d_nl_pool+0x3f8>
 80035a4:	08002df9 	.word	0x08002df9
 80035a8:	00000000 	.word	0x00000000
 80035ac:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80035b0:	2900      	cmp	r1, #0
 80035b2:	f000 819f 	beq.w	80038f4 <forward_conv2d_nl_pool+0x740>
 80035b6:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 80035ba:	fb93 f1f0 	sdiv	r1, r3, r0
 80035be:	fb00 3111 	mls	r1, r0, r1, r3
 80035c2:	1a41      	subs	r1, r0, r1
 80035c4:	1ad2      	subs	r2, r2, r3
 80035c6:	fb91 f5f0 	sdiv	r5, r1, r0
 80035ca:	fb00 1515 	mls	r5, r0, r5, r1
 80035ce:	1b52      	subs	r2, r2, r5
 80035d0:	4601      	mov	r1, r0
 80035d2:	4402      	add	r2, r0
 80035d4:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80035d8:	f8d7 6120 	ldr.w	r6, [r7, #288]	; 0x120
 80035dc:	4604      	mov	r4, r0
 80035de:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80035e2:	fbb4 f4f0 	udiv	r4, r4, r0
 80035e6:	6a38      	ldr	r0, [r7, #32]
 80035e8:	3a01      	subs	r2, #1
 80035ea:	fb92 f8f1 	sdiv	r8, r2, r1
 80035ee:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80035f2:	eba0 0c04 	sub.w	ip, r0, r4
 80035f6:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 80035fa:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80035fe:	4614      	mov	r4, r2
 8003600:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003604:	fbb4 f2f2 	udiv	r2, r4, r2
 8003608:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800360c:	663a      	str	r2, [r7, #96]	; 0x60
 800360e:	441d      	add	r5, r3
 8003610:	fb0e f000 	mul.w	r0, lr, r0
 8003614:	440b      	add	r3, r1
 8003616:	eba6 0608 	sub.w	r6, r6, r8
 800361a:	fb04 f505 	mul.w	r5, r4, r5
 800361e:	3b01      	subs	r3, #1
 8003620:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 8003624:	fb93 f3f4 	sdiv	r3, r3, r4
 8003628:	fb00 f406 	mul.w	r4, r0, r6
 800362c:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8003630:	677d      	str	r5, [r7, #116]	; 0x74
 8003632:	0091      	lsls	r1, r2, #2
 8003634:	fb00 f003 	mul.w	r0, r0, r3
 8003638:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 800363c:	65f8      	str	r0, [r7, #92]	; 0x5c
 800363e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003642:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8003646:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 800364a:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 800364e:	1ac3      	subs	r3, r0, r3
 8003650:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 8003654:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003658:	008b      	lsls	r3, r1, #2
 800365a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800365c:	00d3      	lsls	r3, r2, #3
 800365e:	61fb      	str	r3, [r7, #28]
 8003660:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003664:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003668:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800366c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003670:	2300      	movs	r3, #0
 8003672:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 8003676:	ea4f 098c 	mov.w	r9, ip, lsl #2
 800367a:	67bb      	str	r3, [r7, #120]	; 0x78
 800367c:	46c2      	mov	sl, r8
 800367e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003682:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003686:	eb03 0c02 	add.w	ip, r3, r2
 800368a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800368e:	2b00      	cmp	r3, #0
 8003690:	f2c0 811c 	blt.w	80038cc <forward_conv2d_nl_pool+0x718>
 8003694:	2000      	movs	r0, #0
 8003696:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8003698:	f8d7 80e8 	ldr.w	r8, [r7, #232]	; 0xe8
 800369c:	4605      	mov	r5, r0
 800369e:	4606      	mov	r6, r0
 80036a0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80036a4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80036a8:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80036ac:	4413      	add	r3, r2
 80036ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80036b2:	440a      	add	r2, r1
 80036b4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80036b8:	428b      	cmp	r3, r1
 80036ba:	bf94      	ite	ls
 80036bc:	ebc6 0303 	rsbls	r3, r6, r3
 80036c0:	ebc6 0301 	rsbhi	r3, r6, r1
 80036c4:	4415      	add	r5, r2
 80036c6:	1a1b      	subs	r3, r3, r0
 80036c8:	00a4      	lsls	r4, r4, #2
 80036ca:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80036ce:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 80036d2:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 80036d6:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 80036d8:	4602      	mov	r2, r0
 80036da:	2800      	cmp	r0, #0
 80036dc:	bf08      	it	eq
 80036de:	4662      	moveq	r2, ip
 80036e0:	f108 31ff 	add.w	r1, r8, #4294967295
 80036e4:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80036e8:	fb91 f1f0 	sdiv	r1, r1, r0
 80036ec:	4429      	add	r1, r5
 80036ee:	f8d7 5128 	ldr.w	r5, [r7, #296]	; 0x128
 80036f2:	fb0e 5501 	mla	r5, lr, r1, r5
 80036f6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80036fa:	4403      	add	r3, r0
 80036fc:	fb01 6104 	mla	r1, r1, r4, r6
 8003700:	3b01      	subs	r3, #1
 8003702:	fb93 f6f0 	sdiv	r6, r3, r0
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 800370c:	fb06 3110 	mls	r1, r6, r0, r3
 8003710:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003714:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8003718:	4562      	cmp	r2, ip
 800371a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800371e:	bf08      	it	eq
 8003720:	eeb0 6a48 	vmoveq.f32	s12, s16
 8003724:	1b9b      	subs	r3, r3, r6
 8003726:	2800      	cmp	r0, #0
 8003728:	d070      	beq.n	800380c <forward_conv2d_nl_pool+0x658>
 800372a:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800372e:	fb0e f803 	mul.w	r8, lr, r3
 8003732:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003734:	fb00 fb01 	mul.w	fp, r0, r1
 8003738:	2b00      	cmp	r3, #0
 800373a:	d067      	beq.n	800380c <forward_conv2d_nl_pool+0x658>
 800373c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003740:	18d3      	adds	r3, r2, r3
 8003742:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003746:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800374a:	1a9b      	subs	r3, r3, r2
 800374c:	62bb      	str	r3, [r7, #40]	; 0x28
 800374e:	2300      	movs	r3, #0
 8003750:	673b      	str	r3, [r7, #112]	; 0x70
 8003752:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8003756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003758:	4413      	add	r3, r2
 800375a:	65bb      	str	r3, [r7, #88]	; 0x58
 800375c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003762:	4413      	add	r3, r2
 8003764:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003768:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800376c:	ecf3 7a01 	vldmia	r3!, {s15}
 8003770:	f1ba 0f00 	cmp.w	sl, #0
 8003774:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003778:	ee67 7a86 	vmul.f32	s15, s15, s12
 800377c:	f340 80a4 	ble.w	80038c8 <forward_conv2d_nl_pool+0x714>
 8003780:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8003784:	f04f 0c00 	mov.w	ip, #0
 8003788:	2e00      	cmp	r6, #0
 800378a:	dd19      	ble.n	80037c0 <forward_conv2d_nl_pool+0x60c>
 800378c:	2100      	movs	r1, #0
 800378e:	eb00 040e 	add.w	r4, r0, lr
 8003792:	4284      	cmp	r4, r0
 8003794:	d910      	bls.n	80037b8 <forward_conv2d_nl_pool+0x604>
 8003796:	4603      	mov	r3, r0
 8003798:	462a      	mov	r2, r5
 800379a:	ecb3 7a01 	vldmia	r3!, {s14}
 800379e:	ecf2 6a01 	vldmia	r2!, {s13}
 80037a2:	429c      	cmp	r4, r3
 80037a4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80037a8:	d8f7      	bhi.n	800379a <forward_conv2d_nl_pool+0x5e6>
 80037aa:	43c3      	mvns	r3, r0
 80037ac:	441c      	add	r4, r3
 80037ae:	f024 0403 	bic.w	r4, r4, #3
 80037b2:	3404      	adds	r4, #4
 80037b4:	4425      	add	r5, r4
 80037b6:	4420      	add	r0, r4
 80037b8:	3101      	adds	r1, #1
 80037ba:	428e      	cmp	r6, r1
 80037bc:	4448      	add	r0, r9
 80037be:	d1e6      	bne.n	800378e <forward_conv2d_nl_pool+0x5da>
 80037c0:	f10c 0c01 	add.w	ip, ip, #1
 80037c4:	45e2      	cmp	sl, ip
 80037c6:	4458      	add	r0, fp
 80037c8:	4445      	add	r5, r8
 80037ca:	d1dd      	bne.n	8003788 <forward_conv2d_nl_pool+0x5d4>
 80037cc:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80037d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037d4:	441d      	add	r5, r3
 80037d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80037da:	ece3 7a01 	vstmia	r3!, {s15}
 80037de:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80037e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d1be      	bne.n	8003768 <forward_conv2d_nl_pool+0x5b4>
 80037ea:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80037ee:	69f9      	ldr	r1, [r7, #28]
 80037f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037f2:	4472      	add	r2, lr
 80037f4:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80037f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037fa:	1a52      	subs	r2, r2, r1
 80037fc:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8003800:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003804:	3301      	adds	r3, #1
 8003806:	429a      	cmp	r2, r3
 8003808:	673b      	str	r3, [r7, #112]	; 0x70
 800380a:	d1a2      	bne.n	8003752 <forward_conv2d_nl_pool+0x59e>
 800380c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8003810:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003814:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003816:	4608      	mov	r0, r1
 8003818:	4410      	add	r0, r2
 800381a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800381e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8003822:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8003826:	4401      	add	r1, r0
 8003828:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 800382c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003830:	1a8a      	subs	r2, r1, r2
 8003832:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8003836:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800383a:	3301      	adds	r3, #1
 800383c:	429a      	cmp	r2, r3
 800383e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003840:	f47f af1d 	bne.w	800367e <forward_conv2d_nl_pool+0x4ca>
 8003844:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003848:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800384c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	2a00      	cmp	r2, #0
 8003854:	f000 8210 	beq.w	8003c78 <forward_conv2d_nl_pool+0xac4>
 8003858:	2400      	movs	r4, #0
 800385a:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
 800385e:	f8d7 614c 	ldr.w	r6, [r7, #332]	; 0x14c
 8003862:	f8d7 8134 	ldr.w	r8, [r7, #308]	; 0x134
 8003866:	f8d7 9108 	ldr.w	r9, [r7, #264]	; 0x108
 800386a:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 800386e:	609e      	str	r6, [r3, #8]
 8003870:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8003874:	f8d7 40c8 	ldr.w	r4, [r7, #200]	; 0xc8
 8003878:	462b      	mov	r3, r5
 800387a:	4641      	mov	r1, r8
 800387c:	4640      	mov	r0, r8
 800387e:	47a0      	blx	r4
 8003880:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8003884:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8003888:	6859      	ldr	r1, [r3, #4]
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 8003890:	4405      	add	r5, r0
 8003892:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8003896:	0089      	lsls	r1, r1, #2
 8003898:	4406      	add	r6, r0
 800389a:	eba5 0c09 	sub.w	ip, r5, r9
 800389e:	1850      	adds	r0, r2, r1
 80038a0:	45a4      	cmp	ip, r4
 80038a2:	bfa8      	it	ge
 80038a4:	464d      	movge	r5, r9
 80038a6:	4286      	cmp	r6, r0
 80038a8:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 80038ac:	bf28      	it	cs
 80038ae:	1a76      	subcs	r6, r6, r1
 80038b0:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80038b4:	3001      	adds	r0, #1
 80038b6:	4281      	cmp	r1, r0
 80038b8:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
 80038bc:	d1d7      	bne.n	800386e <forward_conv2d_nl_pool+0x6ba>
 80038be:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
 80038c2:	f8c7 614c 	str.w	r6, [r7, #332]	; 0x14c
 80038c6:	e019      	b.n	80038fc <forward_conv2d_nl_pool+0x748>
 80038c8:	461a      	mov	r2, r3
 80038ca:	e781      	b.n	80037d0 <forward_conv2d_nl_pool+0x61c>
 80038cc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80038d0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80038d4:	fb90 f3f2 	sdiv	r3, r0, r2
 80038d8:	fb02 0313 	mls	r3, r2, r3, r0
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	4605      	mov	r5, r0
 80038e0:	fb93 f0f2 	sdiv	r0, r3, r2
 80038e4:	fb02 3010 	mls	r0, r2, r0, r3
 80038e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038ea:	462e      	mov	r6, r5
 80038ec:	18c4      	adds	r4, r0, r3
 80038ee:	eb02 0805 	add.w	r8, r2, r5
 80038f2:	e6d5      	b.n	80036a0 <forward_conv2d_nl_pool+0x4ec>
 80038f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	609a      	str	r2, [r3, #8]
 80038fe:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003902:	3301      	adds	r3, #1
 8003904:	b21b      	sxth	r3, r3
 8003906:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800390a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800390e:	3b01      	subs	r3, #1
 8003910:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003914:	f100 83bf 	bmi.w	8004096 <forward_conv2d_nl_pool+0xee2>
 8003918:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800391c:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 8003920:	42a3      	cmp	r3, r4
 8003922:	f200 839d 	bhi.w	8004060 <forward_conv2d_nl_pool+0xeac>
 8003926:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800392a:	b29b      	uxth	r3, r3
 800392c:	6990      	ldr	r0, [r2, #24]
 800392e:	9301      	str	r3, [sp, #4]
 8003930:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003934:	f8d7 80bc 	ldr.w	r8, [r7, #188]	; 0xbc
 8003938:	f8b7 5094 	ldrh.w	r5, [r7, #148]	; 0x94
 800393c:	1a9b      	subs	r3, r3, r2
 800393e:	fa1f f188 	uxth.w	r1, r8
 8003942:	b29a      	uxth	r2, r3
 8003944:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003948:	9308      	str	r3, [sp, #32]
 800394a:	9105      	str	r1, [sp, #20]
 800394c:	2601      	movs	r6, #1
 800394e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003952:	9607      	str	r6, [sp, #28]
 8003954:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
 8003958:	9506      	str	r5, [sp, #24]
 800395a:	f8b7 5040 	ldrh.w	r5, [r7, #64]	; 0x40
 800395e:	9304      	str	r3, [sp, #16]
 8003960:	1a64      	subs	r4, r4, r1
 8003962:	b2b1      	uxth	r1, r6
 8003964:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	e9cd 5102 	strd	r5, r1, [sp, #8]
 800396e:	b224      	sxth	r4, r4
 8003970:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8003974:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 8003978:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800397c:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 800397e:	47a0      	blx	r4
 8003980:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8003984:	f8d7 511c 	ldr.w	r5, [r7, #284]	; 0x11c
 8003988:	688a      	ldr	r2, [r1, #8]
 800398a:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800398c:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8003990:	fa0f f388 	sxth.w	r3, r8
 8003994:	1af3      	subs	r3, r6, r3
 8003996:	4422      	add	r2, r4
 8003998:	462e      	mov	r6, r5
 800399a:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 800399e:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 80039a2:	608a      	str	r2, [r1, #8]
 80039a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80039a8:	4426      	add	r6, r4
 80039aa:	b21b      	sxth	r3, r3
 80039ac:	1b2c      	subs	r4, r5, r4
 80039ae:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 80039b2:	6efd      	ldr	r5, [r7, #108]	; 0x6c
 80039b4:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 80039b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80039bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80039c0:	f8c7 611c 	str.w	r6, [r7, #284]	; 0x11c
 80039c4:	3001      	adds	r0, #1
 80039c6:	442c      	add	r4, r5
 80039c8:	4283      	cmp	r3, r0
 80039ca:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
 80039ce:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
 80039d2:	f63f adc7 	bhi.w	8003564 <forward_conv2d_nl_pool+0x3b0>
 80039d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	609a      	str	r2, [r3, #8]
 80039e0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80039e4:	68d3      	ldr	r3, [r2, #12]
 80039e6:	6093      	str	r3, [r2, #8]
 80039e8:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 80039ec:	46bd      	mov	sp, r7
 80039ee:	ecbd 8b10 	vpop	{d8-d15}
 80039f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039f6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80039f8:	2901      	cmp	r1, #1
 80039fa:	f47f add7 	bne.w	80035ac <forward_conv2d_nl_pool+0x3f8>
 80039fe:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003a02:	2900      	cmp	r1, #0
 8003a04:	f43f af76 	beq.w	80038f4 <forward_conv2d_nl_pool+0x740>
 8003a08:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8003a0c:	f8d7 6154 	ldr.w	r6, [r7, #340]	; 0x154
 8003a10:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8003a14:	1ad2      	subs	r2, r2, r3
 8003a16:	1a8c      	subs	r4, r1, r2
 8003a18:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8003a1c:	00b2      	lsls	r2, r6, #2
 8003a1e:	fb02 f204 	mul.w	r2, r2, r4
 8003a22:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8003a26:	fbb1 f1f0 	udiv	r1, r1, r0
 8003a2a:	ebc1 7081 	rsb	r0, r1, r1, lsl #30
 8003a2e:	460d      	mov	r5, r1
 8003a30:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003a32:	62ba      	str	r2, [r7, #40]	; 0x28
 8003a34:	ebc1 7141 	rsb	r1, r1, r1, lsl #29
 8003a38:	0082      	lsls	r2, r0, #2
 8003a3a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a3c:	00ca      	lsls	r2, r1, #3
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	00aa      	lsls	r2, r5, #2
 8003a42:	60ba      	str	r2, [r7, #8]
 8003a44:	fb03 f206 	mul.w	r2, r3, r6
 8003a48:	67ba      	str	r2, [r7, #120]	; 0x78
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	fb02 f303 	mul.w	r3, r2, r3
 8003a50:	617b      	str	r3, [r7, #20]
 8003a52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a5e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003a62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a66:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f2c0 8112 	blt.w	8003c9e <forward_conv2d_nl_pool+0xaea>
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a7e:	460a      	mov	r2, r1
 8003a80:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8003a84:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8003a88:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 8003a8c:	4420      	add	r0, r4
 8003a8e:	4408      	add	r0, r1
 8003a90:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8003a94:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8003a98:	190c      	adds	r4, r1, r4
 8003a9a:	42ac      	cmp	r4, r5
 8003a9c:	bf28      	it	cs
 8003a9e:	462c      	movcs	r4, r5
 8003aa0:	f8d7 512c 	ldr.w	r5, [r7, #300]	; 0x12c
 8003aa4:	0080      	lsls	r0, r0, #2
 8003aa6:	1aa4      	subs	r4, r4, r2
 8003aa8:	2d00      	cmp	r5, #0
 8003aaa:	f000 80e9 	beq.w	8003c80 <forward_conv2d_nl_pool+0xacc>
 8003aae:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003ab2:	f8d7 6150 	ldr.w	r6, [r7, #336]	; 0x150
 8003ab6:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8003aba:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003abe:	42b5      	cmp	r5, r6
 8003ac0:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8003ac4:	eba3 0204 	sub.w	r2, r3, r4
 8003ac8:	eba1 0104 	sub.w	r1, r1, r4
 8003acc:	bf08      	it	eq
 8003ace:	eef0 3a48 	vmoveq.f32	s7, s16
 8003ad2:	462b      	mov	r3, r5
 8003ad4:	697d      	ldr	r5, [r7, #20]
 8003ad6:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 8003ada:	4428      	add	r0, r5
 8003adc:	f8d7 513c 	ldr.w	r5, [r7, #316]	; 0x13c
 8003ae0:	fb05 6e00 	mla	lr, r5, r0, r6
 8003ae4:	eb0e 000b 	add.w	r0, lr, fp
 8003ae8:	4586      	cmp	lr, r0
 8003aea:	61f8      	str	r0, [r7, #28]
 8003aec:	f080 80a5 	bcs.w	8003c3a <forward_conv2d_nl_pool+0xa86>
 8003af0:	0092      	lsls	r2, r2, #2
 8003af2:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8003af6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003af8:	fb01 f10b 	mul.w	r1, r1, fp
 8003afc:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8003b00:	f024 0803 	bic.w	r8, r4, #3
 8003b04:	2a00      	cmp	r2, #0
 8003b06:	f000 8098 	beq.w	8003c3a <forward_conv2d_nl_pool+0xa86>
 8003b0a:	f108 32ff 	add.w	r2, r8, #4294967295
 8003b0e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003b10:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8003b14:	0892      	lsrs	r2, r2, #2
 8003b16:	3201      	adds	r2, #1
 8003b18:	4401      	add	r1, r0
 8003b1a:	fb02 f00a 	mul.w	r0, r2, sl
 8003b1e:	6638      	str	r0, [r7, #96]	; 0x60
 8003b20:	0110      	lsls	r0, r2, #4
 8003b22:	0092      	lsls	r2, r2, #2
 8003b24:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003b26:	1aca      	subs	r2, r1, r3
 8003b28:	613a      	str	r2, [r7, #16]
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	6738      	str	r0, [r7, #112]	; 0x70
 8003b2e:	4413      	add	r3, r2
 8003b30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b34:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b3a:	4413      	add	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]
 8003b3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	4413      	add	r3, r2
 8003b46:	677b      	str	r3, [r7, #116]	; 0x74
 8003b48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003b4c:	ecf3 6a01 	vldmia	r3!, {s13}
 8003b50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b54:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8003b5e:	dd57      	ble.n	8003c10 <forward_conv2d_nl_pool+0xa5c>
 8003b60:	4676      	mov	r6, lr
 8003b62:	f04f 0c00 	mov.w	ip, #0
 8003b66:	f1b8 0f00 	cmp.w	r8, #0
 8003b6a:	f340 8087 	ble.w	8003c7c <forward_conv2d_nl_pool+0xac8>
 8003b6e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8003b72:	f109 0310 	add.w	r3, r9, #16
 8003b76:	18b1      	adds	r1, r6, r2
 8003b78:	2000      	movs	r0, #0
 8003b7a:	4632      	mov	r2, r6
 8003b7c:	eb02 050b 	add.w	r5, r2, fp
 8003b80:	ed95 7a00 	vldr	s14, [r5]
 8003b84:	ed53 7a03 	vldr	s15, [r3, #-12]
 8003b88:	ed92 4a00 	vldr	s8, [r2]
 8003b8c:	ed53 4a04 	vldr	s9, [r3, #-16]
 8003b90:	ed91 5a00 	vldr	s10, [r1]
 8003b94:	ed53 5a02 	vldr	s11, [r3, #-8]
 8003b98:	ed13 6a01 	vldr	s12, [r3, #-4]
 8003b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba0:	eb01 050b 	add.w	r5, r1, fp
 8003ba4:	eee4 7a24 	vfma.f32	s15, s8, s9
 8003ba8:	3004      	adds	r0, #4
 8003baa:	4540      	cmp	r0, r8
 8003bac:	ed95 7a00 	vldr	s14, [r5]
 8003bb0:	eee5 7a25 	vfma.f32	s15, s10, s11
 8003bb4:	4452      	add	r2, sl
 8003bb6:	4451      	add	r1, sl
 8003bb8:	f103 0310 	add.w	r3, r3, #16
 8003bbc:	eee7 7a06 	vfma.f32	s15, s14, s12
 8003bc0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003bc4:	dbda      	blt.n	8003b7c <forward_conv2d_nl_pool+0x9c8>
 8003bc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bc8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003bca:	441e      	add	r6, r3
 8003bcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bce:	4499      	add	r9, r3
 8003bd0:	42a0      	cmp	r0, r4
 8003bd2:	da11      	bge.n	8003bf8 <forward_conv2d_nl_pool+0xa44>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	4633      	mov	r3, r6
 8003bd8:	4649      	mov	r1, r9
 8003bda:	edd3 7a00 	vldr	s15, [r3]
 8003bde:	ecb1 7a01 	vldmia	r1!, {s14}
 8003be2:	3201      	adds	r2, #1
 8003be4:	42a2      	cmp	r2, r4
 8003be6:	eee7 6a27 	vfma.f32	s13, s14, s15
 8003bea:	445b      	add	r3, fp
 8003bec:	d1f5      	bne.n	8003bda <forward_conv2d_nl_pool+0xa26>
 8003bee:	1a20      	subs	r0, r4, r0
 8003bf0:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 8003bf4:	fb00 660b 	mla	r6, r0, fp, r6
 8003bf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bfc:	441e      	add	r6, r3
 8003bfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c02:	4499      	add	r9, r3
 8003c04:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003c08:	f10c 0c01 	add.w	ip, ip, #1
 8003c0c:	4563      	cmp	r3, ip
 8003c0e:	d1aa      	bne.n	8003b66 <forward_conv2d_nl_pool+0x9b2>
 8003c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c12:	4499      	add	r9, r3
 8003c14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c16:	ece3 6a01 	vstmia	r3!, {s13}
 8003c1a:	677b      	str	r3, [r7, #116]	; 0x74
 8003c1c:	e9d7 2333 	ldrd	r2, r3, [r7, #204]	; 0xcc
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d191      	bne.n	8003b48 <forward_conv2d_nl_pool+0x994>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	1a9b      	subs	r3, r3, r2
 8003c2a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	f10e 0e04 	add.w	lr, lr, #4
 8003c34:	459e      	cmp	lr, r3
 8003c36:	f4ff af7d 	bcc.w	8003b34 <forward_conv2d_nl_pool+0x980>
 8003c3a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8003c3e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8003c42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c46:	440a      	add	r2, r1
 8003c48:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8003c4c:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8003c50:	4608      	mov	r0, r1
 8003c52:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003c56:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8003c5a:	4410      	add	r0, r2
 8003c5c:	1a8a      	subs	r2, r1, r2
 8003c5e:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8003c62:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003c66:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c72:	f47f aefd 	bne.w	8003a70 <forward_conv2d_nl_pool+0x8bc>
 8003c76:	e5e7      	b.n	8003848 <forward_conv2d_nl_pool+0x694>
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	e63f      	b.n	80038fc <forward_conv2d_nl_pool+0x748>
 8003c7c:	2000      	movs	r0, #0
 8003c7e:	e7a7      	b.n	8003bd0 <forward_conv2d_nl_pool+0xa1c>
 8003c80:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003c84:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8003c88:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8003c8c:	1b19      	subs	r1, r3, r4
 8003c8e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003c92:	eef0 3a48 	vmov.f32	s7, s16
 8003c96:	1b1a      	subs	r2, r3, r4
 8003c98:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003c9c:	e71a      	b.n	8003ad4 <forward_conv2d_nl_pool+0x920>
 8003c9e:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8003ca2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ca4:	460a      	mov	r2, r1
 8003ca6:	440b      	add	r3, r1
 8003ca8:	e6ea      	b.n	8003a80 <forward_conv2d_nl_pool+0x8cc>
 8003caa:	b168      	cbz	r0, 8003cc8 <forward_conv2d_nl_pool+0xb14>
 8003cac:	6882      	ldr	r2, [r0, #8]
 8003cae:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8003cb8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003cbc:	f7ff bb29 	b.w	8003312 <forward_conv2d_nl_pool+0x15e>
 8003cc0:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8003cc4:	f7ff bb08 	b.w	80032d8 <forward_conv2d_nl_pool+0x124>
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8003cce:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8003cd2:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003cd6:	f7ff bb1c 	b.w	8003312 <forward_conv2d_nl_pool+0x15e>
 8003cda:	3118      	adds	r1, #24
 8003cdc:	d008      	beq.n	8003cf0 <forward_conv2d_nl_pool+0xb3c>
 8003cde:	462a      	mov	r2, r5
 8003ce0:	f8c7 5150 	str.w	r5, [r7, #336]	; 0x150
 8003ce4:	4629      	mov	r1, r5
 8003ce6:	f7ff ba93 	b.w	8003210 <forward_conv2d_nl_pool+0x5c>
 8003cea:	4691      	mov	r9, r2
 8003cec:	f7ff ba7d 	b.w	80031ea <forward_conv2d_nl_pool+0x36>
 8003cf0:	68cb      	ldr	r3, [r1, #12]
 8003cf2:	deff      	udf	#255	; 0xff
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	deff      	udf	#255	; 0xff
 8003cfa:	4694      	mov	ip, r2
 8003cfc:	f7ff ba6c 	b.w	80031d8 <forward_conv2d_nl_pool+0x24>
 8003d00:	6873      	ldr	r3, [r6, #4]
 8003d02:	deff      	udf	#255	; 0xff
 8003d04:	2200      	movs	r2, #0
 8003d06:	f7ff ba82 	b.w	800320e <forward_conv2d_nl_pool+0x5a>
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	deff      	udf	#255	; 0xff
 8003d0e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8003d12:	2a00      	cmp	r2, #0
 8003d14:	f43f ab60 	beq.w	80033d8 <forward_conv2d_nl_pool+0x224>
 8003d18:	2e03      	cmp	r6, #3
 8003d1a:	d9eb      	bls.n	8003cf4 <forward_conv2d_nl_pool+0xb40>
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d20:	b323      	cbz	r3, 8003d6c <forward_conv2d_nl_pool+0xbb8>
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	b313      	cbz	r3, 8003d6c <forward_conv2d_nl_pool+0xbb8>
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8003d2c:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 8003d30:	9301      	str	r3, [sp, #4]
 8003d32:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8003d36:	9000      	str	r0, [sp, #0]
 8003d38:	4673      	mov	r3, lr
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	f7ff f9ea 	bl	8003114 <ai_dict_decompress_f32>
 8003d40:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8003d44:	b17c      	cbz	r4, 8003d66 <forward_conv2d_nl_pool+0xbb2>
 8003d46:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 8003d4a:	881e      	ldrh	r6, [r3, #0]
 8003d4c:	f7ff bb44 	b.w	80033d8 <forward_conv2d_nl_pool+0x224>
 8003d50:	b178      	cbz	r0, 8003d72 <forward_conv2d_nl_pool+0xbbe>
 8003d52:	6881      	ldr	r1, [r0, #8]
 8003d54:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8003d5e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003d62:	f7ff bad6 	b.w	8003312 <forward_conv2d_nl_pool+0x15e>
 8003d66:	881e      	ldrh	r6, [r3, #0]
 8003d68:	f7ff bb36 	b.w	80033d8 <forward_conv2d_nl_pool+0x224>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	deff      	udf	#255	; 0xff
 8003d72:	2201      	movs	r2, #1
 8003d74:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8003d78:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8003d7c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003d80:	f7ff bac7 	b.w	8003312 <forward_conv2d_nl_pool+0x15e>
 8003d84:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8003d86:	2801      	cmp	r0, #1
 8003d88:	f47f ac10 	bne.w	80035ac <forward_conv2d_nl_pool+0x3f8>
 8003d8c:	1ad2      	subs	r2, r2, r3
 8003d8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d90:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 8003d94:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8003d98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d9a:	fb00 4101 	mla	r1, r0, r1, r4
 8003d9e:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8003da2:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8003da6:	f080 81c4 	bcs.w	8004132 <forward_conv2d_nl_pool+0xf7e>
 8003daa:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8003dae:	2a00      	cmp	r2, #0
 8003db0:	f43f ad4a 	beq.w	8003848 <forward_conv2d_nl_pool+0x694>
 8003db4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8003db8:	fb02 f303 	mul.w	r3, r2, r3
 8003dbc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003dbe:	677b      	str	r3, [r7, #116]	; 0x74
 8003dc0:	1a9b      	subs	r3, r3, r2
 8003dc2:	663b      	str	r3, [r7, #96]	; 0x60
 8003dc4:	188b      	adds	r3, r1, r2
 8003dc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003dcc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003dd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003dd4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003dd8:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
 8003ddc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003de0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003de4:	2300      	movs	r3, #0
 8003de6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003dea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 8133 	beq.w	800405a <forward_conv2d_nl_pool+0xea6>
 8003df4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003df8:	ed93 6a00 	vldr	s12, [r3]
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e02:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 8101 	beq.w	800400e <forward_conv2d_nl_pool+0xe5a>
 8003e0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e10:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003e14:	eb03 0802 	add.w	r8, r3, r2
 8003e18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e28:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003e32:	f04f 0b00 	mov.w	fp, #0
 8003e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f2c0 8104 	blt.w	8004048 <forward_conv2d_nl_pool+0xe94>
 8003e40:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003e44:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003e46:	2300      	movs	r3, #0
 8003e48:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8003e4c:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8003e50:	eb02 0c04 	add.w	ip, r2, r4
 8003e54:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003e58:	4540      	cmp	r0, r8
 8003e5a:	bf94      	ite	ls
 8003e5c:	ebc3 0300 	rsbls	r3, r3, r0
 8003e60:	ebc3 0308 	rsbhi	r3, r3, r8
 8003e64:	eba2 0903 	sub.w	r9, r2, r3
 8003e68:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8003e6c:	1ac4      	subs	r4, r0, r3
 8003e6e:	fb03 f302 	mul.w	r3, r3, r2
 8003e72:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8003e76:	2a00      	cmp	r2, #0
 8003e78:	f340 80e3 	ble.w	8004042 <forward_conv2d_nl_pool+0xe8e>
 8003e7c:	f023 050f 	bic.w	r5, r3, #15
 8003e80:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 8003e84:	1e68      	subs	r0, r5, #1
 8003e86:	0900      	lsrs	r0, r0, #4
 8003e88:	3001      	adds	r0, #1
 8003e8a:	fb06 f204 	mul.w	r2, r6, r4
 8003e8e:	673a      	str	r2, [r7, #112]	; 0x70
 8003e90:	0102      	lsls	r2, r0, #4
 8003e92:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e94:	fb06 f909 	mul.w	r9, r6, r9
 8003e98:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8003e9c:	eef0 6a46 	vmov.f32	s13, s12
 8003ea0:	f04f 0e00 	mov.w	lr, #0
 8003ea4:	4662      	mov	r2, ip
 8003ea6:	2d00      	cmp	r5, #0
 8003ea8:	f340 80c9 	ble.w	800403e <forward_conv2d_nl_pool+0xe8a>
 8003eac:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8003eb0:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8003eb4:	2600      	movs	r6, #0
 8003eb6:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 8003eba:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 8003ebe:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 8003ec2:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 8003ec6:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 8003eca:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 8003ece:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 8003ed2:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 8003ed6:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 8003eda:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 8003ede:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 8003ee2:	ed50 aa0a 	vldr	s21, [r0, #-40]	; 0xffffffd8
 8003ee6:	ed14 aa0a 	vldr	s20, [r4, #-40]	; 0xffffffd8
 8003eea:	ed50 9a09 	vldr	s19, [r0, #-36]	; 0xffffffdc
 8003eee:	ed14 9a09 	vldr	s18, [r4, #-36]	; 0xffffffdc
 8003ef2:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 8003ef6:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 8003efa:	ed54 0a07 	vldr	s1, [r4, #-28]	; 0xffffffe4
 8003efe:	ed10 1a07 	vldr	s2, [r0, #-28]	; 0xffffffe4
 8003f02:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 8003f06:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8003f0a:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8003f0e:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 8003f12:	ed50 3a04 	vldr	s7, [r0, #-16]
 8003f16:	ed14 4a04 	vldr	s8, [r4, #-16]
 8003f1a:	ed50 4a03 	vldr	s9, [r0, #-12]
 8003f1e:	ed14 5a03 	vldr	s10, [r4, #-12]
 8003f22:	ed50 5a02 	vldr	s11, [r0, #-8]
 8003f26:	ed14 7a02 	vldr	s14, [r4, #-8]
 8003f2a:	ee67 7aaf 	vmul.f32	s15, s15, s31
 8003f2e:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 8003f32:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8003f36:	3610      	adds	r6, #16
 8003f38:	42ae      	cmp	r6, r5
 8003f3a:	ed14 fa01 	vldr	s30, [r4, #-4]
 8003f3e:	ed50 ea01 	vldr	s29, [r0, #-4]
 8003f42:	eeee 7a2f 	vfma.f32	s15, s28, s31
 8003f46:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8003f4a:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8003f4e:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8003f52:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8003f56:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8003f5a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8003f5e:	eee9 7a89 	vfma.f32	s15, s19, s18
 8003f62:	eee8 7a80 	vfma.f32	s15, s17, s0
 8003f66:	eee0 7a81 	vfma.f32	s15, s1, s2
 8003f6a:	eee1 7a82 	vfma.f32	s15, s3, s4
 8003f6e:	eee2 7a83 	vfma.f32	s15, s5, s6
 8003f72:	eee3 7a84 	vfma.f32	s15, s7, s8
 8003f76:	eee4 7a85 	vfma.f32	s15, s9, s10
 8003f7a:	eee5 7a87 	vfma.f32	s15, s11, s14
 8003f7e:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8003f82:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003f86:	db96      	blt.n	8003eb6 <forward_conv2d_nl_pool+0xd02>
 8003f88:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003f8a:	4451      	add	r1, sl
 8003f8c:	4452      	add	r2, sl
 8003f8e:	4283      	cmp	r3, r0
 8003f90:	dd0f      	ble.n	8003fb2 <forward_conv2d_nl_pool+0xdfe>
 8003f92:	4604      	mov	r4, r0
 8003f94:	468c      	mov	ip, r1
 8003f96:	4616      	mov	r6, r2
 8003f98:	ecb6 7a01 	vldmia	r6!, {s14}
 8003f9c:	ecfc 7a01 	vldmia	ip!, {s15}
 8003fa0:	3401      	adds	r4, #1
 8003fa2:	42a3      	cmp	r3, r4
 8003fa4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8003fa8:	d1f6      	bne.n	8003f98 <forward_conv2d_nl_pool+0xde4>
 8003faa:	1a18      	subs	r0, r3, r0
 8003fac:	0080      	lsls	r0, r0, #2
 8003fae:	4402      	add	r2, r0
 8003fb0:	4401      	add	r1, r0
 8003fb2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8003fb4:	4402      	add	r2, r0
 8003fb6:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8003fba:	f10e 0e01 	add.w	lr, lr, #1
 8003fbe:	4570      	cmp	r0, lr
 8003fc0:	4449      	add	r1, r9
 8003fc2:	f47f af70 	bne.w	8003ea6 <forward_conv2d_nl_pool+0xcf2>
 8003fc6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8003fca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fcc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8003fd0:	edc3 6a00 	vstr	s13, [r3]
 8003fd4:	4608      	mov	r0, r1
 8003fd6:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8003fda:	440b      	add	r3, r1
 8003fdc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003fe0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fe2:	4410      	add	r0, r2
 8003fe4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fe6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8003fea:	4608      	mov	r0, r1
 8003fec:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8003ff0:	4418      	add	r0, r3
 8003ff2:	1acb      	subs	r3, r1, r3
 8003ff4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ff8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003ffc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8004000:	f10b 0b01 	add.w	fp, fp, #1
 8004004:	455b      	cmp	r3, fp
 8004006:	eba8 0802 	sub.w	r8, r8, r2
 800400a:	f47f af14 	bne.w	8003e36 <forward_conv2d_nl_pool+0xc82>
 800400e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8004012:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004014:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004018:	440a      	add	r2, r1
 800401a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800401e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8004022:	3204      	adds	r2, #4
 8004024:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004028:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800402c:	3301      	adds	r3, #1
 800402e:	429a      	cmp	r2, r3
 8004030:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004034:	f47f aed9 	bne.w	8003dea <forward_conv2d_nl_pool+0xc36>
 8004038:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 800403c:	e404      	b.n	8003848 <forward_conv2d_nl_pool+0x694>
 800403e:	2000      	movs	r0, #0
 8004040:	e7a5      	b.n	8003f8e <forward_conv2d_nl_pool+0xdda>
 8004042:	eef0 6a46 	vmov.f32	s13, s12
 8004046:	e7be      	b.n	8003fc6 <forward_conv2d_nl_pool+0xe12>
 8004048:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800404c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8004050:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8004054:	eba8 0303 	sub.w	r3, r8, r3
 8004058:	e6f6      	b.n	8003e48 <forward_conv2d_nl_pool+0xc94>
 800405a:	eeb0 6a48 	vmov.f32	s12, s16
 800405e:	e6d0      	b.n	8003e02 <forward_conv2d_nl_pool+0xc4e>
 8004060:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004068:	4611      	mov	r1, r2
 800406a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800406e:	4419      	add	r1, r3
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004076:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800407c:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8004080:	4413      	add	r3, r2
 8004082:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004086:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800408a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800408e:	4293      	cmp	r3, r2
 8004090:	f63f aa68 	bhi.w	8003564 <forward_conv2d_nl_pool+0x3b0>
 8004094:	e49f      	b.n	80039d6 <forward_conv2d_nl_pool+0x822>
 8004096:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800409a:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 800409e:	699a      	ldr	r2, [r3, #24]
 80040a0:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 80040a4:	68d1      	ldr	r1, [r2, #12]
 80040a6:	6853      	ldr	r3, [r2, #4]
 80040a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040aa:	fb00 4012 	mls	r0, r0, r2, r4
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4281      	cmp	r1, r0
 80040b2:	bf88      	it	hi
 80040b4:	18c0      	addhi	r0, r0, r3
 80040b6:	4281      	cmp	r1, r0
 80040b8:	eb01 0203 	add.w	r2, r1, r3
 80040bc:	d216      	bcs.n	80040ec <forward_conv2d_nl_pool+0xf38>
 80040be:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	; 0xb4
 80040c2:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 80040c6:	42a1      	cmp	r1, r4
 80040c8:	d010      	beq.n	80040ec <forward_conv2d_nl_pool+0xf38>
 80040ca:	4290      	cmp	r0, r2
 80040cc:	d20e      	bcs.n	80040ec <forward_conv2d_nl_pool+0xf38>
 80040ce:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 80040d2:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 80040d6:	f850 3b04 	ldr.w	r3, [r0], #4
 80040da:	f841 3b04 	str.w	r3, [r1], #4
 80040de:	69a2      	ldr	r2, [r4, #24]
 80040e0:	6853      	ldr	r3, [r2, #4]
 80040e2:	68d2      	ldr	r2, [r2, #12]
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	441a      	add	r2, r3
 80040e8:	4282      	cmp	r2, r0
 80040ea:	d8f4      	bhi.n	80040d6 <forward_conv2d_nl_pool+0xf22>
 80040ec:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80040f0:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 80040f4:	f8b7 1140 	ldrh.w	r1, [r7, #320]	; 0x140
 80040f8:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 80040fa:	4420      	add	r0, r4
 80040fc:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8004100:	1a40      	subs	r0, r0, r1
 8004102:	4421      	add	r1, r4
 8004104:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 8004108:	442c      	add	r4, r5
 800410a:	b209      	sxth	r1, r1
 800410c:	b200      	sxth	r0, r0
 800410e:	4294      	cmp	r4, r2
 8004110:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8004114:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 8004118:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800411c:	4621      	mov	r1, r4
 800411e:	f4ff abfb 	bcc.w	8003918 <forward_conv2d_nl_pool+0x764>
 8004122:	425b      	negs	r3, r3
 8004124:	4419      	add	r1, r3
 8004126:	4291      	cmp	r1, r2
 8004128:	d2fc      	bcs.n	8004124 <forward_conv2d_nl_pool+0xf70>
 800412a:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 800412e:	f7ff bbf3 	b.w	8003918 <forward_conv2d_nl_pool+0x764>
 8004132:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004136:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 800413a:	320a      	adds	r2, #10
 800413c:	f022 0207 	bic.w	r2, r2, #7
 8004140:	ebad 0d02 	sub.w	sp, sp, r2
 8004144:	aa0a      	add	r2, sp, #40	; 0x28
 8004146:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800414a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800414e:	2a00      	cmp	r2, #0
 8004150:	f000 8153 	beq.w	80043fa <forward_conv2d_nl_pool+0x1246>
 8004154:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004158:	f8c7 b01c 	str.w	fp, [r7, #28]
 800415c:	fb02 f303 	mul.w	r3, r2, r3
 8004160:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004162:	663b      	str	r3, [r7, #96]	; 0x60
 8004164:	1a9b      	subs	r3, r3, r2
 8004166:	65bb      	str	r3, [r7, #88]	; 0x58
 8004168:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800416c:	f8c7 a014 	str.w	sl, [r7, #20]
 8004170:	4413      	add	r3, r2
 8004172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004174:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004178:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800417c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004180:	67bb      	str	r3, [r7, #120]	; 0x78
 8004182:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004186:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800418a:	2300      	movs	r3, #0
 800418c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004190:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004194:	b13b      	cbz	r3, 80041a6 <forward_conv2d_nl_pool+0xff2>
 8004196:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800419a:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800419e:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80041a2:	f000 ff27 	bl	8004ff4 <memcpy>
 80041a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 8137 	beq.w	800441e <forward_conv2d_nl_pool+0x126a>
 80041b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041b2:	ed93 6a00 	vldr	s12, [r3]
 80041b6:	3304      	adds	r3, #4
 80041b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80041ba:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f000 8101 	beq.w	80043c6 <forward_conv2d_nl_pool+0x1212>
 80041c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041c8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80041cc:	eb03 0802 	add.w	r8, r3, r2
 80041d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80041d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041e0:	677b      	str	r3, [r7, #116]	; 0x74
 80041e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80041e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80041ea:	f04f 0b00 	mov.w	fp, #0
 80041ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f2c0 810a 	blt.w	800440c <forward_conv2d_nl_pool+0x1258>
 80041f8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80041fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041fe:	2300      	movs	r3, #0
 8004200:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 8004204:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8004208:	eb02 0c04 	add.w	ip, r2, r4
 800420c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004210:	4540      	cmp	r0, r8
 8004212:	bf94      	ite	ls
 8004214:	ebc3 0300 	rsbls	r3, r3, r0
 8004218:	ebc3 0308 	rsbhi	r3, r3, r8
 800421c:	eba2 0903 	sub.w	r9, r2, r3
 8004220:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8004224:	1ac4      	subs	r4, r0, r3
 8004226:	fb03 f302 	mul.w	r3, r3, r2
 800422a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800422e:	2a00      	cmp	r2, #0
 8004230:	f340 80e9 	ble.w	8004406 <forward_conv2d_nl_pool+0x1252>
 8004234:	f023 050f 	bic.w	r5, r3, #15
 8004238:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 800423c:	1e68      	subs	r0, r5, #1
 800423e:	0900      	lsrs	r0, r0, #4
 8004240:	3001      	adds	r0, #1
 8004242:	fb06 f204 	mul.w	r2, r6, r4
 8004246:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004248:	0102      	lsls	r2, r0, #4
 800424a:	62ba      	str	r2, [r7, #40]	; 0x28
 800424c:	fb06 f909 	mul.w	r9, r6, r9
 8004250:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8004254:	eef0 6a46 	vmov.f32	s13, s12
 8004258:	f04f 0e00 	mov.w	lr, #0
 800425c:	4662      	mov	r2, ip
 800425e:	2d00      	cmp	r5, #0
 8004260:	f340 80cf 	ble.w	8004402 <forward_conv2d_nl_pool+0x124e>
 8004264:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8004268:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800426c:	2600      	movs	r6, #0
 800426e:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 8004272:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 8004276:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 800427a:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 800427e:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 8004282:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 8004286:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800428a:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 800428e:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 8004292:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 8004296:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 800429a:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 800429e:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 80042a2:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 80042a6:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 80042aa:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 80042ae:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 80042b2:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 80042b6:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 80042ba:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 80042be:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 80042c2:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 80042c6:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 80042ca:	ed50 3a04 	vldr	s7, [r0, #-16]
 80042ce:	ed14 4a04 	vldr	s8, [r4, #-16]
 80042d2:	ed54 4a03 	vldr	s9, [r4, #-12]
 80042d6:	ed10 5a03 	vldr	s10, [r0, #-12]
 80042da:	ed50 5a02 	vldr	s11, [r0, #-8]
 80042de:	ed14 7a02 	vldr	s14, [r4, #-8]
 80042e2:	ee67 7aaf 	vmul.f32	s15, s15, s31
 80042e6:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 80042ea:	eeef 7a2e 	vfma.f32	s15, s30, s29
 80042ee:	3610      	adds	r6, #16
 80042f0:	42ae      	cmp	r6, r5
 80042f2:	ed14 fa01 	vldr	s30, [r4, #-4]
 80042f6:	ed50 ea01 	vldr	s29, [r0, #-4]
 80042fa:	eeee 7a2f 	vfma.f32	s15, s28, s31
 80042fe:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8004302:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8004306:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800430a:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800430e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8004312:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8004316:	eee9 7a89 	vfma.f32	s15, s19, s18
 800431a:	eee8 7a80 	vfma.f32	s15, s17, s0
 800431e:	eee0 7a81 	vfma.f32	s15, s1, s2
 8004322:	eee1 7a82 	vfma.f32	s15, s3, s4
 8004326:	eee2 7a83 	vfma.f32	s15, s5, s6
 800432a:	eee3 7a84 	vfma.f32	s15, s7, s8
 800432e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8004332:	eee5 7a87 	vfma.f32	s15, s11, s14
 8004336:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800433a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800433e:	db96      	blt.n	800426e <forward_conv2d_nl_pool+0x10ba>
 8004340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004342:	4451      	add	r1, sl
 8004344:	4452      	add	r2, sl
 8004346:	4283      	cmp	r3, r0
 8004348:	dd0f      	ble.n	800436a <forward_conv2d_nl_pool+0x11b6>
 800434a:	4604      	mov	r4, r0
 800434c:	468c      	mov	ip, r1
 800434e:	4616      	mov	r6, r2
 8004350:	ecb6 7a01 	vldmia	r6!, {s14}
 8004354:	ecfc 7a01 	vldmia	ip!, {s15}
 8004358:	3401      	adds	r4, #1
 800435a:	42a3      	cmp	r3, r4
 800435c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004360:	d1f6      	bne.n	8004350 <forward_conv2d_nl_pool+0x119c>
 8004362:	1a18      	subs	r0, r3, r0
 8004364:	0080      	lsls	r0, r0, #2
 8004366:	4402      	add	r2, r0
 8004368:	4401      	add	r1, r0
 800436a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800436c:	4402      	add	r2, r0
 800436e:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8004372:	f10e 0e01 	add.w	lr, lr, #1
 8004376:	4570      	cmp	r0, lr
 8004378:	4449      	add	r1, r9
 800437a:	f47f af70 	bne.w	800425e <forward_conv2d_nl_pool+0x10aa>
 800437e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8004382:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004384:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004388:	edc3 6a00 	vstr	s13, [r3]
 800438c:	4608      	mov	r0, r1
 800438e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8004392:	440b      	add	r3, r1
 8004394:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004398:	677b      	str	r3, [r7, #116]	; 0x74
 800439a:	4410      	add	r0, r2
 800439c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800439e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 80043a2:	4608      	mov	r0, r1
 80043a4:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80043a8:	4418      	add	r0, r3
 80043aa:	1acb      	subs	r3, r1, r3
 80043ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043b0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80043b4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 80043b8:	f10b 0b01 	add.w	fp, fp, #1
 80043bc:	455b      	cmp	r3, fp
 80043be:	eba8 0802 	sub.w	r8, r8, r2
 80043c2:	f47f af14 	bne.w	80041ee <forward_conv2d_nl_pool+0x103a>
 80043c6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80043ca:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80043ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043d2:	440a      	add	r2, r1
 80043d4:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80043d8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80043dc:	3204      	adds	r2, #4
 80043de:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80043e2:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80043e6:	3301      	adds	r3, #1
 80043e8:	429a      	cmp	r2, r3
 80043ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80043ee:	f47f aecf 	bne.w	8004190 <forward_conv2d_nl_pool+0xfdc>
 80043f2:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 80043f6:	f8d7 a014 	ldr.w	sl, [r7, #20]
 80043fa:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 80043fe:	f7ff ba23 	b.w	8003848 <forward_conv2d_nl_pool+0x694>
 8004402:	2000      	movs	r0, #0
 8004404:	e79f      	b.n	8004346 <forward_conv2d_nl_pool+0x1192>
 8004406:	eef0 6a46 	vmov.f32	s13, s12
 800440a:	e7b8      	b.n	800437e <forward_conv2d_nl_pool+0x11ca>
 800440c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004410:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8004414:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8004418:	eba8 0303 	sub.w	r3, r8, r3
 800441c:	e6f0      	b.n	8004200 <forward_conv2d_nl_pool+0x104c>
 800441e:	eeb0 6a48 	vmov.f32	s12, s16
 8004422:	e6ca      	b.n	80041ba <forward_conv2d_nl_pool+0x1006>

08004424 <forward_dense>:
 8004424:	6983      	ldr	r3, [r0, #24]
 8004426:	881a      	ldrh	r2, [r3, #0]
 8004428:	2a00      	cmp	r2, #0
 800442a:	f000 80b5 	beq.w	8004598 <forward_dense+0x174>
 800442e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004432:	ed2d 8b10 	vpush	{d8-d15}
 8004436:	685f      	ldr	r7, [r3, #4]
 8004438:	687e      	ldr	r6, [r7, #4]
 800443a:	b091      	sub	sp, #68	; 0x44
 800443c:	b106      	cbz	r6, 8004440 <forward_dense+0x1c>
 800443e:	6836      	ldr	r6, [r6, #0]
 8004440:	2a01      	cmp	r2, #1
 8004442:	f240 80a6 	bls.w	8004592 <forward_dense+0x16e>
 8004446:	693d      	ldr	r5, [r7, #16]
 8004448:	b105      	cbz	r5, 800444c <forward_dense+0x28>
 800444a:	682d      	ldr	r5, [r5, #0]
 800444c:	2a02      	cmp	r2, #2
 800444e:	f000 80a5 	beq.w	800459c <forward_dense+0x178>
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 821b 	beq.w	8004890 <forward_dense+0x46c>
 800445a:	6819      	ldr	r1, [r3, #0]
 800445c:	9106      	str	r1, [sp, #24]
 800445e:	f117 0118 	adds.w	r1, r7, #24
 8004462:	f000 80c9 	beq.w	80045f8 <forward_dense+0x1d4>
 8004466:	8b39      	ldrh	r1, [r7, #24]
 8004468:	2901      	cmp	r1, #1
 800446a:	f240 820e 	bls.w	800488a <forward_dense+0x466>
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 80c4 	beq.w	80045fc <forward_dense+0x1d8>
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	9307      	str	r3, [sp, #28]
 8004478:	9b06      	ldr	r3, [sp, #24]
 800447a:	68ec      	ldr	r4, [r5, #12]
 800447c:	6998      	ldr	r0, [r3, #24]
 800447e:	68f1      	ldr	r1, [r6, #12]
 8004480:	6803      	ldr	r3, [r0, #0]
 8004482:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8004486:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
 800448a:	f3c3 19c6 	ubfx	r9, r3, #7, #7
 800448e:	f3c3 5141 	ubfx	r1, r3, #21, #2
 8004492:	fa49 f101 	asr.w	r1, r9, r1
 8004496:	910b      	str	r1, [sp, #44]	; 0x2c
 8004498:	2a03      	cmp	r2, #3
 800449a:	fb0e f10c 	mul.w	r1, lr, ip
 800449e:	6864      	ldr	r4, [r4, #4]
 80044a0:	9108      	str	r1, [sp, #32]
 80044a2:	f000 81de 	beq.w	8004862 <forward_dense+0x43e>
 80044a6:	6abf      	ldr	r7, [r7, #40]	; 0x28
 80044a8:	b117      	cbz	r7, 80044b0 <forward_dense+0x8c>
 80044aa:	683f      	ldr	r7, [r7, #0]
 80044ac:	b107      	cbz	r7, 80044b0 <forward_dense+0x8c>
 80044ae:	69bf      	ldr	r7, [r7, #24]
 80044b0:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	f000 81d7 	beq.w	8004868 <forward_dense+0x444>
 80044ba:	2b08      	cmp	r3, #8
 80044bc:	f000 81d4 	beq.w	8004868 <forward_dense+0x444>
 80044c0:	f04f 0a00 	mov.w	sl, #0
 80044c4:	69ab      	ldr	r3, [r5, #24]
 80044c6:	69b2      	ldr	r2, [r6, #24]
 80044c8:	6899      	ldr	r1, [r3, #8]
 80044ca:	9b06      	ldr	r3, [sp, #24]
 80044cc:	9104      	str	r1, [sp, #16]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	6897      	ldr	r7, [r2, #8]
 80044d2:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80044d6:	00a3      	lsls	r3, r4, #2
 80044d8:	9309      	str	r3, [sp, #36]	; 0x24
 80044da:	18ce      	adds	r6, r1, r3
 80044dc:	9b08      	ldr	r3, [sp, #32]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d052      	beq.n	8004588 <forward_dense+0x164>
 80044e2:	f1a8 0310 	sub.w	r3, r8, #16
 80044e6:	091b      	lsrs	r3, r3, #4
 80044e8:	3301      	adds	r3, #1
 80044ea:	019b      	lsls	r3, r3, #6
 80044ec:	930c      	str	r3, [sp, #48]	; 0x30
 80044ee:	ea4f 0388 	mov.w	r3, r8, lsl #2
 80044f2:	930a      	str	r3, [sp, #40]	; 0x28
 80044f4:	2300      	movs	r3, #0
 80044f6:	9305      	str	r3, [sp, #20]
 80044f8:	eddf aace 	vldr	s21, [pc, #824]	; 8004834 <forward_dense+0x410>
 80044fc:	f008 030f 	and.w	r3, r8, #15
 8004500:	930d      	str	r3, [sp, #52]	; 0x34
 8004502:	9b06      	ldr	r3, [sp, #24]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	689d      	ldr	r5, [r3, #8]
 8004508:	9b07      	ldr	r3, [sp, #28]
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 818f 	beq.w	800482e <forward_dense+0x40a>
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	689c      	ldr	r4, [r3, #8]
 8004514:	9b04      	ldr	r3, [sp, #16]
 8004516:	f1ba 0f00 	cmp.w	sl, #0
 800451a:	d071      	beq.n	8004600 <forward_dense+0x1dc>
 800451c:	42b3      	cmp	r3, r6
 800451e:	d229      	bcs.n	8004574 <forward_dense+0x150>
 8004520:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004522:	469b      	mov	fp, r3
 8004524:	ab0f      	add	r3, sp, #60	; 0x3c
 8004526:	9303      	str	r3, [sp, #12]
 8004528:	2a04      	cmp	r2, #4
 800452a:	4633      	mov	r3, r6
 800452c:	4646      	mov	r6, r8
 800452e:	4698      	mov	r8, r3
 8004530:	d037      	beq.n	80045a2 <forward_dense+0x17e>
 8004532:	2c00      	cmp	r4, #0
 8004534:	f000 8180 	beq.w	8004838 <forward_dense+0x414>
 8004538:	f8d4 c000 	ldr.w	ip, [r4]
 800453c:	9803      	ldr	r0, [sp, #12]
 800453e:	9600      	str	r6, [sp, #0]
 8004540:	463b      	mov	r3, r7
 8004542:	4629      	mov	r1, r5
 8004544:	4652      	mov	r2, sl
 8004546:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800454a:	f7fe fc57 	bl	8002dfc <ai_dict8_dot_array_f32>
 800454e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004550:	f84b 3b04 	str.w	r3, [fp], #4
 8004554:	45c3      	cmp	fp, r8
 8004556:	f104 0404 	add.w	r4, r4, #4
 800455a:	444d      	add	r5, r9
 800455c:	d3e9      	bcc.n	8004532 <forward_dense+0x10e>
 800455e:	4643      	mov	r3, r8
 8004560:	46b0      	mov	r8, r6
 8004562:	461e      	mov	r6, r3
 8004564:	9a04      	ldr	r2, [sp, #16]
 8004566:	43d3      	mvns	r3, r2
 8004568:	4433      	add	r3, r6
 800456a:	f023 0303 	bic.w	r3, r3, #3
 800456e:	3304      	adds	r3, #4
 8004570:	18d3      	adds	r3, r2, r3
 8004572:	9304      	str	r3, [sp, #16]
 8004574:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004576:	9b05      	ldr	r3, [sp, #20]
 8004578:	4417      	add	r7, r2
 800457a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800457c:	4416      	add	r6, r2
 800457e:	9a08      	ldr	r2, [sp, #32]
 8004580:	3301      	adds	r3, #1
 8004582:	4293      	cmp	r3, r2
 8004584:	9305      	str	r3, [sp, #20]
 8004586:	d1bc      	bne.n	8004502 <forward_dense+0xde>
 8004588:	b011      	add	sp, #68	; 0x44
 800458a:	ecbd 8b10 	vpop	{d8-d15}
 800458e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004592:	2300      	movs	r3, #0
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	deff      	udf	#255	; 0xff
 8004598:	6853      	ldr	r3, [r2, #4]
 800459a:	deff      	udf	#255	; 0xff
 800459c:	2300      	movs	r3, #0
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	deff      	udf	#255	; 0xff
 80045a2:	b1a4      	cbz	r4, 80045ce <forward_dense+0x1aa>
 80045a4:	f8d4 c000 	ldr.w	ip, [r4]
 80045a8:	9803      	ldr	r0, [sp, #12]
 80045aa:	9600      	str	r6, [sp, #0]
 80045ac:	463b      	mov	r3, r7
 80045ae:	4629      	mov	r1, r5
 80045b0:	4652      	mov	r2, sl
 80045b2:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80045b6:	f7fe fcef 	bl	8002f98 <ai_dict4_dot_array_f32>
 80045ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80045bc:	f84b 3b04 	str.w	r3, [fp], #4
 80045c0:	45c3      	cmp	fp, r8
 80045c2:	f104 0404 	add.w	r4, r4, #4
 80045c6:	444d      	add	r5, r9
 80045c8:	d2c9      	bcs.n	800455e <forward_dense+0x13a>
 80045ca:	2c00      	cmp	r4, #0
 80045cc:	d1ea      	bne.n	80045a4 <forward_dense+0x180>
 80045ce:	4634      	mov	r4, r6
 80045d0:	4646      	mov	r6, r8
 80045d2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80045d6:	9400      	str	r4, [sp, #0]
 80045d8:	463b      	mov	r3, r7
 80045da:	4629      	mov	r1, r5
 80045dc:	4652      	mov	r2, sl
 80045de:	4640      	mov	r0, r8
 80045e0:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 80045e4:	f7fe fcd8 	bl	8002f98 <ai_dict4_dot_array_f32>
 80045e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80045ea:	f84b 3b04 	str.w	r3, [fp], #4
 80045ee:	45b3      	cmp	fp, r6
 80045f0:	444d      	add	r5, r9
 80045f2:	d3f0      	bcc.n	80045d6 <forward_dense+0x1b2>
 80045f4:	46a0      	mov	r8, r4
 80045f6:	e7b5      	b.n	8004564 <forward_dense+0x140>
 80045f8:	9107      	str	r1, [sp, #28]
 80045fa:	e73d      	b.n	8004478 <forward_dense+0x54>
 80045fc:	9307      	str	r3, [sp, #28]
 80045fe:	e73b      	b.n	8004478 <forward_dense+0x54>
 8004600:	42b3      	cmp	r3, r6
 8004602:	d2b7      	bcs.n	8004574 <forward_dense+0x150>
 8004604:	4618      	mov	r0, r3
 8004606:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004608:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800460c:	eb07 0c03 	add.w	ip, r7, r3
 8004610:	469e      	mov	lr, r3
 8004612:	2c00      	cmp	r4, #0
 8004614:	f000 80ff 	beq.w	8004816 <forward_dense+0x3f2>
 8004618:	f1b8 0f0f 	cmp.w	r8, #15
 800461c:	edd4 fa00 	vldr	s31, [r4]
 8004620:	eddf 6a84 	vldr	s13, [pc, #528]	; 8004834 <forward_dense+0x410>
 8004624:	f104 0404 	add.w	r4, r4, #4
 8004628:	f240 80fd 	bls.w	8004826 <forward_dense+0x402>
 800462c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004630:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8004634:	4641      	mov	r1, r8
 8004636:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 800463a:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800463e:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 8004642:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 8004646:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 800464a:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 800464e:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8004652:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 8004656:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 800465a:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 800465e:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8004662:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8004666:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 800466a:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 800466e:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8004672:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 8004676:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 800467a:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 800467e:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8004682:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 8004686:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 800468a:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 800468e:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 8004692:	ed12 4a04 	vldr	s8, [r2, #-16]
 8004696:	ed53 4a04 	vldr	s9, [r3, #-16]
 800469a:	ed13 5a03 	vldr	s10, [r3, #-12]
 800469e:	ed52 5a03 	vldr	s11, [r2, #-12]
 80046a2:	ed13 6a02 	vldr	s12, [r3, #-8]
 80046a6:	ed12 7a02 	vldr	s14, [r2, #-8]
 80046aa:	ee67 7a8f 	vmul.f32	s15, s15, s30
 80046ae:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 80046b2:	eeee 7a8e 	vfma.f32	s15, s29, s28
 80046b6:	3910      	subs	r1, #16
 80046b8:	290f      	cmp	r1, #15
 80046ba:	ed52 ea01 	vldr	s29, [r2, #-4]
 80046be:	ed13 ea01 	vldr	s28, [r3, #-4]
 80046c2:	eeed 7a8f 	vfma.f32	s15, s27, s30
 80046c6:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80046ca:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80046ce:	eeed 7a2c 	vfma.f32	s15, s26, s25
 80046d2:	eeec 7a2b 	vfma.f32	s15, s24, s23
 80046d6:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 80046da:	eee9 7a89 	vfma.f32	s15, s19, s18
 80046de:	eee8 7a88 	vfma.f32	s15, s17, s16
 80046e2:	eee0 7a20 	vfma.f32	s15, s0, s1
 80046e6:	eee1 7a21 	vfma.f32	s15, s2, s3
 80046ea:	eee2 7a22 	vfma.f32	s15, s4, s5
 80046ee:	eee3 7a23 	vfma.f32	s15, s6, s7
 80046f2:	eee4 7a24 	vfma.f32	s15, s8, s9
 80046f6:	eee5 7a25 	vfma.f32	s15, s10, s11
 80046fa:	eee6 7a07 	vfma.f32	s15, s12, s14
 80046fe:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8004702:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004706:	d896      	bhi.n	8004636 <forward_dense+0x212>
 8004708:	eb05 010e 	add.w	r1, r5, lr
 800470c:	465b      	mov	r3, fp
 800470e:	4662      	mov	r2, ip
 8004710:	2b00      	cmp	r3, #0
 8004712:	d075      	beq.n	8004800 <forward_dense+0x3dc>
 8004714:	ed91 7a00 	vldr	s14, [r1]
 8004718:	edd2 7a00 	vldr	s15, [r2]
 800471c:	2b01      	cmp	r3, #1
 800471e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004722:	d06d      	beq.n	8004800 <forward_dense+0x3dc>
 8004724:	ed91 7a01 	vldr	s14, [r1, #4]
 8004728:	edd2 7a01 	vldr	s15, [r2, #4]
 800472c:	2b02      	cmp	r3, #2
 800472e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004732:	d065      	beq.n	8004800 <forward_dense+0x3dc>
 8004734:	ed91 7a02 	vldr	s14, [r1, #8]
 8004738:	edd2 7a02 	vldr	s15, [r2, #8]
 800473c:	2b03      	cmp	r3, #3
 800473e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004742:	d05d      	beq.n	8004800 <forward_dense+0x3dc>
 8004744:	ed91 7a03 	vldr	s14, [r1, #12]
 8004748:	edd2 7a03 	vldr	s15, [r2, #12]
 800474c:	2b04      	cmp	r3, #4
 800474e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004752:	d055      	beq.n	8004800 <forward_dense+0x3dc>
 8004754:	ed91 7a04 	vldr	s14, [r1, #16]
 8004758:	edd2 7a04 	vldr	s15, [r2, #16]
 800475c:	2b05      	cmp	r3, #5
 800475e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004762:	d04d      	beq.n	8004800 <forward_dense+0x3dc>
 8004764:	ed91 7a05 	vldr	s14, [r1, #20]
 8004768:	edd2 7a05 	vldr	s15, [r2, #20]
 800476c:	2b06      	cmp	r3, #6
 800476e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004772:	d045      	beq.n	8004800 <forward_dense+0x3dc>
 8004774:	ed91 7a06 	vldr	s14, [r1, #24]
 8004778:	edd2 7a06 	vldr	s15, [r2, #24]
 800477c:	2b07      	cmp	r3, #7
 800477e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004782:	d03d      	beq.n	8004800 <forward_dense+0x3dc>
 8004784:	ed91 7a07 	vldr	s14, [r1, #28]
 8004788:	edd2 7a07 	vldr	s15, [r2, #28]
 800478c:	2b08      	cmp	r3, #8
 800478e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004792:	d035      	beq.n	8004800 <forward_dense+0x3dc>
 8004794:	ed91 7a08 	vldr	s14, [r1, #32]
 8004798:	edd2 7a08 	vldr	s15, [r2, #32]
 800479c:	2b09      	cmp	r3, #9
 800479e:	eee7 6a27 	vfma.f32	s13, s14, s15
 80047a2:	d02d      	beq.n	8004800 <forward_dense+0x3dc>
 80047a4:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 80047a8:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 80047ac:	2b0a      	cmp	r3, #10
 80047ae:	eee7 6a27 	vfma.f32	s13, s14, s15
 80047b2:	d025      	beq.n	8004800 <forward_dense+0x3dc>
 80047b4:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 80047b8:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 80047bc:	2b0b      	cmp	r3, #11
 80047be:	eee7 6a27 	vfma.f32	s13, s14, s15
 80047c2:	d01d      	beq.n	8004800 <forward_dense+0x3dc>
 80047c4:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 80047c8:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 80047cc:	2b0c      	cmp	r3, #12
 80047ce:	eee7 6a27 	vfma.f32	s13, s14, s15
 80047d2:	d015      	beq.n	8004800 <forward_dense+0x3dc>
 80047d4:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 80047d8:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 80047dc:	2b0d      	cmp	r3, #13
 80047de:	eee7 6a27 	vfma.f32	s13, s14, s15
 80047e2:	d00d      	beq.n	8004800 <forward_dense+0x3dc>
 80047e4:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 80047e8:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80047ec:	2b0e      	cmp	r3, #14
 80047ee:	eee7 6a27 	vfma.f32	s13, s14, s15
 80047f2:	d005      	beq.n	8004800 <forward_dense+0x3dc>
 80047f4:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 80047f8:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80047fc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004800:	444d      	add	r5, r9
 8004802:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 8004806:	ece0 6a01 	vstmia	r0!, {s13}
 800480a:	42b0      	cmp	r0, r6
 800480c:	f4bf aeaa 	bcs.w	8004564 <forward_dense+0x140>
 8004810:	2c00      	cmp	r4, #0
 8004812:	f47f af01 	bne.w	8004618 <forward_dense+0x1f4>
 8004816:	f1b8 0f0f 	cmp.w	r8, #15
 800481a:	eef0 fa6a 	vmov.f32	s31, s21
 800481e:	eddf 6a05 	vldr	s13, [pc, #20]	; 8004834 <forward_dense+0x410>
 8004822:	f63f af03 	bhi.w	800462c <forward_dense+0x208>
 8004826:	4643      	mov	r3, r8
 8004828:	4629      	mov	r1, r5
 800482a:	463a      	mov	r2, r7
 800482c:	e770      	b.n	8004710 <forward_dense+0x2ec>
 800482e:	461c      	mov	r4, r3
 8004830:	e670      	b.n	8004514 <forward_dense+0xf0>
 8004832:	bf00      	nop
 8004834:	00000000 	.word	0x00000000
 8004838:	4634      	mov	r4, r6
 800483a:	4646      	mov	r6, r8
 800483c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004840:	9400      	str	r4, [sp, #0]
 8004842:	463b      	mov	r3, r7
 8004844:	4629      	mov	r1, r5
 8004846:	4652      	mov	r2, sl
 8004848:	4640      	mov	r0, r8
 800484a:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800484e:	f7fe fad5 	bl	8002dfc <ai_dict8_dot_array_f32>
 8004852:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004854:	f84b 3b04 	str.w	r3, [fp], #4
 8004858:	455e      	cmp	r6, fp
 800485a:	444d      	add	r5, r9
 800485c:	d8f0      	bhi.n	8004840 <forward_dense+0x41c>
 800485e:	46a0      	mov	r8, r4
 8004860:	e680      	b.n	8004564 <forward_dense+0x140>
 8004862:	2300      	movs	r3, #0
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	deff      	udf	#255	; 0xff
 8004868:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800486c:	2f00      	cmp	r7, #0
 800486e:	f43f ae29 	beq.w	80044c4 <forward_dense+0xa0>
 8004872:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004876:	f000 fb71 	bl	8004f5c <ai_array_get_byte_size>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4602      	mov	r2, r0
 800487e:	4651      	mov	r1, sl
 8004880:	4618      	mov	r0, r3
 8004882:	f000 fbb7 	bl	8004ff4 <memcpy>
 8004886:	4682      	mov	sl, r0
 8004888:	e61c      	b.n	80044c4 <forward_dense+0xa0>
 800488a:	2300      	movs	r3, #0
 800488c:	9307      	str	r3, [sp, #28]
 800488e:	e5f3      	b.n	8004478 <forward_dense+0x54>
 8004890:	9306      	str	r3, [sp, #24]
 8004892:	e5e4      	b.n	800445e <forward_dense+0x3a>

08004894 <nl_func_relu_array_f32>:
 8004894:	b410      	push	{r4}
 8004896:	698c      	ldr	r4, [r1, #24]
 8004898:	6981      	ldr	r1, [r0, #24]
 800489a:	68a3      	ldr	r3, [r4, #8]
 800489c:	6889      	ldr	r1, [r1, #8]
 800489e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80048a2:	3a01      	subs	r2, #1
 80048a4:	0092      	lsls	r2, r2, #2
 80048a6:	189b      	adds	r3, r3, r2
 80048a8:	d216      	bcs.n	80048d8 <nl_func_relu_array_f32+0x44>
 80048aa:	3204      	adds	r2, #4
 80048ac:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80048e0 <nl_func_relu_array_f32+0x4c>
 80048b0:	4411      	add	r1, r2
 80048b2:	3304      	adds	r3, #4
 80048b4:	ed53 7a01 	vldr	s15, [r3, #-4]
 80048b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c0:	bfb8      	it	lt
 80048c2:	eef0 7a47 	vmovlt.f32	s15, s14
 80048c6:	ed61 7a01 	vstmdb	r1!, {s15}
 80048ca:	68a0      	ldr	r0, [r4, #8]
 80048cc:	f1a3 0208 	sub.w	r2, r3, #8
 80048d0:	4290      	cmp	r0, r2
 80048d2:	f1a3 0304 	sub.w	r3, r3, #4
 80048d6:	d9ed      	bls.n	80048b4 <nl_func_relu_array_f32+0x20>
 80048d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	00000000 	.word	0x00000000

080048e4 <nl_func_relu_generic_array_f32>:
 80048e4:	b430      	push	{r4, r5}
 80048e6:	6989      	ldr	r1, [r1, #24]
 80048e8:	6980      	ldr	r0, [r0, #24]
 80048ea:	edd3 6a02 	vldr	s13, [r3, #8]
 80048ee:	688c      	ldr	r4, [r1, #8]
 80048f0:	6880      	ldr	r0, [r0, #8]
 80048f2:	ed93 7a00 	vldr	s14, [r3]
 80048f6:	ed93 6a01 	vldr	s12, [r3, #4]
 80048fa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80048fe:	3a01      	subs	r2, #1
 8004900:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8004904:	0092      	lsls	r2, r2, #2
 8004906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800490a:	4410      	add	r0, r2
 800490c:	4422      	add	r2, r4
 800490e:	d421      	bmi.n	8004954 <nl_func_relu_generic_array_f32+0x70>
 8004910:	4294      	cmp	r4, r2
 8004912:	d83d      	bhi.n	8004990 <nl_func_relu_generic_array_f32+0xac>
 8004914:	1d13      	adds	r3, r2, #4
 8004916:	1d02      	adds	r2, r0, #4
 8004918:	e010      	b.n	800493c <nl_func_relu_generic_array_f32+0x58>
 800491a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800491e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004922:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8004926:	d501      	bpl.n	800492c <nl_func_relu_generic_array_f32+0x48>
 8004928:	ee65 7a86 	vmul.f32	s15, s11, s12
 800492c:	ed62 7a01 	vstmdb	r2!, {s15}
 8004930:	6888      	ldr	r0, [r1, #8]
 8004932:	f1a3 0408 	sub.w	r4, r3, #8
 8004936:	4284      	cmp	r4, r0
 8004938:	462b      	mov	r3, r5
 800493a:	d329      	bcc.n	8004990 <nl_func_relu_generic_array_f32+0xac>
 800493c:	ed53 7a01 	vldr	s15, [r3, #-4]
 8004940:	eef4 7ae6 	vcmpe.f32	s15, s13
 8004944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004948:	f1a3 0504 	sub.w	r5, r3, #4
 800494c:	d4e5      	bmi.n	800491a <nl_func_relu_generic_array_f32+0x36>
 800494e:	eef0 7a66 	vmov.f32	s15, s13
 8004952:	e7eb      	b.n	800492c <nl_func_relu_generic_array_f32+0x48>
 8004954:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8004958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800495c:	d01a      	beq.n	8004994 <nl_func_relu_generic_array_f32+0xb0>
 800495e:	4294      	cmp	r4, r2
 8004960:	d816      	bhi.n	8004990 <nl_func_relu_generic_array_f32+0xac>
 8004962:	1d13      	adds	r3, r2, #4
 8004964:	1d02      	adds	r2, r0, #4
 8004966:	ed53 7a01 	vldr	s15, [r3, #-4]
 800496a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800496e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004972:	f1a3 0408 	sub.w	r4, r3, #8
 8004976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800497a:	f1a3 0004 	sub.w	r0, r3, #4
 800497e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8004982:	4623      	mov	r3, r4
 8004984:	d51e      	bpl.n	80049c4 <nl_func_relu_generic_array_f32+0xe0>
 8004986:	ed62 6a01 	vstmdb	r2!, {s13}
 800498a:	688b      	ldr	r3, [r1, #8]
 800498c:	42a3      	cmp	r3, r4
 800498e:	d91e      	bls.n	80049ce <nl_func_relu_generic_array_f32+0xea>
 8004990:	bc30      	pop	{r4, r5}
 8004992:	4770      	bx	lr
 8004994:	4294      	cmp	r4, r2
 8004996:	d8fb      	bhi.n	8004990 <nl_func_relu_generic_array_f32+0xac>
 8004998:	1d13      	adds	r3, r2, #4
 800499a:	2500      	movs	r5, #0
 800499c:	1d02      	adds	r2, r0, #4
 800499e:	ed53 7a01 	vldr	s15, [r3, #-4]
 80049a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049a6:	f1a3 0408 	sub.w	r4, r3, #8
 80049aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ae:	f1a3 0004 	sub.w	r0, r3, #4
 80049b2:	4623      	mov	r3, r4
 80049b4:	db0d      	blt.n	80049d2 <nl_func_relu_generic_array_f32+0xee>
 80049b6:	ed62 7a01 	vstmdb	r2!, {s15}
 80049ba:	688b      	ldr	r3, [r1, #8]
 80049bc:	42a3      	cmp	r3, r4
 80049be:	d8e7      	bhi.n	8004990 <nl_func_relu_generic_array_f32+0xac>
 80049c0:	4603      	mov	r3, r0
 80049c2:	e7ec      	b.n	800499e <nl_func_relu_generic_array_f32+0xba>
 80049c4:	ed62 7a01 	vstmdb	r2!, {s15}
 80049c8:	688c      	ldr	r4, [r1, #8]
 80049ca:	429c      	cmp	r4, r3
 80049cc:	d8e0      	bhi.n	8004990 <nl_func_relu_generic_array_f32+0xac>
 80049ce:	4603      	mov	r3, r0
 80049d0:	e7c9      	b.n	8004966 <nl_func_relu_generic_array_f32+0x82>
 80049d2:	f842 5d04 	str.w	r5, [r2, #-4]!
 80049d6:	688c      	ldr	r4, [r1, #8]
 80049d8:	429c      	cmp	r4, r3
 80049da:	d8d9      	bhi.n	8004990 <nl_func_relu_generic_array_f32+0xac>
 80049dc:	4603      	mov	r3, r0
 80049de:	e7de      	b.n	800499e <nl_func_relu_generic_array_f32+0xba>

080049e0 <forward_relu>:
 80049e0:	6982      	ldr	r2, [r0, #24]
 80049e2:	8813      	ldrh	r3, [r2, #0]
 80049e4:	b333      	cbz	r3, 8004a34 <forward_relu+0x54>
 80049e6:	6852      	ldr	r2, [r2, #4]
 80049e8:	6851      	ldr	r1, [r2, #4]
 80049ea:	b101      	cbz	r1, 80049ee <forward_relu+0xe>
 80049ec:	6809      	ldr	r1, [r1, #0]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d91d      	bls.n	8004a2e <forward_relu+0x4e>
 80049f2:	b4f0      	push	{r4, r5, r6, r7}
 80049f4:	6917      	ldr	r7, [r2, #16]
 80049f6:	b107      	cbz	r7, 80049fa <forward_relu+0x1a>
 80049f8:	683f      	ldr	r7, [r7, #0]
 80049fa:	688c      	ldr	r4, [r1, #8]
 80049fc:	69c3      	ldr	r3, [r0, #28]
 80049fe:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d044      	beq.n	8004a90 <forward_relu+0xb0>
 8004a06:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 8004a0a:	2d01      	cmp	r5, #1
 8004a0c:	d014      	beq.n	8004a38 <forward_relu+0x58>
 8004a0e:	2c00      	cmp	r4, #0
 8004a10:	d074      	beq.n	8004afc <forward_relu+0x11c>
 8004a12:	68ce      	ldr	r6, [r1, #12]
 8004a14:	2201      	movs	r2, #1
 8004a16:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8004a1a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004a1e:	42a6      	cmp	r6, r4
 8004a20:	fb05 f202 	mul.w	r2, r5, r2
 8004a24:	d1f9      	bne.n	8004a1a <forward_relu+0x3a>
 8004a26:	4638      	mov	r0, r7
 8004a28:	bcf0      	pop	{r4, r5, r6, r7}
 8004a2a:	f7ff bf5b 	b.w	80048e4 <nl_func_relu_generic_array_f32>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	deff      	udf	#255	; 0xff
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	deff      	udf	#255	; 0xff
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	6988      	ldr	r0, [r1, #24]
 8004a3c:	6896      	ldr	r6, [r2, #8]
 8004a3e:	ed93 7a00 	vldr	s14, [r3]
 8004a42:	6882      	ldr	r2, [r0, #8]
 8004a44:	b184      	cbz	r4, 8004a68 <forward_relu+0x88>
 8004a46:	68cf      	ldr	r7, [r1, #12]
 8004a48:	462b      	mov	r3, r5
 8004a4a:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8004a4e:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8004a52:	42a7      	cmp	r7, r4
 8004a54:	fb01 f303 	mul.w	r3, r1, r3
 8004a58:	d1f9      	bne.n	8004a4e <forward_relu+0x6e>
 8004a5a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	18d2      	adds	r2, r2, r3
 8004a64:	441e      	add	r6, r3
 8004a66:	d23f      	bcs.n	8004ae8 <forward_relu+0x108>
 8004a68:	1d13      	adds	r3, r2, #4
 8004a6a:	2500      	movs	r5, #0
 8004a6c:	1d32      	adds	r2, r6, #4
 8004a6e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8004a72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a7a:	f1a3 0104 	sub.w	r1, r3, #4
 8004a7e:	d835      	bhi.n	8004aec <forward_relu+0x10c>
 8004a80:	ed62 7a01 	vstmdb	r2!, {s15}
 8004a84:	6884      	ldr	r4, [r0, #8]
 8004a86:	3b08      	subs	r3, #8
 8004a88:	429c      	cmp	r4, r3
 8004a8a:	d82d      	bhi.n	8004ae8 <forward_relu+0x108>
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	e7ee      	b.n	8004a6e <forward_relu+0x8e>
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	698d      	ldr	r5, [r1, #24]
 8004a94:	6898      	ldr	r0, [r3, #8]
 8004a96:	68ab      	ldr	r3, [r5, #8]
 8004a98:	b184      	cbz	r4, 8004abc <forward_relu+0xdc>
 8004a9a:	68ce      	ldr	r6, [r1, #12]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8004aa2:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8004aa6:	42a6      	cmp	r6, r4
 8004aa8:	fb01 f202 	mul.w	r2, r1, r2
 8004aac:	d1f9      	bne.n	8004aa2 <forward_relu+0xc2>
 8004aae:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004ab2:	3a01      	subs	r2, #1
 8004ab4:	0092      	lsls	r2, r2, #2
 8004ab6:	189b      	adds	r3, r3, r2
 8004ab8:	4410      	add	r0, r2
 8004aba:	d215      	bcs.n	8004ae8 <forward_relu+0x108>
 8004abc:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004b00 <forward_relu+0x120>
 8004ac0:	3304      	adds	r3, #4
 8004ac2:	1d01      	adds	r1, r0, #4
 8004ac4:	ed53 7a01 	vldr	s15, [r3, #-4]
 8004ac8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ad0:	bfb8      	it	lt
 8004ad2:	eef0 7a47 	vmovlt.f32	s15, s14
 8004ad6:	ed61 7a01 	vstmdb	r1!, {s15}
 8004ada:	68a8      	ldr	r0, [r5, #8]
 8004adc:	f1a3 0208 	sub.w	r2, r3, #8
 8004ae0:	4290      	cmp	r0, r2
 8004ae2:	f1a3 0304 	sub.w	r3, r3, #4
 8004ae6:	d9ed      	bls.n	8004ac4 <forward_relu+0xe4>
 8004ae8:	bcf0      	pop	{r4, r5, r6, r7}
 8004aea:	4770      	bx	lr
 8004aec:	f842 5d04 	str.w	r5, [r2, #-4]!
 8004af0:	6884      	ldr	r4, [r0, #8]
 8004af2:	3b08      	subs	r3, #8
 8004af4:	429c      	cmp	r4, r3
 8004af6:	d8f7      	bhi.n	8004ae8 <forward_relu+0x108>
 8004af8:	460b      	mov	r3, r1
 8004afa:	e7b8      	b.n	8004a6e <forward_relu+0x8e>
 8004afc:	2201      	movs	r2, #1
 8004afe:	e792      	b.n	8004a26 <forward_relu+0x46>
 8004b00:	00000000 	.word	0x00000000

08004b04 <pool_func_mp_array_f32>:
 8004b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b08:	b093      	sub	sp, #76	; 0x4c
 8004b0a:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8004b0e:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8004b10:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 8004b14:	68a8      	ldr	r0, [r5, #8]
 8004b16:	f8bd 5080 	ldrh.w	r5, [sp, #128]	; 0x80
 8004b1a:	9508      	str	r5, [sp, #32]
 8004b1c:	f8bd 5084 	ldrh.w	r5, [sp, #132]	; 0x84
 8004b20:	9002      	str	r0, [sp, #8]
 8004b22:	950d      	str	r5, [sp, #52]	; 0x34
 8004b24:	f8bd 0070 	ldrh.w	r0, [sp, #112]	; 0x70
 8004b28:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
 8004b2c:	9004      	str	r0, [sp, #16]
 8004b2e:	9506      	str	r5, [sp, #24]
 8004b30:	f8bd 0074 	ldrh.w	r0, [sp, #116]	; 0x74
 8004b34:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 8004b38:	9009      	str	r0, [sp, #36]	; 0x24
 8004b3a:	950b      	str	r5, [sp, #44]	; 0x2c
 8004b3c:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 8004b40:	9200      	str	r2, [sp, #0]
 8004b42:	468a      	mov	sl, r1
 8004b44:	4699      	mov	r9, r3
 8004b46:	b95c      	cbnz	r4, 8004b60 <pool_func_mp_array_f32+0x5c>
 8004b48:	b950      	cbnz	r0, 8004b60 <pool_func_mp_array_f32+0x5c>
 8004b4a:	9b04      	ldr	r3, [sp, #16]
 8004b4c:	1a5a      	subs	r2, r3, r1
 8004b4e:	9b06      	ldr	r3, [sp, #24]
 8004b50:	9908      	ldr	r1, [sp, #32]
 8004b52:	3a01      	subs	r2, #1
 8004b54:	3b01      	subs	r3, #1
 8004b56:	fb13 2301 	smlabb	r3, r3, r1, r2
 8004b5a:	041a      	lsls	r2, r3, #16
 8004b5c:	f100 809b 	bmi.w	8004c96 <pool_func_mp_array_f32+0x192>
 8004b60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f000 808b 	beq.w	8004c7e <pool_func_mp_array_f32+0x17a>
 8004b68:	9b06      	ldr	r3, [sp, #24]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f000 8087 	beq.w	8004c7e <pool_func_mp_array_f32+0x17a>
 8004b70:	f1b9 0f00 	cmp.w	r9, #0
 8004b74:	f000 8083 	beq.w	8004c7e <pool_func_mp_array_f32+0x17a>
 8004b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b7a:	1b1c      	subs	r4, r3, r4
 8004b7c:	9b04      	ldr	r3, [sp, #16]
 8004b7e:	1a1b      	subs	r3, r3, r0
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	4240      	negs	r0, r0
 8004b84:	2200      	movs	r2, #0
 8004b86:	b2a1      	uxth	r1, r4
 8004b88:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b8a:	b283      	uxth	r3, r0
 8004b8c:	920e      	str	r2, [sp, #56]	; 0x38
 8004b8e:	910c      	str	r1, [sp, #48]	; 0x30
 8004b90:	9310      	str	r3, [sp, #64]	; 0x40
 8004b92:	9c06      	ldr	r4, [sp, #24]
 8004b94:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b98:	fb02 f204 	mul.w	r2, r2, r4
 8004b9c:	1acb      	subs	r3, r1, r3
 8004b9e:	920a      	str	r2, [sp, #40]	; 0x28
 8004ba0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ba2:	9205      	str	r2, [sp, #20]
 8004ba4:	2000      	movs	r0, #0
 8004ba6:	b21b      	sxth	r3, r3
 8004ba8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004baa:	9303      	str	r3, [sp, #12]
 8004bac:	9007      	str	r0, [sp, #28]
 8004bae:	4603      	mov	r3, r0
 8004bb0:	fa0f f881 	sxth.w	r8, r1
 8004bb4:	9204      	str	r2, [sp, #16]
 8004bb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004bb8:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8004bbc:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f04f 0e00 	mov.w	lr, #0
 8004bc6:	fb09 f303 	mul.w	r3, r9, r3
 8004bca:	9301      	str	r3, [sp, #4]
 8004bcc:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 8004bd0:	4675      	mov	r5, lr
 8004bd2:	9903      	ldr	r1, [sp, #12]
 8004bd4:	eddf 7a78 	vldr	s15, [pc, #480]	; 8004db8 <pool_func_mp_array_f32+0x2b4>
 8004bd8:	4588      	cmp	r8, r1
 8004bda:	dd24      	ble.n	8004c26 <pool_func_mp_array_f32+0x122>
 8004bdc:	4564      	cmp	r4, ip
 8004bde:	dd1e      	ble.n	8004c1e <pool_func_mp_array_f32+0x11a>
 8004be0:	2900      	cmp	r1, #0
 8004be2:	fb0a f601 	mul.w	r6, sl, r1
 8004be6:	db1a      	blt.n	8004c1e <pool_func_mp_array_f32+0x11a>
 8004be8:	9b00      	ldr	r3, [sp, #0]
 8004bea:	4299      	cmp	r1, r3
 8004bec:	da17      	bge.n	8004c1e <pool_func_mp_array_f32+0x11a>
 8004bee:	f1bc 0f00 	cmp.w	ip, #0
 8004bf2:	4663      	mov	r3, ip
 8004bf4:	db46      	blt.n	8004c84 <pool_func_mp_array_f32+0x180>
 8004bf6:	18f2      	adds	r2, r6, r3
 8004bf8:	fb09 5202 	mla	r2, r9, r2, r5
 8004bfc:	1c58      	adds	r0, r3, #1
 8004bfe:	459a      	cmp	sl, r3
 8004c00:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8004c04:	b203      	sxth	r3, r0
 8004c06:	dd08      	ble.n	8004c1a <pool_func_mp_array_f32+0x116>
 8004c08:	ed92 7a00 	vldr	s14, [r2]
 8004c0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c14:	bfb8      	it	lt
 8004c16:	eef0 7a47 	vmovlt.f32	s15, s14
 8004c1a:	429c      	cmp	r4, r3
 8004c1c:	dceb      	bgt.n	8004bf6 <pool_func_mp_array_f32+0xf2>
 8004c1e:	3101      	adds	r1, #1
 8004c20:	b209      	sxth	r1, r1
 8004c22:	4588      	cmp	r8, r1
 8004c24:	dcda      	bgt.n	8004bdc <pool_func_mp_array_f32+0xd8>
 8004c26:	9b01      	ldr	r3, [sp, #4]
 8004c28:	f10e 0e01 	add.w	lr, lr, #1
 8004c2c:	441d      	add	r5, r3
 8004c2e:	9b02      	ldr	r3, [sp, #8]
 8004c30:	fa0f fe8e 	sxth.w	lr, lr
 8004c34:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8004c38:	45ce      	cmp	lr, r9
 8004c3a:	edc5 7a00 	vstr	s15, [r5]
 8004c3e:	4675      	mov	r5, lr
 8004c40:	dbc7      	blt.n	8004bd2 <pool_func_mp_array_f32+0xce>
 8004c42:	9b07      	ldr	r3, [sp, #28]
 8004c44:	9808      	ldr	r0, [sp, #32]
 8004c46:	3301      	adds	r3, #1
 8004c48:	b219      	sxth	r1, r3
 8004c4a:	9b05      	ldr	r3, [sp, #20]
 8004c4c:	9107      	str	r1, [sp, #28]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	4402      	add	r2, r0
 8004c52:	9b04      	ldr	r3, [sp, #16]
 8004c54:	b292      	uxth	r2, r2
 8004c56:	9205      	str	r2, [sp, #20]
 8004c58:	9a06      	ldr	r2, [sp, #24]
 8004c5a:	4403      	add	r3, r0
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	428a      	cmp	r2, r1
 8004c60:	9304      	str	r3, [sp, #16]
 8004c62:	460b      	mov	r3, r1
 8004c64:	dca7      	bgt.n	8004bb6 <pool_func_mp_array_f32+0xb2>
 8004c66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c68:	3301      	adds	r3, #1
 8004c6a:	b21a      	sxth	r2, r3
 8004c6c:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
 8004c70:	440b      	add	r3, r1
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	930c      	str	r3, [sp, #48]	; 0x30
 8004c76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c78:	920e      	str	r2, [sp, #56]	; 0x38
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	dc89      	bgt.n	8004b92 <pool_func_mp_array_f32+0x8e>
 8004c7e:	b013      	add	sp, #76	; 0x4c
 8004c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c84:	3301      	adds	r3, #1
 8004c86:	b21b      	sxth	r3, r3
 8004c88:	42bb      	cmp	r3, r7
 8004c8a:	dac6      	bge.n	8004c1a <pool_func_mp_array_f32+0x116>
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	b21b      	sxth	r3, r3
 8004c90:	42bb      	cmp	r3, r7
 8004c92:	dbf7      	blt.n	8004c84 <pool_func_mp_array_f32+0x180>
 8004c94:	e7c1      	b.n	8004c1a <pool_func_mp_array_f32+0x116>
 8004c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c98:	9a00      	ldr	r2, [sp, #0]
 8004c9a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004c9c:	1a9a      	subs	r2, r3, r2
 8004c9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ca0:	3a01      	subs	r2, #1
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	fb13 2301 	smlabb	r3, r3, r1, r2
 8004ca8:	041b      	lsls	r3, r3, #16
 8004caa:	f57f af59 	bpl.w	8004b60 <pool_func_mp_array_f32+0x5c>
 8004cae:	fb0a f309 	mul.w	r3, sl, r9
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
 8004cb8:	930e      	str	r3, [sp, #56]	; 0x38
 8004cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cbc:	9001      	str	r0, [sp, #4]
 8004cbe:	ea4f 0c89 	mov.w	ip, r9, lsl #2
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8004cc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	ddd7      	ble.n	8004c7e <pool_func_mp_array_f32+0x17a>
 8004cce:	9a00      	ldr	r2, [sp, #0]
 8004cd0:	9906      	ldr	r1, [sp, #24]
 8004cd2:	fa0f f882 	sxth.w	r8, r2
 8004cd6:	2900      	cmp	r1, #0
 8004cd8:	d062      	beq.n	8004da0 <pool_func_mp_array_f32+0x29c>
 8004cda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cdc:	fb01 f303 	mul.w	r3, r1, r3
 8004ce0:	1a12      	subs	r2, r2, r0
 8004ce2:	9305      	str	r3, [sp, #20]
 8004ce4:	b213      	sxth	r3, r2
 8004ce6:	9307      	str	r3, [sp, #28]
 8004ce8:	f1b9 0f00 	cmp.w	r9, #0
 8004cec:	d058      	beq.n	8004da0 <pool_func_mp_array_f32+0x29c>
 8004cee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004cf0:	fb02 f303 	mul.w	r3, r2, r3
 8004cf4:	2600      	movs	r6, #0
 8004cf6:	930c      	str	r3, [sp, #48]	; 0x30
 8004cf8:	9b04      	ldr	r3, [sp, #16]
 8004cfa:	9303      	str	r3, [sp, #12]
 8004cfc:	4637      	mov	r7, r6
 8004cfe:	46b2      	mov	sl, r6
 8004d00:	9b05      	ldr	r3, [sp, #20]
 8004d02:	9611      	str	r6, [sp, #68]	; 0x44
 8004d04:	eb0a 0b03 	add.w	fp, sl, r3
 8004d08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d0a:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8004d0e:	b235      	sxth	r5, r6
 8004d10:	18eb      	adds	r3, r5, r3
 8004d12:	f04f 0a00 	mov.w	sl, #0
 8004d16:	fb09 f303 	mul.w	r3, r9, r3
 8004d1a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8004d1c:	930a      	str	r3, [sp, #40]	; 0x28
 8004d1e:	fb09 fb0b 	mul.w	fp, r9, fp
 8004d22:	46d6      	mov	lr, sl
 8004d24:	9807      	ldr	r0, [sp, #28]
 8004d26:	4580      	cmp	r8, r0
 8004d28:	dd43      	ble.n	8004db2 <pool_func_mp_array_f32+0x2ae>
 8004d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d2c:	eddf 7a22 	vldr	s15, [pc, #136]	; 8004db8 <pool_func_mp_array_f32+0x2b4>
 8004d30:	eb0e 0403 	add.w	r4, lr, r3
 8004d34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d36:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004d3a:	42a9      	cmp	r1, r5
 8004d3c:	dd0f      	ble.n	8004d5e <pool_func_mp_array_f32+0x25a>
 8004d3e:	4622      	mov	r2, r4
 8004d40:	462b      	mov	r3, r5
 8004d42:	ed92 7a00 	vldr	s14, [r2]
 8004d46:	3301      	adds	r3, #1
 8004d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d50:	b21b      	sxth	r3, r3
 8004d52:	bfb8      	it	lt
 8004d54:	eef0 7a47 	vmovlt.f32	s15, s14
 8004d58:	4299      	cmp	r1, r3
 8004d5a:	4462      	add	r2, ip
 8004d5c:	d1f1      	bne.n	8004d42 <pool_func_mp_array_f32+0x23e>
 8004d5e:	3001      	adds	r0, #1
 8004d60:	b200      	sxth	r0, r0
 8004d62:	4580      	cmp	r8, r0
 8004d64:	4434      	add	r4, r6
 8004d66:	d1e8      	bne.n	8004d3a <pool_func_mp_array_f32+0x236>
 8004d68:	f10a 0a01 	add.w	sl, sl, #1
 8004d6c:	9a02      	ldr	r2, [sp, #8]
 8004d6e:	eb0b 030e 	add.w	r3, fp, lr
 8004d72:	fa0f fa8a 	sxth.w	sl, sl
 8004d76:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004d7a:	45ca      	cmp	sl, r9
 8004d7c:	edc3 7a00 	vstr	s15, [r3]
 8004d80:	46d6      	mov	lr, sl
 8004d82:	dbcf      	blt.n	8004d24 <pool_func_mp_array_f32+0x220>
 8004d84:	9b03      	ldr	r3, [sp, #12]
 8004d86:	9a08      	ldr	r2, [sp, #32]
 8004d88:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8004d8a:	4413      	add	r3, r2
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	3701      	adds	r7, #1
 8004d90:	9303      	str	r3, [sp, #12]
 8004d92:	9b06      	ldr	r3, [sp, #24]
 8004d94:	b23f      	sxth	r7, r7
 8004d96:	4416      	add	r6, r2
 8004d98:	42bb      	cmp	r3, r7
 8004d9a:	b2b6      	uxth	r6, r6
 8004d9c:	46ba      	mov	sl, r7
 8004d9e:	dcaf      	bgt.n	8004d00 <pool_func_mp_array_f32+0x1fc>
 8004da0:	9b00      	ldr	r3, [sp, #0]
 8004da2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004da4:	4413      	add	r3, r2
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	9b01      	ldr	r3, [sp, #4]
 8004dac:	3301      	adds	r3, #1
 8004dae:	9301      	str	r3, [sp, #4]
 8004db0:	e788      	b.n	8004cc4 <pool_func_mp_array_f32+0x1c0>
 8004db2:	eddf 7a01 	vldr	s15, [pc, #4]	; 8004db8 <pool_func_mp_array_f32+0x2b4>
 8004db6:	e7d7      	b.n	8004d68 <pool_func_mp_array_f32+0x264>
 8004db8:	cf000000 	.word	0xcf000000

08004dbc <ai_check_custom_types>:
 8004dbc:	4b13      	ldr	r3, [pc, #76]	; (8004e0c <ai_check_custom_types+0x50>)
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	9301      	str	r3, [sp, #4]
 8004dc4:	b118      	cbz	r0, 8004dce <ai_check_custom_types+0x12>
 8004dc6:	7803      	ldrb	r3, [r0, #0]
 8004dc8:	2b03      	cmp	r3, #3
 8004dca:	d002      	beq.n	8004dd2 <ai_check_custom_types+0x16>
 8004dcc:	2000      	movs	r0, #0
 8004dce:	b002      	add	sp, #8
 8004dd0:	4770      	bx	lr
 8004dd2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d004      	beq.n	8004de4 <ai_check_custom_types+0x28>
 8004dda:	2001      	movs	r0, #1
 8004ddc:	f080 0001 	eor.w	r0, r0, #1
 8004de0:	b002      	add	sp, #8
 8004de2:	4770      	bx	lr
 8004de4:	7842      	ldrb	r2, [r0, #1]
 8004de6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	f100 0001 	add.w	r0, r0, #1
 8004df0:	d1f3      	bne.n	8004dda <ai_check_custom_types+0x1e>
 8004df2:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8004df6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d1ed      	bne.n	8004dda <ai_check_custom_types+0x1e>
 8004dfe:	7842      	ldrb	r2, [r0, #1]
 8004e00:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d1e8      	bne.n	8004dda <ai_check_custom_types+0x1e>
 8004e08:	2000      	movs	r0, #0
 8004e0a:	e7e7      	b.n	8004ddc <ai_check_custom_types+0x20>
 8004e0c:	08006588 	.word	0x08006588

08004e10 <ai_layers_forward_all>:
 8004e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e14:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 8004e16:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8004e18:	4604      	mov	r4, r0
 8004e1a:	2f00      	cmp	r7, #0
 8004e1c:	d02c      	beq.n	8004e78 <ai_layers_forward_all+0x68>
 8004e1e:	2d00      	cmp	r5, #0
 8004e20:	d03f      	beq.n	8004ea2 <ai_layers_forward_all+0x92>
 8004e22:	6385      	str	r5, [r0, #56]	; 0x38
 8004e24:	4629      	mov	r1, r5
 8004e26:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004e28:	2001      	movs	r0, #1
 8004e2a:	47b8      	blx	r7
 8004e2c:	2600      	movs	r6, #0
 8004e2e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004e30:	46b0      	mov	r8, r6
 8004e32:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004e34:	2002      	movs	r0, #2
 8004e36:	47b8      	blx	r7
 8004e38:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8004e3a:	696b      	ldr	r3, [r5, #20]
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	4798      	blx	r3
 8004e40:	692b      	ldr	r3, [r5, #16]
 8004e42:	429d      	cmp	r5, r3
 8004e44:	f04f 0003 	mov.w	r0, #3
 8004e48:	4619      	mov	r1, r3
 8004e4a:	d009      	beq.n	8004e60 <ai_layers_forward_all+0x50>
 8004e4c:	63a3      	str	r3, [r4, #56]	; 0x38
 8004e4e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004e50:	47b8      	blx	r7
 8004e52:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004e54:	3601      	adds	r6, #1
 8004e56:	2900      	cmp	r1, #0
 8004e58:	d1eb      	bne.n	8004e32 <ai_layers_forward_all+0x22>
 8004e5a:	4630      	mov	r0, r6
 8004e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e60:	2100      	movs	r1, #0
 8004e62:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 8004e66:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004e68:	47b8      	blx	r7
 8004e6a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004e6c:	3601      	adds	r6, #1
 8004e6e:	2900      	cmp	r1, #0
 8004e70:	d1df      	bne.n	8004e32 <ai_layers_forward_all+0x22>
 8004e72:	4630      	mov	r0, r6
 8004e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e78:	b19d      	cbz	r5, 8004ea2 <ai_layers_forward_all+0x92>
 8004e7a:	6385      	str	r5, [r0, #56]	; 0x38
 8004e7c:	463e      	mov	r6, r7
 8004e7e:	696b      	ldr	r3, [r5, #20]
 8004e80:	4628      	mov	r0, r5
 8004e82:	4798      	blx	r3
 8004e84:	692b      	ldr	r3, [r5, #16]
 8004e86:	42ab      	cmp	r3, r5
 8004e88:	f106 0601 	add.w	r6, r6, #1
 8004e8c:	d004      	beq.n	8004e98 <ai_layers_forward_all+0x88>
 8004e8e:	63a3      	str	r3, [r4, #56]	; 0x38
 8004e90:	461d      	mov	r5, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1f3      	bne.n	8004e7e <ai_layers_forward_all+0x6e>
 8004e96:	e7e0      	b.n	8004e5a <ai_layers_forward_all+0x4a>
 8004e98:	2300      	movs	r3, #0
 8004e9a:	63a3      	str	r3, [r4, #56]	; 0x38
 8004e9c:	4630      	mov	r0, r6
 8004e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ea2:	462e      	mov	r6, r5
 8004ea4:	4630      	mov	r0, r6
 8004ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eaa:	bf00      	nop

08004eac <ai_array_to_buffer_fmt>:
 8004eac:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d029      	beq.n	8004f08 <ai_array_to_buffer_fmt+0x5c>
 8004eb4:	4a22      	ldr	r2, [pc, #136]	; (8004f40 <ai_array_to_buffer_fmt+0x94>)
 8004eb6:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d010      	beq.n	8004ee0 <ai_array_to_buffer_fmt+0x34>
 8004ebe:	dd13      	ble.n	8004ee8 <ai_array_to_buffer_fmt+0x3c>
 8004ec0:	4a20      	ldr	r2, [pc, #128]	; (8004f44 <ai_array_to_buffer_fmt+0x98>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d00c      	beq.n	8004ee0 <ai_array_to_buffer_fmt+0x34>
 8004ec6:	dc27      	bgt.n	8004f18 <ai_array_to_buffer_fmt+0x6c>
 8004ec8:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d007      	beq.n	8004ee0 <ai_array_to_buffer_fmt+0x34>
 8004ed0:	3207      	adds	r2, #7
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d004      	beq.n	8004ee0 <ai_array_to_buffer_fmt+0x34>
 8004ed6:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d000      	beq.n	8004ee0 <ai_array_to_buffer_fmt+0x34>
 8004ede:	2340      	movs	r3, #64	; 0x40
 8004ee0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8004ee4:	4318      	orrs	r0, r3
 8004ee6:	4770      	bx	lr
 8004ee8:	4a17      	ldr	r2, [pc, #92]	; (8004f48 <ai_array_to_buffer_fmt+0x9c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d0f8      	beq.n	8004ee0 <ai_array_to_buffer_fmt+0x34>
 8004eee:	dd1e      	ble.n	8004f2e <ai_array_to_buffer_fmt+0x82>
 8004ef0:	4a16      	ldr	r2, [pc, #88]	; (8004f4c <ai_array_to_buffer_fmt+0xa0>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d0f4      	beq.n	8004ee0 <ai_array_to_buffer_fmt+0x34>
 8004ef6:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d0f0      	beq.n	8004ee0 <ai_array_to_buffer_fmt+0x34>
 8004efe:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d1eb      	bne.n	8004ede <ai_array_to_buffer_fmt+0x32>
 8004f06:	e7eb      	b.n	8004ee0 <ai_array_to_buffer_fmt+0x34>
 8004f08:	4b11      	ldr	r3, [pc, #68]	; (8004f50 <ai_array_to_buffer_fmt+0xa4>)
 8004f0a:	4003      	ands	r3, r0
 8004f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f10:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8004f14:	4318      	orrs	r0, r3
 8004f16:	4770      	bx	lr
 8004f18:	4a0e      	ldr	r2, [pc, #56]	; (8004f54 <ai_array_to_buffer_fmt+0xa8>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d0e0      	beq.n	8004ee0 <ai_array_to_buffer_fmt+0x34>
 8004f1e:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d0dc      	beq.n	8004ee0 <ai_array_to_buffer_fmt+0x34>
 8004f26:	4a0c      	ldr	r2, [pc, #48]	; (8004f58 <ai_array_to_buffer_fmt+0xac>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d1d8      	bne.n	8004ede <ai_array_to_buffer_fmt+0x32>
 8004f2c:	e7d8      	b.n	8004ee0 <ai_array_to_buffer_fmt+0x34>
 8004f2e:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d0d4      	beq.n	8004ee0 <ai_array_to_buffer_fmt+0x34>
 8004f36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d0d0      	beq.n	8004ee0 <ai_array_to_buffer_fmt+0x34>
 8004f3e:	e7ce      	b.n	8004ede <ai_array_to_buffer_fmt+0x32>
 8004f40:	00060440 	.word	0x00060440
 8004f44:	00840840 	.word	0x00840840
 8004f48:	00040447 	.word	0x00040447
 8004f4c:	0004084f 	.word	0x0004084f
 8004f50:	00803fff 	.word	0x00803fff
 8004f54:	00841040 	.word	0x00841040
 8004f58:	0084084f 	.word	0x0084084f

08004f5c <ai_array_get_byte_size>:
 8004f5c:	b1c1      	cbz	r1, 8004f90 <ai_array_get_byte_size+0x34>
 8004f5e:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8004f62:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8004f66:	4413      	add	r3, r2
 8004f68:	fb01 f103 	mul.w	r1, r1, r3
 8004f6c:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8004f70:	3107      	adds	r1, #7
 8004f72:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8004f76:	f021 0107 	bic.w	r1, r1, #7
 8004f7a:	2804      	cmp	r0, #4
 8004f7c:	fa21 f102 	lsr.w	r1, r1, r2
 8004f80:	d008      	beq.n	8004f94 <ai_array_get_byte_size+0x38>
 8004f82:	2808      	cmp	r0, #8
 8004f84:	d101      	bne.n	8004f8a <ai_array_get_byte_size+0x2e>
 8004f86:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8004f8a:	3107      	adds	r1, #7
 8004f8c:	08c8      	lsrs	r0, r1, #3
 8004f8e:	4770      	bx	lr
 8004f90:	4608      	mov	r0, r1
 8004f92:	4770      	bx	lr
 8004f94:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8004f98:	3107      	adds	r1, #7
 8004f9a:	08c8      	lsrs	r0, r1, #3
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop

08004fa0 <__errno>:
 8004fa0:	4b01      	ldr	r3, [pc, #4]	; (8004fa8 <__errno+0x8>)
 8004fa2:	6818      	ldr	r0, [r3, #0]
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	20000a14 	.word	0x20000a14

08004fac <__libc_init_array>:
 8004fac:	b570      	push	{r4, r5, r6, lr}
 8004fae:	4d0d      	ldr	r5, [pc, #52]	; (8004fe4 <__libc_init_array+0x38>)
 8004fb0:	4c0d      	ldr	r4, [pc, #52]	; (8004fe8 <__libc_init_array+0x3c>)
 8004fb2:	1b64      	subs	r4, r4, r5
 8004fb4:	10a4      	asrs	r4, r4, #2
 8004fb6:	2600      	movs	r6, #0
 8004fb8:	42a6      	cmp	r6, r4
 8004fba:	d109      	bne.n	8004fd0 <__libc_init_array+0x24>
 8004fbc:	4d0b      	ldr	r5, [pc, #44]	; (8004fec <__libc_init_array+0x40>)
 8004fbe:	4c0c      	ldr	r4, [pc, #48]	; (8004ff0 <__libc_init_array+0x44>)
 8004fc0:	f001 fa2e 	bl	8006420 <_init>
 8004fc4:	1b64      	subs	r4, r4, r5
 8004fc6:	10a4      	asrs	r4, r4, #2
 8004fc8:	2600      	movs	r6, #0
 8004fca:	42a6      	cmp	r6, r4
 8004fcc:	d105      	bne.n	8004fda <__libc_init_array+0x2e>
 8004fce:	bd70      	pop	{r4, r5, r6, pc}
 8004fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fd4:	4798      	blx	r3
 8004fd6:	3601      	adds	r6, #1
 8004fd8:	e7ee      	b.n	8004fb8 <__libc_init_array+0xc>
 8004fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fde:	4798      	blx	r3
 8004fe0:	3601      	adds	r6, #1
 8004fe2:	e7f2      	b.n	8004fca <__libc_init_array+0x1e>
 8004fe4:	0802a1a4 	.word	0x0802a1a4
 8004fe8:	0802a1a4 	.word	0x0802a1a4
 8004fec:	0802a1a4 	.word	0x0802a1a4
 8004ff0:	0802a1a8 	.word	0x0802a1a8

08004ff4 <memcpy>:
 8004ff4:	440a      	add	r2, r1
 8004ff6:	4291      	cmp	r1, r2
 8004ff8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ffc:	d100      	bne.n	8005000 <memcpy+0xc>
 8004ffe:	4770      	bx	lr
 8005000:	b510      	push	{r4, lr}
 8005002:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005006:	f803 4f01 	strb.w	r4, [r3, #1]!
 800500a:	4291      	cmp	r1, r2
 800500c:	d1f9      	bne.n	8005002 <memcpy+0xe>
 800500e:	bd10      	pop	{r4, pc}

08005010 <memset>:
 8005010:	4402      	add	r2, r0
 8005012:	4603      	mov	r3, r0
 8005014:	4293      	cmp	r3, r2
 8005016:	d100      	bne.n	800501a <memset+0xa>
 8005018:	4770      	bx	lr
 800501a:	f803 1b01 	strb.w	r1, [r3], #1
 800501e:	e7f9      	b.n	8005014 <memset+0x4>

08005020 <_free_r>:
 8005020:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005022:	2900      	cmp	r1, #0
 8005024:	d044      	beq.n	80050b0 <_free_r+0x90>
 8005026:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800502a:	9001      	str	r0, [sp, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	f1a1 0404 	sub.w	r4, r1, #4
 8005032:	bfb8      	it	lt
 8005034:	18e4      	addlt	r4, r4, r3
 8005036:	f000 fc71 	bl	800591c <__malloc_lock>
 800503a:	4a1e      	ldr	r2, [pc, #120]	; (80050b4 <_free_r+0x94>)
 800503c:	9801      	ldr	r0, [sp, #4]
 800503e:	6813      	ldr	r3, [r2, #0]
 8005040:	b933      	cbnz	r3, 8005050 <_free_r+0x30>
 8005042:	6063      	str	r3, [r4, #4]
 8005044:	6014      	str	r4, [r2, #0]
 8005046:	b003      	add	sp, #12
 8005048:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800504c:	f000 bc6c 	b.w	8005928 <__malloc_unlock>
 8005050:	42a3      	cmp	r3, r4
 8005052:	d908      	bls.n	8005066 <_free_r+0x46>
 8005054:	6825      	ldr	r5, [r4, #0]
 8005056:	1961      	adds	r1, r4, r5
 8005058:	428b      	cmp	r3, r1
 800505a:	bf01      	itttt	eq
 800505c:	6819      	ldreq	r1, [r3, #0]
 800505e:	685b      	ldreq	r3, [r3, #4]
 8005060:	1949      	addeq	r1, r1, r5
 8005062:	6021      	streq	r1, [r4, #0]
 8005064:	e7ed      	b.n	8005042 <_free_r+0x22>
 8005066:	461a      	mov	r2, r3
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	b10b      	cbz	r3, 8005070 <_free_r+0x50>
 800506c:	42a3      	cmp	r3, r4
 800506e:	d9fa      	bls.n	8005066 <_free_r+0x46>
 8005070:	6811      	ldr	r1, [r2, #0]
 8005072:	1855      	adds	r5, r2, r1
 8005074:	42a5      	cmp	r5, r4
 8005076:	d10b      	bne.n	8005090 <_free_r+0x70>
 8005078:	6824      	ldr	r4, [r4, #0]
 800507a:	4421      	add	r1, r4
 800507c:	1854      	adds	r4, r2, r1
 800507e:	42a3      	cmp	r3, r4
 8005080:	6011      	str	r1, [r2, #0]
 8005082:	d1e0      	bne.n	8005046 <_free_r+0x26>
 8005084:	681c      	ldr	r4, [r3, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	6053      	str	r3, [r2, #4]
 800508a:	4421      	add	r1, r4
 800508c:	6011      	str	r1, [r2, #0]
 800508e:	e7da      	b.n	8005046 <_free_r+0x26>
 8005090:	d902      	bls.n	8005098 <_free_r+0x78>
 8005092:	230c      	movs	r3, #12
 8005094:	6003      	str	r3, [r0, #0]
 8005096:	e7d6      	b.n	8005046 <_free_r+0x26>
 8005098:	6825      	ldr	r5, [r4, #0]
 800509a:	1961      	adds	r1, r4, r5
 800509c:	428b      	cmp	r3, r1
 800509e:	bf04      	itt	eq
 80050a0:	6819      	ldreq	r1, [r3, #0]
 80050a2:	685b      	ldreq	r3, [r3, #4]
 80050a4:	6063      	str	r3, [r4, #4]
 80050a6:	bf04      	itt	eq
 80050a8:	1949      	addeq	r1, r1, r5
 80050aa:	6021      	streq	r1, [r4, #0]
 80050ac:	6054      	str	r4, [r2, #4]
 80050ae:	e7ca      	b.n	8005046 <_free_r+0x26>
 80050b0:	b003      	add	sp, #12
 80050b2:	bd30      	pop	{r4, r5, pc}
 80050b4:	2000ca48 	.word	0x2000ca48

080050b8 <sbrk_aligned>:
 80050b8:	b570      	push	{r4, r5, r6, lr}
 80050ba:	4e0e      	ldr	r6, [pc, #56]	; (80050f4 <sbrk_aligned+0x3c>)
 80050bc:	460c      	mov	r4, r1
 80050be:	6831      	ldr	r1, [r6, #0]
 80050c0:	4605      	mov	r5, r0
 80050c2:	b911      	cbnz	r1, 80050ca <sbrk_aligned+0x12>
 80050c4:	f000 f91a 	bl	80052fc <_sbrk_r>
 80050c8:	6030      	str	r0, [r6, #0]
 80050ca:	4621      	mov	r1, r4
 80050cc:	4628      	mov	r0, r5
 80050ce:	f000 f915 	bl	80052fc <_sbrk_r>
 80050d2:	1c43      	adds	r3, r0, #1
 80050d4:	d00a      	beq.n	80050ec <sbrk_aligned+0x34>
 80050d6:	1cc4      	adds	r4, r0, #3
 80050d8:	f024 0403 	bic.w	r4, r4, #3
 80050dc:	42a0      	cmp	r0, r4
 80050de:	d007      	beq.n	80050f0 <sbrk_aligned+0x38>
 80050e0:	1a21      	subs	r1, r4, r0
 80050e2:	4628      	mov	r0, r5
 80050e4:	f000 f90a 	bl	80052fc <_sbrk_r>
 80050e8:	3001      	adds	r0, #1
 80050ea:	d101      	bne.n	80050f0 <sbrk_aligned+0x38>
 80050ec:	f04f 34ff 	mov.w	r4, #4294967295
 80050f0:	4620      	mov	r0, r4
 80050f2:	bd70      	pop	{r4, r5, r6, pc}
 80050f4:	2000ca4c 	.word	0x2000ca4c

080050f8 <_malloc_r>:
 80050f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050fc:	1ccd      	adds	r5, r1, #3
 80050fe:	f025 0503 	bic.w	r5, r5, #3
 8005102:	3508      	adds	r5, #8
 8005104:	2d0c      	cmp	r5, #12
 8005106:	bf38      	it	cc
 8005108:	250c      	movcc	r5, #12
 800510a:	2d00      	cmp	r5, #0
 800510c:	4607      	mov	r7, r0
 800510e:	db01      	blt.n	8005114 <_malloc_r+0x1c>
 8005110:	42a9      	cmp	r1, r5
 8005112:	d905      	bls.n	8005120 <_malloc_r+0x28>
 8005114:	230c      	movs	r3, #12
 8005116:	603b      	str	r3, [r7, #0]
 8005118:	2600      	movs	r6, #0
 800511a:	4630      	mov	r0, r6
 800511c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005120:	4e2e      	ldr	r6, [pc, #184]	; (80051dc <_malloc_r+0xe4>)
 8005122:	f000 fbfb 	bl	800591c <__malloc_lock>
 8005126:	6833      	ldr	r3, [r6, #0]
 8005128:	461c      	mov	r4, r3
 800512a:	bb34      	cbnz	r4, 800517a <_malloc_r+0x82>
 800512c:	4629      	mov	r1, r5
 800512e:	4638      	mov	r0, r7
 8005130:	f7ff ffc2 	bl	80050b8 <sbrk_aligned>
 8005134:	1c43      	adds	r3, r0, #1
 8005136:	4604      	mov	r4, r0
 8005138:	d14d      	bne.n	80051d6 <_malloc_r+0xde>
 800513a:	6834      	ldr	r4, [r6, #0]
 800513c:	4626      	mov	r6, r4
 800513e:	2e00      	cmp	r6, #0
 8005140:	d140      	bne.n	80051c4 <_malloc_r+0xcc>
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	4631      	mov	r1, r6
 8005146:	4638      	mov	r0, r7
 8005148:	eb04 0803 	add.w	r8, r4, r3
 800514c:	f000 f8d6 	bl	80052fc <_sbrk_r>
 8005150:	4580      	cmp	r8, r0
 8005152:	d13a      	bne.n	80051ca <_malloc_r+0xd2>
 8005154:	6821      	ldr	r1, [r4, #0]
 8005156:	3503      	adds	r5, #3
 8005158:	1a6d      	subs	r5, r5, r1
 800515a:	f025 0503 	bic.w	r5, r5, #3
 800515e:	3508      	adds	r5, #8
 8005160:	2d0c      	cmp	r5, #12
 8005162:	bf38      	it	cc
 8005164:	250c      	movcc	r5, #12
 8005166:	4629      	mov	r1, r5
 8005168:	4638      	mov	r0, r7
 800516a:	f7ff ffa5 	bl	80050b8 <sbrk_aligned>
 800516e:	3001      	adds	r0, #1
 8005170:	d02b      	beq.n	80051ca <_malloc_r+0xd2>
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	442b      	add	r3, r5
 8005176:	6023      	str	r3, [r4, #0]
 8005178:	e00e      	b.n	8005198 <_malloc_r+0xa0>
 800517a:	6822      	ldr	r2, [r4, #0]
 800517c:	1b52      	subs	r2, r2, r5
 800517e:	d41e      	bmi.n	80051be <_malloc_r+0xc6>
 8005180:	2a0b      	cmp	r2, #11
 8005182:	d916      	bls.n	80051b2 <_malloc_r+0xba>
 8005184:	1961      	adds	r1, r4, r5
 8005186:	42a3      	cmp	r3, r4
 8005188:	6025      	str	r5, [r4, #0]
 800518a:	bf18      	it	ne
 800518c:	6059      	strne	r1, [r3, #4]
 800518e:	6863      	ldr	r3, [r4, #4]
 8005190:	bf08      	it	eq
 8005192:	6031      	streq	r1, [r6, #0]
 8005194:	5162      	str	r2, [r4, r5]
 8005196:	604b      	str	r3, [r1, #4]
 8005198:	4638      	mov	r0, r7
 800519a:	f104 060b 	add.w	r6, r4, #11
 800519e:	f000 fbc3 	bl	8005928 <__malloc_unlock>
 80051a2:	f026 0607 	bic.w	r6, r6, #7
 80051a6:	1d23      	adds	r3, r4, #4
 80051a8:	1af2      	subs	r2, r6, r3
 80051aa:	d0b6      	beq.n	800511a <_malloc_r+0x22>
 80051ac:	1b9b      	subs	r3, r3, r6
 80051ae:	50a3      	str	r3, [r4, r2]
 80051b0:	e7b3      	b.n	800511a <_malloc_r+0x22>
 80051b2:	6862      	ldr	r2, [r4, #4]
 80051b4:	42a3      	cmp	r3, r4
 80051b6:	bf0c      	ite	eq
 80051b8:	6032      	streq	r2, [r6, #0]
 80051ba:	605a      	strne	r2, [r3, #4]
 80051bc:	e7ec      	b.n	8005198 <_malloc_r+0xa0>
 80051be:	4623      	mov	r3, r4
 80051c0:	6864      	ldr	r4, [r4, #4]
 80051c2:	e7b2      	b.n	800512a <_malloc_r+0x32>
 80051c4:	4634      	mov	r4, r6
 80051c6:	6876      	ldr	r6, [r6, #4]
 80051c8:	e7b9      	b.n	800513e <_malloc_r+0x46>
 80051ca:	230c      	movs	r3, #12
 80051cc:	603b      	str	r3, [r7, #0]
 80051ce:	4638      	mov	r0, r7
 80051d0:	f000 fbaa 	bl	8005928 <__malloc_unlock>
 80051d4:	e7a1      	b.n	800511a <_malloc_r+0x22>
 80051d6:	6025      	str	r5, [r4, #0]
 80051d8:	e7de      	b.n	8005198 <_malloc_r+0xa0>
 80051da:	bf00      	nop
 80051dc:	2000ca48 	.word	0x2000ca48

080051e0 <iprintf>:
 80051e0:	b40f      	push	{r0, r1, r2, r3}
 80051e2:	4b0a      	ldr	r3, [pc, #40]	; (800520c <iprintf+0x2c>)
 80051e4:	b513      	push	{r0, r1, r4, lr}
 80051e6:	681c      	ldr	r4, [r3, #0]
 80051e8:	b124      	cbz	r4, 80051f4 <iprintf+0x14>
 80051ea:	69a3      	ldr	r3, [r4, #24]
 80051ec:	b913      	cbnz	r3, 80051f4 <iprintf+0x14>
 80051ee:	4620      	mov	r0, r4
 80051f0:	f000 fa8e 	bl	8005710 <__sinit>
 80051f4:	ab05      	add	r3, sp, #20
 80051f6:	9a04      	ldr	r2, [sp, #16]
 80051f8:	68a1      	ldr	r1, [r4, #8]
 80051fa:	9301      	str	r3, [sp, #4]
 80051fc:	4620      	mov	r0, r4
 80051fe:	f000 fd4d 	bl	8005c9c <_vfiprintf_r>
 8005202:	b002      	add	sp, #8
 8005204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005208:	b004      	add	sp, #16
 800520a:	4770      	bx	lr
 800520c:	20000a14 	.word	0x20000a14

08005210 <_puts_r>:
 8005210:	b570      	push	{r4, r5, r6, lr}
 8005212:	460e      	mov	r6, r1
 8005214:	4605      	mov	r5, r0
 8005216:	b118      	cbz	r0, 8005220 <_puts_r+0x10>
 8005218:	6983      	ldr	r3, [r0, #24]
 800521a:	b90b      	cbnz	r3, 8005220 <_puts_r+0x10>
 800521c:	f000 fa78 	bl	8005710 <__sinit>
 8005220:	69ab      	ldr	r3, [r5, #24]
 8005222:	68ac      	ldr	r4, [r5, #8]
 8005224:	b913      	cbnz	r3, 800522c <_puts_r+0x1c>
 8005226:	4628      	mov	r0, r5
 8005228:	f000 fa72 	bl	8005710 <__sinit>
 800522c:	4b2c      	ldr	r3, [pc, #176]	; (80052e0 <_puts_r+0xd0>)
 800522e:	429c      	cmp	r4, r3
 8005230:	d120      	bne.n	8005274 <_puts_r+0x64>
 8005232:	686c      	ldr	r4, [r5, #4]
 8005234:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005236:	07db      	lsls	r3, r3, #31
 8005238:	d405      	bmi.n	8005246 <_puts_r+0x36>
 800523a:	89a3      	ldrh	r3, [r4, #12]
 800523c:	0598      	lsls	r0, r3, #22
 800523e:	d402      	bmi.n	8005246 <_puts_r+0x36>
 8005240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005242:	f000 fb03 	bl	800584c <__retarget_lock_acquire_recursive>
 8005246:	89a3      	ldrh	r3, [r4, #12]
 8005248:	0719      	lsls	r1, r3, #28
 800524a:	d51d      	bpl.n	8005288 <_puts_r+0x78>
 800524c:	6923      	ldr	r3, [r4, #16]
 800524e:	b1db      	cbz	r3, 8005288 <_puts_r+0x78>
 8005250:	3e01      	subs	r6, #1
 8005252:	68a3      	ldr	r3, [r4, #8]
 8005254:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005258:	3b01      	subs	r3, #1
 800525a:	60a3      	str	r3, [r4, #8]
 800525c:	bb39      	cbnz	r1, 80052ae <_puts_r+0x9e>
 800525e:	2b00      	cmp	r3, #0
 8005260:	da38      	bge.n	80052d4 <_puts_r+0xc4>
 8005262:	4622      	mov	r2, r4
 8005264:	210a      	movs	r1, #10
 8005266:	4628      	mov	r0, r5
 8005268:	f000 f878 	bl	800535c <__swbuf_r>
 800526c:	3001      	adds	r0, #1
 800526e:	d011      	beq.n	8005294 <_puts_r+0x84>
 8005270:	250a      	movs	r5, #10
 8005272:	e011      	b.n	8005298 <_puts_r+0x88>
 8005274:	4b1b      	ldr	r3, [pc, #108]	; (80052e4 <_puts_r+0xd4>)
 8005276:	429c      	cmp	r4, r3
 8005278:	d101      	bne.n	800527e <_puts_r+0x6e>
 800527a:	68ac      	ldr	r4, [r5, #8]
 800527c:	e7da      	b.n	8005234 <_puts_r+0x24>
 800527e:	4b1a      	ldr	r3, [pc, #104]	; (80052e8 <_puts_r+0xd8>)
 8005280:	429c      	cmp	r4, r3
 8005282:	bf08      	it	eq
 8005284:	68ec      	ldreq	r4, [r5, #12]
 8005286:	e7d5      	b.n	8005234 <_puts_r+0x24>
 8005288:	4621      	mov	r1, r4
 800528a:	4628      	mov	r0, r5
 800528c:	f000 f8b8 	bl	8005400 <__swsetup_r>
 8005290:	2800      	cmp	r0, #0
 8005292:	d0dd      	beq.n	8005250 <_puts_r+0x40>
 8005294:	f04f 35ff 	mov.w	r5, #4294967295
 8005298:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800529a:	07da      	lsls	r2, r3, #31
 800529c:	d405      	bmi.n	80052aa <_puts_r+0x9a>
 800529e:	89a3      	ldrh	r3, [r4, #12]
 80052a0:	059b      	lsls	r3, r3, #22
 80052a2:	d402      	bmi.n	80052aa <_puts_r+0x9a>
 80052a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052a6:	f000 fad2 	bl	800584e <__retarget_lock_release_recursive>
 80052aa:	4628      	mov	r0, r5
 80052ac:	bd70      	pop	{r4, r5, r6, pc}
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	da04      	bge.n	80052bc <_puts_r+0xac>
 80052b2:	69a2      	ldr	r2, [r4, #24]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	dc06      	bgt.n	80052c6 <_puts_r+0xb6>
 80052b8:	290a      	cmp	r1, #10
 80052ba:	d004      	beq.n	80052c6 <_puts_r+0xb6>
 80052bc:	6823      	ldr	r3, [r4, #0]
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	6022      	str	r2, [r4, #0]
 80052c2:	7019      	strb	r1, [r3, #0]
 80052c4:	e7c5      	b.n	8005252 <_puts_r+0x42>
 80052c6:	4622      	mov	r2, r4
 80052c8:	4628      	mov	r0, r5
 80052ca:	f000 f847 	bl	800535c <__swbuf_r>
 80052ce:	3001      	adds	r0, #1
 80052d0:	d1bf      	bne.n	8005252 <_puts_r+0x42>
 80052d2:	e7df      	b.n	8005294 <_puts_r+0x84>
 80052d4:	6823      	ldr	r3, [r4, #0]
 80052d6:	250a      	movs	r5, #10
 80052d8:	1c5a      	adds	r2, r3, #1
 80052da:	6022      	str	r2, [r4, #0]
 80052dc:	701d      	strb	r5, [r3, #0]
 80052de:	e7db      	b.n	8005298 <_puts_r+0x88>
 80052e0:	0802a128 	.word	0x0802a128
 80052e4:	0802a148 	.word	0x0802a148
 80052e8:	0802a108 	.word	0x0802a108

080052ec <puts>:
 80052ec:	4b02      	ldr	r3, [pc, #8]	; (80052f8 <puts+0xc>)
 80052ee:	4601      	mov	r1, r0
 80052f0:	6818      	ldr	r0, [r3, #0]
 80052f2:	f7ff bf8d 	b.w	8005210 <_puts_r>
 80052f6:	bf00      	nop
 80052f8:	20000a14 	.word	0x20000a14

080052fc <_sbrk_r>:
 80052fc:	b538      	push	{r3, r4, r5, lr}
 80052fe:	4d06      	ldr	r5, [pc, #24]	; (8005318 <_sbrk_r+0x1c>)
 8005300:	2300      	movs	r3, #0
 8005302:	4604      	mov	r4, r0
 8005304:	4608      	mov	r0, r1
 8005306:	602b      	str	r3, [r5, #0]
 8005308:	f7fb fd80 	bl	8000e0c <_sbrk>
 800530c:	1c43      	adds	r3, r0, #1
 800530e:	d102      	bne.n	8005316 <_sbrk_r+0x1a>
 8005310:	682b      	ldr	r3, [r5, #0]
 8005312:	b103      	cbz	r3, 8005316 <_sbrk_r+0x1a>
 8005314:	6023      	str	r3, [r4, #0]
 8005316:	bd38      	pop	{r3, r4, r5, pc}
 8005318:	2000ca54 	.word	0x2000ca54

0800531c <siprintf>:
 800531c:	b40e      	push	{r1, r2, r3}
 800531e:	b500      	push	{lr}
 8005320:	b09c      	sub	sp, #112	; 0x70
 8005322:	ab1d      	add	r3, sp, #116	; 0x74
 8005324:	9002      	str	r0, [sp, #8]
 8005326:	9006      	str	r0, [sp, #24]
 8005328:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800532c:	4809      	ldr	r0, [pc, #36]	; (8005354 <siprintf+0x38>)
 800532e:	9107      	str	r1, [sp, #28]
 8005330:	9104      	str	r1, [sp, #16]
 8005332:	4909      	ldr	r1, [pc, #36]	; (8005358 <siprintf+0x3c>)
 8005334:	f853 2b04 	ldr.w	r2, [r3], #4
 8005338:	9105      	str	r1, [sp, #20]
 800533a:	6800      	ldr	r0, [r0, #0]
 800533c:	9301      	str	r3, [sp, #4]
 800533e:	a902      	add	r1, sp, #8
 8005340:	f000 fb82 	bl	8005a48 <_svfiprintf_r>
 8005344:	9b02      	ldr	r3, [sp, #8]
 8005346:	2200      	movs	r2, #0
 8005348:	701a      	strb	r2, [r3, #0]
 800534a:	b01c      	add	sp, #112	; 0x70
 800534c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005350:	b003      	add	sp, #12
 8005352:	4770      	bx	lr
 8005354:	20000a14 	.word	0x20000a14
 8005358:	ffff0208 	.word	0xffff0208

0800535c <__swbuf_r>:
 800535c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535e:	460e      	mov	r6, r1
 8005360:	4614      	mov	r4, r2
 8005362:	4605      	mov	r5, r0
 8005364:	b118      	cbz	r0, 800536e <__swbuf_r+0x12>
 8005366:	6983      	ldr	r3, [r0, #24]
 8005368:	b90b      	cbnz	r3, 800536e <__swbuf_r+0x12>
 800536a:	f000 f9d1 	bl	8005710 <__sinit>
 800536e:	4b21      	ldr	r3, [pc, #132]	; (80053f4 <__swbuf_r+0x98>)
 8005370:	429c      	cmp	r4, r3
 8005372:	d12b      	bne.n	80053cc <__swbuf_r+0x70>
 8005374:	686c      	ldr	r4, [r5, #4]
 8005376:	69a3      	ldr	r3, [r4, #24]
 8005378:	60a3      	str	r3, [r4, #8]
 800537a:	89a3      	ldrh	r3, [r4, #12]
 800537c:	071a      	lsls	r2, r3, #28
 800537e:	d52f      	bpl.n	80053e0 <__swbuf_r+0x84>
 8005380:	6923      	ldr	r3, [r4, #16]
 8005382:	b36b      	cbz	r3, 80053e0 <__swbuf_r+0x84>
 8005384:	6923      	ldr	r3, [r4, #16]
 8005386:	6820      	ldr	r0, [r4, #0]
 8005388:	1ac0      	subs	r0, r0, r3
 800538a:	6963      	ldr	r3, [r4, #20]
 800538c:	b2f6      	uxtb	r6, r6
 800538e:	4283      	cmp	r3, r0
 8005390:	4637      	mov	r7, r6
 8005392:	dc04      	bgt.n	800539e <__swbuf_r+0x42>
 8005394:	4621      	mov	r1, r4
 8005396:	4628      	mov	r0, r5
 8005398:	f000 f926 	bl	80055e8 <_fflush_r>
 800539c:	bb30      	cbnz	r0, 80053ec <__swbuf_r+0x90>
 800539e:	68a3      	ldr	r3, [r4, #8]
 80053a0:	3b01      	subs	r3, #1
 80053a2:	60a3      	str	r3, [r4, #8]
 80053a4:	6823      	ldr	r3, [r4, #0]
 80053a6:	1c5a      	adds	r2, r3, #1
 80053a8:	6022      	str	r2, [r4, #0]
 80053aa:	701e      	strb	r6, [r3, #0]
 80053ac:	6963      	ldr	r3, [r4, #20]
 80053ae:	3001      	adds	r0, #1
 80053b0:	4283      	cmp	r3, r0
 80053b2:	d004      	beq.n	80053be <__swbuf_r+0x62>
 80053b4:	89a3      	ldrh	r3, [r4, #12]
 80053b6:	07db      	lsls	r3, r3, #31
 80053b8:	d506      	bpl.n	80053c8 <__swbuf_r+0x6c>
 80053ba:	2e0a      	cmp	r6, #10
 80053bc:	d104      	bne.n	80053c8 <__swbuf_r+0x6c>
 80053be:	4621      	mov	r1, r4
 80053c0:	4628      	mov	r0, r5
 80053c2:	f000 f911 	bl	80055e8 <_fflush_r>
 80053c6:	b988      	cbnz	r0, 80053ec <__swbuf_r+0x90>
 80053c8:	4638      	mov	r0, r7
 80053ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053cc:	4b0a      	ldr	r3, [pc, #40]	; (80053f8 <__swbuf_r+0x9c>)
 80053ce:	429c      	cmp	r4, r3
 80053d0:	d101      	bne.n	80053d6 <__swbuf_r+0x7a>
 80053d2:	68ac      	ldr	r4, [r5, #8]
 80053d4:	e7cf      	b.n	8005376 <__swbuf_r+0x1a>
 80053d6:	4b09      	ldr	r3, [pc, #36]	; (80053fc <__swbuf_r+0xa0>)
 80053d8:	429c      	cmp	r4, r3
 80053da:	bf08      	it	eq
 80053dc:	68ec      	ldreq	r4, [r5, #12]
 80053de:	e7ca      	b.n	8005376 <__swbuf_r+0x1a>
 80053e0:	4621      	mov	r1, r4
 80053e2:	4628      	mov	r0, r5
 80053e4:	f000 f80c 	bl	8005400 <__swsetup_r>
 80053e8:	2800      	cmp	r0, #0
 80053ea:	d0cb      	beq.n	8005384 <__swbuf_r+0x28>
 80053ec:	f04f 37ff 	mov.w	r7, #4294967295
 80053f0:	e7ea      	b.n	80053c8 <__swbuf_r+0x6c>
 80053f2:	bf00      	nop
 80053f4:	0802a128 	.word	0x0802a128
 80053f8:	0802a148 	.word	0x0802a148
 80053fc:	0802a108 	.word	0x0802a108

08005400 <__swsetup_r>:
 8005400:	4b32      	ldr	r3, [pc, #200]	; (80054cc <__swsetup_r+0xcc>)
 8005402:	b570      	push	{r4, r5, r6, lr}
 8005404:	681d      	ldr	r5, [r3, #0]
 8005406:	4606      	mov	r6, r0
 8005408:	460c      	mov	r4, r1
 800540a:	b125      	cbz	r5, 8005416 <__swsetup_r+0x16>
 800540c:	69ab      	ldr	r3, [r5, #24]
 800540e:	b913      	cbnz	r3, 8005416 <__swsetup_r+0x16>
 8005410:	4628      	mov	r0, r5
 8005412:	f000 f97d 	bl	8005710 <__sinit>
 8005416:	4b2e      	ldr	r3, [pc, #184]	; (80054d0 <__swsetup_r+0xd0>)
 8005418:	429c      	cmp	r4, r3
 800541a:	d10f      	bne.n	800543c <__swsetup_r+0x3c>
 800541c:	686c      	ldr	r4, [r5, #4]
 800541e:	89a3      	ldrh	r3, [r4, #12]
 8005420:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005424:	0719      	lsls	r1, r3, #28
 8005426:	d42c      	bmi.n	8005482 <__swsetup_r+0x82>
 8005428:	06dd      	lsls	r5, r3, #27
 800542a:	d411      	bmi.n	8005450 <__swsetup_r+0x50>
 800542c:	2309      	movs	r3, #9
 800542e:	6033      	str	r3, [r6, #0]
 8005430:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005434:	81a3      	strh	r3, [r4, #12]
 8005436:	f04f 30ff 	mov.w	r0, #4294967295
 800543a:	e03e      	b.n	80054ba <__swsetup_r+0xba>
 800543c:	4b25      	ldr	r3, [pc, #148]	; (80054d4 <__swsetup_r+0xd4>)
 800543e:	429c      	cmp	r4, r3
 8005440:	d101      	bne.n	8005446 <__swsetup_r+0x46>
 8005442:	68ac      	ldr	r4, [r5, #8]
 8005444:	e7eb      	b.n	800541e <__swsetup_r+0x1e>
 8005446:	4b24      	ldr	r3, [pc, #144]	; (80054d8 <__swsetup_r+0xd8>)
 8005448:	429c      	cmp	r4, r3
 800544a:	bf08      	it	eq
 800544c:	68ec      	ldreq	r4, [r5, #12]
 800544e:	e7e6      	b.n	800541e <__swsetup_r+0x1e>
 8005450:	0758      	lsls	r0, r3, #29
 8005452:	d512      	bpl.n	800547a <__swsetup_r+0x7a>
 8005454:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005456:	b141      	cbz	r1, 800546a <__swsetup_r+0x6a>
 8005458:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800545c:	4299      	cmp	r1, r3
 800545e:	d002      	beq.n	8005466 <__swsetup_r+0x66>
 8005460:	4630      	mov	r0, r6
 8005462:	f7ff fddd 	bl	8005020 <_free_r>
 8005466:	2300      	movs	r3, #0
 8005468:	6363      	str	r3, [r4, #52]	; 0x34
 800546a:	89a3      	ldrh	r3, [r4, #12]
 800546c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005470:	81a3      	strh	r3, [r4, #12]
 8005472:	2300      	movs	r3, #0
 8005474:	6063      	str	r3, [r4, #4]
 8005476:	6923      	ldr	r3, [r4, #16]
 8005478:	6023      	str	r3, [r4, #0]
 800547a:	89a3      	ldrh	r3, [r4, #12]
 800547c:	f043 0308 	orr.w	r3, r3, #8
 8005480:	81a3      	strh	r3, [r4, #12]
 8005482:	6923      	ldr	r3, [r4, #16]
 8005484:	b94b      	cbnz	r3, 800549a <__swsetup_r+0x9a>
 8005486:	89a3      	ldrh	r3, [r4, #12]
 8005488:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800548c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005490:	d003      	beq.n	800549a <__swsetup_r+0x9a>
 8005492:	4621      	mov	r1, r4
 8005494:	4630      	mov	r0, r6
 8005496:	f000 fa01 	bl	800589c <__smakebuf_r>
 800549a:	89a0      	ldrh	r0, [r4, #12]
 800549c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054a0:	f010 0301 	ands.w	r3, r0, #1
 80054a4:	d00a      	beq.n	80054bc <__swsetup_r+0xbc>
 80054a6:	2300      	movs	r3, #0
 80054a8:	60a3      	str	r3, [r4, #8]
 80054aa:	6963      	ldr	r3, [r4, #20]
 80054ac:	425b      	negs	r3, r3
 80054ae:	61a3      	str	r3, [r4, #24]
 80054b0:	6923      	ldr	r3, [r4, #16]
 80054b2:	b943      	cbnz	r3, 80054c6 <__swsetup_r+0xc6>
 80054b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80054b8:	d1ba      	bne.n	8005430 <__swsetup_r+0x30>
 80054ba:	bd70      	pop	{r4, r5, r6, pc}
 80054bc:	0781      	lsls	r1, r0, #30
 80054be:	bf58      	it	pl
 80054c0:	6963      	ldrpl	r3, [r4, #20]
 80054c2:	60a3      	str	r3, [r4, #8]
 80054c4:	e7f4      	b.n	80054b0 <__swsetup_r+0xb0>
 80054c6:	2000      	movs	r0, #0
 80054c8:	e7f7      	b.n	80054ba <__swsetup_r+0xba>
 80054ca:	bf00      	nop
 80054cc:	20000a14 	.word	0x20000a14
 80054d0:	0802a128 	.word	0x0802a128
 80054d4:	0802a148 	.word	0x0802a148
 80054d8:	0802a108 	.word	0x0802a108

080054dc <__sflush_r>:
 80054dc:	898a      	ldrh	r2, [r1, #12]
 80054de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054e2:	4605      	mov	r5, r0
 80054e4:	0710      	lsls	r0, r2, #28
 80054e6:	460c      	mov	r4, r1
 80054e8:	d458      	bmi.n	800559c <__sflush_r+0xc0>
 80054ea:	684b      	ldr	r3, [r1, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	dc05      	bgt.n	80054fc <__sflush_r+0x20>
 80054f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	dc02      	bgt.n	80054fc <__sflush_r+0x20>
 80054f6:	2000      	movs	r0, #0
 80054f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054fe:	2e00      	cmp	r6, #0
 8005500:	d0f9      	beq.n	80054f6 <__sflush_r+0x1a>
 8005502:	2300      	movs	r3, #0
 8005504:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005508:	682f      	ldr	r7, [r5, #0]
 800550a:	602b      	str	r3, [r5, #0]
 800550c:	d032      	beq.n	8005574 <__sflush_r+0x98>
 800550e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005510:	89a3      	ldrh	r3, [r4, #12]
 8005512:	075a      	lsls	r2, r3, #29
 8005514:	d505      	bpl.n	8005522 <__sflush_r+0x46>
 8005516:	6863      	ldr	r3, [r4, #4]
 8005518:	1ac0      	subs	r0, r0, r3
 800551a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800551c:	b10b      	cbz	r3, 8005522 <__sflush_r+0x46>
 800551e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005520:	1ac0      	subs	r0, r0, r3
 8005522:	2300      	movs	r3, #0
 8005524:	4602      	mov	r2, r0
 8005526:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005528:	6a21      	ldr	r1, [r4, #32]
 800552a:	4628      	mov	r0, r5
 800552c:	47b0      	blx	r6
 800552e:	1c43      	adds	r3, r0, #1
 8005530:	89a3      	ldrh	r3, [r4, #12]
 8005532:	d106      	bne.n	8005542 <__sflush_r+0x66>
 8005534:	6829      	ldr	r1, [r5, #0]
 8005536:	291d      	cmp	r1, #29
 8005538:	d82c      	bhi.n	8005594 <__sflush_r+0xb8>
 800553a:	4a2a      	ldr	r2, [pc, #168]	; (80055e4 <__sflush_r+0x108>)
 800553c:	40ca      	lsrs	r2, r1
 800553e:	07d6      	lsls	r6, r2, #31
 8005540:	d528      	bpl.n	8005594 <__sflush_r+0xb8>
 8005542:	2200      	movs	r2, #0
 8005544:	6062      	str	r2, [r4, #4]
 8005546:	04d9      	lsls	r1, r3, #19
 8005548:	6922      	ldr	r2, [r4, #16]
 800554a:	6022      	str	r2, [r4, #0]
 800554c:	d504      	bpl.n	8005558 <__sflush_r+0x7c>
 800554e:	1c42      	adds	r2, r0, #1
 8005550:	d101      	bne.n	8005556 <__sflush_r+0x7a>
 8005552:	682b      	ldr	r3, [r5, #0]
 8005554:	b903      	cbnz	r3, 8005558 <__sflush_r+0x7c>
 8005556:	6560      	str	r0, [r4, #84]	; 0x54
 8005558:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800555a:	602f      	str	r7, [r5, #0]
 800555c:	2900      	cmp	r1, #0
 800555e:	d0ca      	beq.n	80054f6 <__sflush_r+0x1a>
 8005560:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005564:	4299      	cmp	r1, r3
 8005566:	d002      	beq.n	800556e <__sflush_r+0x92>
 8005568:	4628      	mov	r0, r5
 800556a:	f7ff fd59 	bl	8005020 <_free_r>
 800556e:	2000      	movs	r0, #0
 8005570:	6360      	str	r0, [r4, #52]	; 0x34
 8005572:	e7c1      	b.n	80054f8 <__sflush_r+0x1c>
 8005574:	6a21      	ldr	r1, [r4, #32]
 8005576:	2301      	movs	r3, #1
 8005578:	4628      	mov	r0, r5
 800557a:	47b0      	blx	r6
 800557c:	1c41      	adds	r1, r0, #1
 800557e:	d1c7      	bne.n	8005510 <__sflush_r+0x34>
 8005580:	682b      	ldr	r3, [r5, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d0c4      	beq.n	8005510 <__sflush_r+0x34>
 8005586:	2b1d      	cmp	r3, #29
 8005588:	d001      	beq.n	800558e <__sflush_r+0xb2>
 800558a:	2b16      	cmp	r3, #22
 800558c:	d101      	bne.n	8005592 <__sflush_r+0xb6>
 800558e:	602f      	str	r7, [r5, #0]
 8005590:	e7b1      	b.n	80054f6 <__sflush_r+0x1a>
 8005592:	89a3      	ldrh	r3, [r4, #12]
 8005594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005598:	81a3      	strh	r3, [r4, #12]
 800559a:	e7ad      	b.n	80054f8 <__sflush_r+0x1c>
 800559c:	690f      	ldr	r7, [r1, #16]
 800559e:	2f00      	cmp	r7, #0
 80055a0:	d0a9      	beq.n	80054f6 <__sflush_r+0x1a>
 80055a2:	0793      	lsls	r3, r2, #30
 80055a4:	680e      	ldr	r6, [r1, #0]
 80055a6:	bf08      	it	eq
 80055a8:	694b      	ldreq	r3, [r1, #20]
 80055aa:	600f      	str	r7, [r1, #0]
 80055ac:	bf18      	it	ne
 80055ae:	2300      	movne	r3, #0
 80055b0:	eba6 0807 	sub.w	r8, r6, r7
 80055b4:	608b      	str	r3, [r1, #8]
 80055b6:	f1b8 0f00 	cmp.w	r8, #0
 80055ba:	dd9c      	ble.n	80054f6 <__sflush_r+0x1a>
 80055bc:	6a21      	ldr	r1, [r4, #32]
 80055be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80055c0:	4643      	mov	r3, r8
 80055c2:	463a      	mov	r2, r7
 80055c4:	4628      	mov	r0, r5
 80055c6:	47b0      	blx	r6
 80055c8:	2800      	cmp	r0, #0
 80055ca:	dc06      	bgt.n	80055da <__sflush_r+0xfe>
 80055cc:	89a3      	ldrh	r3, [r4, #12]
 80055ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055d2:	81a3      	strh	r3, [r4, #12]
 80055d4:	f04f 30ff 	mov.w	r0, #4294967295
 80055d8:	e78e      	b.n	80054f8 <__sflush_r+0x1c>
 80055da:	4407      	add	r7, r0
 80055dc:	eba8 0800 	sub.w	r8, r8, r0
 80055e0:	e7e9      	b.n	80055b6 <__sflush_r+0xda>
 80055e2:	bf00      	nop
 80055e4:	20400001 	.word	0x20400001

080055e8 <_fflush_r>:
 80055e8:	b538      	push	{r3, r4, r5, lr}
 80055ea:	690b      	ldr	r3, [r1, #16]
 80055ec:	4605      	mov	r5, r0
 80055ee:	460c      	mov	r4, r1
 80055f0:	b913      	cbnz	r3, 80055f8 <_fflush_r+0x10>
 80055f2:	2500      	movs	r5, #0
 80055f4:	4628      	mov	r0, r5
 80055f6:	bd38      	pop	{r3, r4, r5, pc}
 80055f8:	b118      	cbz	r0, 8005602 <_fflush_r+0x1a>
 80055fa:	6983      	ldr	r3, [r0, #24]
 80055fc:	b90b      	cbnz	r3, 8005602 <_fflush_r+0x1a>
 80055fe:	f000 f887 	bl	8005710 <__sinit>
 8005602:	4b14      	ldr	r3, [pc, #80]	; (8005654 <_fflush_r+0x6c>)
 8005604:	429c      	cmp	r4, r3
 8005606:	d11b      	bne.n	8005640 <_fflush_r+0x58>
 8005608:	686c      	ldr	r4, [r5, #4]
 800560a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d0ef      	beq.n	80055f2 <_fflush_r+0xa>
 8005612:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005614:	07d0      	lsls	r0, r2, #31
 8005616:	d404      	bmi.n	8005622 <_fflush_r+0x3a>
 8005618:	0599      	lsls	r1, r3, #22
 800561a:	d402      	bmi.n	8005622 <_fflush_r+0x3a>
 800561c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800561e:	f000 f915 	bl	800584c <__retarget_lock_acquire_recursive>
 8005622:	4628      	mov	r0, r5
 8005624:	4621      	mov	r1, r4
 8005626:	f7ff ff59 	bl	80054dc <__sflush_r>
 800562a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800562c:	07da      	lsls	r2, r3, #31
 800562e:	4605      	mov	r5, r0
 8005630:	d4e0      	bmi.n	80055f4 <_fflush_r+0xc>
 8005632:	89a3      	ldrh	r3, [r4, #12]
 8005634:	059b      	lsls	r3, r3, #22
 8005636:	d4dd      	bmi.n	80055f4 <_fflush_r+0xc>
 8005638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800563a:	f000 f908 	bl	800584e <__retarget_lock_release_recursive>
 800563e:	e7d9      	b.n	80055f4 <_fflush_r+0xc>
 8005640:	4b05      	ldr	r3, [pc, #20]	; (8005658 <_fflush_r+0x70>)
 8005642:	429c      	cmp	r4, r3
 8005644:	d101      	bne.n	800564a <_fflush_r+0x62>
 8005646:	68ac      	ldr	r4, [r5, #8]
 8005648:	e7df      	b.n	800560a <_fflush_r+0x22>
 800564a:	4b04      	ldr	r3, [pc, #16]	; (800565c <_fflush_r+0x74>)
 800564c:	429c      	cmp	r4, r3
 800564e:	bf08      	it	eq
 8005650:	68ec      	ldreq	r4, [r5, #12]
 8005652:	e7da      	b.n	800560a <_fflush_r+0x22>
 8005654:	0802a128 	.word	0x0802a128
 8005658:	0802a148 	.word	0x0802a148
 800565c:	0802a108 	.word	0x0802a108

08005660 <std>:
 8005660:	2300      	movs	r3, #0
 8005662:	b510      	push	{r4, lr}
 8005664:	4604      	mov	r4, r0
 8005666:	e9c0 3300 	strd	r3, r3, [r0]
 800566a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800566e:	6083      	str	r3, [r0, #8]
 8005670:	8181      	strh	r1, [r0, #12]
 8005672:	6643      	str	r3, [r0, #100]	; 0x64
 8005674:	81c2      	strh	r2, [r0, #14]
 8005676:	6183      	str	r3, [r0, #24]
 8005678:	4619      	mov	r1, r3
 800567a:	2208      	movs	r2, #8
 800567c:	305c      	adds	r0, #92	; 0x5c
 800567e:	f7ff fcc7 	bl	8005010 <memset>
 8005682:	4b05      	ldr	r3, [pc, #20]	; (8005698 <std+0x38>)
 8005684:	6263      	str	r3, [r4, #36]	; 0x24
 8005686:	4b05      	ldr	r3, [pc, #20]	; (800569c <std+0x3c>)
 8005688:	62a3      	str	r3, [r4, #40]	; 0x28
 800568a:	4b05      	ldr	r3, [pc, #20]	; (80056a0 <std+0x40>)
 800568c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800568e:	4b05      	ldr	r3, [pc, #20]	; (80056a4 <std+0x44>)
 8005690:	6224      	str	r4, [r4, #32]
 8005692:	6323      	str	r3, [r4, #48]	; 0x30
 8005694:	bd10      	pop	{r4, pc}
 8005696:	bf00      	nop
 8005698:	08006225 	.word	0x08006225
 800569c:	08006247 	.word	0x08006247
 80056a0:	0800627f 	.word	0x0800627f
 80056a4:	080062a3 	.word	0x080062a3

080056a8 <_cleanup_r>:
 80056a8:	4901      	ldr	r1, [pc, #4]	; (80056b0 <_cleanup_r+0x8>)
 80056aa:	f000 b8af 	b.w	800580c <_fwalk_reent>
 80056ae:	bf00      	nop
 80056b0:	080055e9 	.word	0x080055e9

080056b4 <__sfmoreglue>:
 80056b4:	b570      	push	{r4, r5, r6, lr}
 80056b6:	2268      	movs	r2, #104	; 0x68
 80056b8:	1e4d      	subs	r5, r1, #1
 80056ba:	4355      	muls	r5, r2
 80056bc:	460e      	mov	r6, r1
 80056be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80056c2:	f7ff fd19 	bl	80050f8 <_malloc_r>
 80056c6:	4604      	mov	r4, r0
 80056c8:	b140      	cbz	r0, 80056dc <__sfmoreglue+0x28>
 80056ca:	2100      	movs	r1, #0
 80056cc:	e9c0 1600 	strd	r1, r6, [r0]
 80056d0:	300c      	adds	r0, #12
 80056d2:	60a0      	str	r0, [r4, #8]
 80056d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80056d8:	f7ff fc9a 	bl	8005010 <memset>
 80056dc:	4620      	mov	r0, r4
 80056de:	bd70      	pop	{r4, r5, r6, pc}

080056e0 <__sfp_lock_acquire>:
 80056e0:	4801      	ldr	r0, [pc, #4]	; (80056e8 <__sfp_lock_acquire+0x8>)
 80056e2:	f000 b8b3 	b.w	800584c <__retarget_lock_acquire_recursive>
 80056e6:	bf00      	nop
 80056e8:	2000ca51 	.word	0x2000ca51

080056ec <__sfp_lock_release>:
 80056ec:	4801      	ldr	r0, [pc, #4]	; (80056f4 <__sfp_lock_release+0x8>)
 80056ee:	f000 b8ae 	b.w	800584e <__retarget_lock_release_recursive>
 80056f2:	bf00      	nop
 80056f4:	2000ca51 	.word	0x2000ca51

080056f8 <__sinit_lock_acquire>:
 80056f8:	4801      	ldr	r0, [pc, #4]	; (8005700 <__sinit_lock_acquire+0x8>)
 80056fa:	f000 b8a7 	b.w	800584c <__retarget_lock_acquire_recursive>
 80056fe:	bf00      	nop
 8005700:	2000ca52 	.word	0x2000ca52

08005704 <__sinit_lock_release>:
 8005704:	4801      	ldr	r0, [pc, #4]	; (800570c <__sinit_lock_release+0x8>)
 8005706:	f000 b8a2 	b.w	800584e <__retarget_lock_release_recursive>
 800570a:	bf00      	nop
 800570c:	2000ca52 	.word	0x2000ca52

08005710 <__sinit>:
 8005710:	b510      	push	{r4, lr}
 8005712:	4604      	mov	r4, r0
 8005714:	f7ff fff0 	bl	80056f8 <__sinit_lock_acquire>
 8005718:	69a3      	ldr	r3, [r4, #24]
 800571a:	b11b      	cbz	r3, 8005724 <__sinit+0x14>
 800571c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005720:	f7ff bff0 	b.w	8005704 <__sinit_lock_release>
 8005724:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005728:	6523      	str	r3, [r4, #80]	; 0x50
 800572a:	4b13      	ldr	r3, [pc, #76]	; (8005778 <__sinit+0x68>)
 800572c:	4a13      	ldr	r2, [pc, #76]	; (800577c <__sinit+0x6c>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	62a2      	str	r2, [r4, #40]	; 0x28
 8005732:	42a3      	cmp	r3, r4
 8005734:	bf04      	itt	eq
 8005736:	2301      	moveq	r3, #1
 8005738:	61a3      	streq	r3, [r4, #24]
 800573a:	4620      	mov	r0, r4
 800573c:	f000 f820 	bl	8005780 <__sfp>
 8005740:	6060      	str	r0, [r4, #4]
 8005742:	4620      	mov	r0, r4
 8005744:	f000 f81c 	bl	8005780 <__sfp>
 8005748:	60a0      	str	r0, [r4, #8]
 800574a:	4620      	mov	r0, r4
 800574c:	f000 f818 	bl	8005780 <__sfp>
 8005750:	2200      	movs	r2, #0
 8005752:	60e0      	str	r0, [r4, #12]
 8005754:	2104      	movs	r1, #4
 8005756:	6860      	ldr	r0, [r4, #4]
 8005758:	f7ff ff82 	bl	8005660 <std>
 800575c:	68a0      	ldr	r0, [r4, #8]
 800575e:	2201      	movs	r2, #1
 8005760:	2109      	movs	r1, #9
 8005762:	f7ff ff7d 	bl	8005660 <std>
 8005766:	68e0      	ldr	r0, [r4, #12]
 8005768:	2202      	movs	r2, #2
 800576a:	2112      	movs	r1, #18
 800576c:	f7ff ff78 	bl	8005660 <std>
 8005770:	2301      	movs	r3, #1
 8005772:	61a3      	str	r3, [r4, #24]
 8005774:	e7d2      	b.n	800571c <__sinit+0xc>
 8005776:	bf00      	nop
 8005778:	0802a104 	.word	0x0802a104
 800577c:	080056a9 	.word	0x080056a9

08005780 <__sfp>:
 8005780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005782:	4607      	mov	r7, r0
 8005784:	f7ff ffac 	bl	80056e0 <__sfp_lock_acquire>
 8005788:	4b1e      	ldr	r3, [pc, #120]	; (8005804 <__sfp+0x84>)
 800578a:	681e      	ldr	r6, [r3, #0]
 800578c:	69b3      	ldr	r3, [r6, #24]
 800578e:	b913      	cbnz	r3, 8005796 <__sfp+0x16>
 8005790:	4630      	mov	r0, r6
 8005792:	f7ff ffbd 	bl	8005710 <__sinit>
 8005796:	3648      	adds	r6, #72	; 0x48
 8005798:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800579c:	3b01      	subs	r3, #1
 800579e:	d503      	bpl.n	80057a8 <__sfp+0x28>
 80057a0:	6833      	ldr	r3, [r6, #0]
 80057a2:	b30b      	cbz	r3, 80057e8 <__sfp+0x68>
 80057a4:	6836      	ldr	r6, [r6, #0]
 80057a6:	e7f7      	b.n	8005798 <__sfp+0x18>
 80057a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80057ac:	b9d5      	cbnz	r5, 80057e4 <__sfp+0x64>
 80057ae:	4b16      	ldr	r3, [pc, #88]	; (8005808 <__sfp+0x88>)
 80057b0:	60e3      	str	r3, [r4, #12]
 80057b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80057b6:	6665      	str	r5, [r4, #100]	; 0x64
 80057b8:	f000 f847 	bl	800584a <__retarget_lock_init_recursive>
 80057bc:	f7ff ff96 	bl	80056ec <__sfp_lock_release>
 80057c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80057c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80057c8:	6025      	str	r5, [r4, #0]
 80057ca:	61a5      	str	r5, [r4, #24]
 80057cc:	2208      	movs	r2, #8
 80057ce:	4629      	mov	r1, r5
 80057d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80057d4:	f7ff fc1c 	bl	8005010 <memset>
 80057d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80057dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80057e0:	4620      	mov	r0, r4
 80057e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057e4:	3468      	adds	r4, #104	; 0x68
 80057e6:	e7d9      	b.n	800579c <__sfp+0x1c>
 80057e8:	2104      	movs	r1, #4
 80057ea:	4638      	mov	r0, r7
 80057ec:	f7ff ff62 	bl	80056b4 <__sfmoreglue>
 80057f0:	4604      	mov	r4, r0
 80057f2:	6030      	str	r0, [r6, #0]
 80057f4:	2800      	cmp	r0, #0
 80057f6:	d1d5      	bne.n	80057a4 <__sfp+0x24>
 80057f8:	f7ff ff78 	bl	80056ec <__sfp_lock_release>
 80057fc:	230c      	movs	r3, #12
 80057fe:	603b      	str	r3, [r7, #0]
 8005800:	e7ee      	b.n	80057e0 <__sfp+0x60>
 8005802:	bf00      	nop
 8005804:	0802a104 	.word	0x0802a104
 8005808:	ffff0001 	.word	0xffff0001

0800580c <_fwalk_reent>:
 800580c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005810:	4606      	mov	r6, r0
 8005812:	4688      	mov	r8, r1
 8005814:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005818:	2700      	movs	r7, #0
 800581a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800581e:	f1b9 0901 	subs.w	r9, r9, #1
 8005822:	d505      	bpl.n	8005830 <_fwalk_reent+0x24>
 8005824:	6824      	ldr	r4, [r4, #0]
 8005826:	2c00      	cmp	r4, #0
 8005828:	d1f7      	bne.n	800581a <_fwalk_reent+0xe>
 800582a:	4638      	mov	r0, r7
 800582c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005830:	89ab      	ldrh	r3, [r5, #12]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d907      	bls.n	8005846 <_fwalk_reent+0x3a>
 8005836:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800583a:	3301      	adds	r3, #1
 800583c:	d003      	beq.n	8005846 <_fwalk_reent+0x3a>
 800583e:	4629      	mov	r1, r5
 8005840:	4630      	mov	r0, r6
 8005842:	47c0      	blx	r8
 8005844:	4307      	orrs	r7, r0
 8005846:	3568      	adds	r5, #104	; 0x68
 8005848:	e7e9      	b.n	800581e <_fwalk_reent+0x12>

0800584a <__retarget_lock_init_recursive>:
 800584a:	4770      	bx	lr

0800584c <__retarget_lock_acquire_recursive>:
 800584c:	4770      	bx	lr

0800584e <__retarget_lock_release_recursive>:
 800584e:	4770      	bx	lr

08005850 <__swhatbuf_r>:
 8005850:	b570      	push	{r4, r5, r6, lr}
 8005852:	460e      	mov	r6, r1
 8005854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005858:	2900      	cmp	r1, #0
 800585a:	b096      	sub	sp, #88	; 0x58
 800585c:	4614      	mov	r4, r2
 800585e:	461d      	mov	r5, r3
 8005860:	da08      	bge.n	8005874 <__swhatbuf_r+0x24>
 8005862:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	602a      	str	r2, [r5, #0]
 800586a:	061a      	lsls	r2, r3, #24
 800586c:	d410      	bmi.n	8005890 <__swhatbuf_r+0x40>
 800586e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005872:	e00e      	b.n	8005892 <__swhatbuf_r+0x42>
 8005874:	466a      	mov	r2, sp
 8005876:	f000 fd3b 	bl	80062f0 <_fstat_r>
 800587a:	2800      	cmp	r0, #0
 800587c:	dbf1      	blt.n	8005862 <__swhatbuf_r+0x12>
 800587e:	9a01      	ldr	r2, [sp, #4]
 8005880:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005884:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005888:	425a      	negs	r2, r3
 800588a:	415a      	adcs	r2, r3
 800588c:	602a      	str	r2, [r5, #0]
 800588e:	e7ee      	b.n	800586e <__swhatbuf_r+0x1e>
 8005890:	2340      	movs	r3, #64	; 0x40
 8005892:	2000      	movs	r0, #0
 8005894:	6023      	str	r3, [r4, #0]
 8005896:	b016      	add	sp, #88	; 0x58
 8005898:	bd70      	pop	{r4, r5, r6, pc}
	...

0800589c <__smakebuf_r>:
 800589c:	898b      	ldrh	r3, [r1, #12]
 800589e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80058a0:	079d      	lsls	r5, r3, #30
 80058a2:	4606      	mov	r6, r0
 80058a4:	460c      	mov	r4, r1
 80058a6:	d507      	bpl.n	80058b8 <__smakebuf_r+0x1c>
 80058a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80058ac:	6023      	str	r3, [r4, #0]
 80058ae:	6123      	str	r3, [r4, #16]
 80058b0:	2301      	movs	r3, #1
 80058b2:	6163      	str	r3, [r4, #20]
 80058b4:	b002      	add	sp, #8
 80058b6:	bd70      	pop	{r4, r5, r6, pc}
 80058b8:	ab01      	add	r3, sp, #4
 80058ba:	466a      	mov	r2, sp
 80058bc:	f7ff ffc8 	bl	8005850 <__swhatbuf_r>
 80058c0:	9900      	ldr	r1, [sp, #0]
 80058c2:	4605      	mov	r5, r0
 80058c4:	4630      	mov	r0, r6
 80058c6:	f7ff fc17 	bl	80050f8 <_malloc_r>
 80058ca:	b948      	cbnz	r0, 80058e0 <__smakebuf_r+0x44>
 80058cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058d0:	059a      	lsls	r2, r3, #22
 80058d2:	d4ef      	bmi.n	80058b4 <__smakebuf_r+0x18>
 80058d4:	f023 0303 	bic.w	r3, r3, #3
 80058d8:	f043 0302 	orr.w	r3, r3, #2
 80058dc:	81a3      	strh	r3, [r4, #12]
 80058de:	e7e3      	b.n	80058a8 <__smakebuf_r+0xc>
 80058e0:	4b0d      	ldr	r3, [pc, #52]	; (8005918 <__smakebuf_r+0x7c>)
 80058e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80058e4:	89a3      	ldrh	r3, [r4, #12]
 80058e6:	6020      	str	r0, [r4, #0]
 80058e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ec:	81a3      	strh	r3, [r4, #12]
 80058ee:	9b00      	ldr	r3, [sp, #0]
 80058f0:	6163      	str	r3, [r4, #20]
 80058f2:	9b01      	ldr	r3, [sp, #4]
 80058f4:	6120      	str	r0, [r4, #16]
 80058f6:	b15b      	cbz	r3, 8005910 <__smakebuf_r+0x74>
 80058f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058fc:	4630      	mov	r0, r6
 80058fe:	f000 fd09 	bl	8006314 <_isatty_r>
 8005902:	b128      	cbz	r0, 8005910 <__smakebuf_r+0x74>
 8005904:	89a3      	ldrh	r3, [r4, #12]
 8005906:	f023 0303 	bic.w	r3, r3, #3
 800590a:	f043 0301 	orr.w	r3, r3, #1
 800590e:	81a3      	strh	r3, [r4, #12]
 8005910:	89a0      	ldrh	r0, [r4, #12]
 8005912:	4305      	orrs	r5, r0
 8005914:	81a5      	strh	r5, [r4, #12]
 8005916:	e7cd      	b.n	80058b4 <__smakebuf_r+0x18>
 8005918:	080056a9 	.word	0x080056a9

0800591c <__malloc_lock>:
 800591c:	4801      	ldr	r0, [pc, #4]	; (8005924 <__malloc_lock+0x8>)
 800591e:	f7ff bf95 	b.w	800584c <__retarget_lock_acquire_recursive>
 8005922:	bf00      	nop
 8005924:	2000ca50 	.word	0x2000ca50

08005928 <__malloc_unlock>:
 8005928:	4801      	ldr	r0, [pc, #4]	; (8005930 <__malloc_unlock+0x8>)
 800592a:	f7ff bf90 	b.w	800584e <__retarget_lock_release_recursive>
 800592e:	bf00      	nop
 8005930:	2000ca50 	.word	0x2000ca50

08005934 <_realloc_r>:
 8005934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005938:	4680      	mov	r8, r0
 800593a:	4614      	mov	r4, r2
 800593c:	460e      	mov	r6, r1
 800593e:	b921      	cbnz	r1, 800594a <_realloc_r+0x16>
 8005940:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005944:	4611      	mov	r1, r2
 8005946:	f7ff bbd7 	b.w	80050f8 <_malloc_r>
 800594a:	b92a      	cbnz	r2, 8005958 <_realloc_r+0x24>
 800594c:	f7ff fb68 	bl	8005020 <_free_r>
 8005950:	4625      	mov	r5, r4
 8005952:	4628      	mov	r0, r5
 8005954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005958:	f000 fd18 	bl	800638c <_malloc_usable_size_r>
 800595c:	4284      	cmp	r4, r0
 800595e:	4607      	mov	r7, r0
 8005960:	d802      	bhi.n	8005968 <_realloc_r+0x34>
 8005962:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005966:	d812      	bhi.n	800598e <_realloc_r+0x5a>
 8005968:	4621      	mov	r1, r4
 800596a:	4640      	mov	r0, r8
 800596c:	f7ff fbc4 	bl	80050f8 <_malloc_r>
 8005970:	4605      	mov	r5, r0
 8005972:	2800      	cmp	r0, #0
 8005974:	d0ed      	beq.n	8005952 <_realloc_r+0x1e>
 8005976:	42bc      	cmp	r4, r7
 8005978:	4622      	mov	r2, r4
 800597a:	4631      	mov	r1, r6
 800597c:	bf28      	it	cs
 800597e:	463a      	movcs	r2, r7
 8005980:	f7ff fb38 	bl	8004ff4 <memcpy>
 8005984:	4631      	mov	r1, r6
 8005986:	4640      	mov	r0, r8
 8005988:	f7ff fb4a 	bl	8005020 <_free_r>
 800598c:	e7e1      	b.n	8005952 <_realloc_r+0x1e>
 800598e:	4635      	mov	r5, r6
 8005990:	e7df      	b.n	8005952 <_realloc_r+0x1e>

08005992 <__ssputs_r>:
 8005992:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005996:	688e      	ldr	r6, [r1, #8]
 8005998:	429e      	cmp	r6, r3
 800599a:	4682      	mov	sl, r0
 800599c:	460c      	mov	r4, r1
 800599e:	4690      	mov	r8, r2
 80059a0:	461f      	mov	r7, r3
 80059a2:	d838      	bhi.n	8005a16 <__ssputs_r+0x84>
 80059a4:	898a      	ldrh	r2, [r1, #12]
 80059a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80059aa:	d032      	beq.n	8005a12 <__ssputs_r+0x80>
 80059ac:	6825      	ldr	r5, [r4, #0]
 80059ae:	6909      	ldr	r1, [r1, #16]
 80059b0:	eba5 0901 	sub.w	r9, r5, r1
 80059b4:	6965      	ldr	r5, [r4, #20]
 80059b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80059be:	3301      	adds	r3, #1
 80059c0:	444b      	add	r3, r9
 80059c2:	106d      	asrs	r5, r5, #1
 80059c4:	429d      	cmp	r5, r3
 80059c6:	bf38      	it	cc
 80059c8:	461d      	movcc	r5, r3
 80059ca:	0553      	lsls	r3, r2, #21
 80059cc:	d531      	bpl.n	8005a32 <__ssputs_r+0xa0>
 80059ce:	4629      	mov	r1, r5
 80059d0:	f7ff fb92 	bl	80050f8 <_malloc_r>
 80059d4:	4606      	mov	r6, r0
 80059d6:	b950      	cbnz	r0, 80059ee <__ssputs_r+0x5c>
 80059d8:	230c      	movs	r3, #12
 80059da:	f8ca 3000 	str.w	r3, [sl]
 80059de:	89a3      	ldrh	r3, [r4, #12]
 80059e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059e4:	81a3      	strh	r3, [r4, #12]
 80059e6:	f04f 30ff 	mov.w	r0, #4294967295
 80059ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ee:	6921      	ldr	r1, [r4, #16]
 80059f0:	464a      	mov	r2, r9
 80059f2:	f7ff faff 	bl	8004ff4 <memcpy>
 80059f6:	89a3      	ldrh	r3, [r4, #12]
 80059f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80059fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a00:	81a3      	strh	r3, [r4, #12]
 8005a02:	6126      	str	r6, [r4, #16]
 8005a04:	6165      	str	r5, [r4, #20]
 8005a06:	444e      	add	r6, r9
 8005a08:	eba5 0509 	sub.w	r5, r5, r9
 8005a0c:	6026      	str	r6, [r4, #0]
 8005a0e:	60a5      	str	r5, [r4, #8]
 8005a10:	463e      	mov	r6, r7
 8005a12:	42be      	cmp	r6, r7
 8005a14:	d900      	bls.n	8005a18 <__ssputs_r+0x86>
 8005a16:	463e      	mov	r6, r7
 8005a18:	6820      	ldr	r0, [r4, #0]
 8005a1a:	4632      	mov	r2, r6
 8005a1c:	4641      	mov	r1, r8
 8005a1e:	f000 fc9b 	bl	8006358 <memmove>
 8005a22:	68a3      	ldr	r3, [r4, #8]
 8005a24:	1b9b      	subs	r3, r3, r6
 8005a26:	60a3      	str	r3, [r4, #8]
 8005a28:	6823      	ldr	r3, [r4, #0]
 8005a2a:	4433      	add	r3, r6
 8005a2c:	6023      	str	r3, [r4, #0]
 8005a2e:	2000      	movs	r0, #0
 8005a30:	e7db      	b.n	80059ea <__ssputs_r+0x58>
 8005a32:	462a      	mov	r2, r5
 8005a34:	f7ff ff7e 	bl	8005934 <_realloc_r>
 8005a38:	4606      	mov	r6, r0
 8005a3a:	2800      	cmp	r0, #0
 8005a3c:	d1e1      	bne.n	8005a02 <__ssputs_r+0x70>
 8005a3e:	6921      	ldr	r1, [r4, #16]
 8005a40:	4650      	mov	r0, sl
 8005a42:	f7ff faed 	bl	8005020 <_free_r>
 8005a46:	e7c7      	b.n	80059d8 <__ssputs_r+0x46>

08005a48 <_svfiprintf_r>:
 8005a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a4c:	4698      	mov	r8, r3
 8005a4e:	898b      	ldrh	r3, [r1, #12]
 8005a50:	061b      	lsls	r3, r3, #24
 8005a52:	b09d      	sub	sp, #116	; 0x74
 8005a54:	4607      	mov	r7, r0
 8005a56:	460d      	mov	r5, r1
 8005a58:	4614      	mov	r4, r2
 8005a5a:	d50e      	bpl.n	8005a7a <_svfiprintf_r+0x32>
 8005a5c:	690b      	ldr	r3, [r1, #16]
 8005a5e:	b963      	cbnz	r3, 8005a7a <_svfiprintf_r+0x32>
 8005a60:	2140      	movs	r1, #64	; 0x40
 8005a62:	f7ff fb49 	bl	80050f8 <_malloc_r>
 8005a66:	6028      	str	r0, [r5, #0]
 8005a68:	6128      	str	r0, [r5, #16]
 8005a6a:	b920      	cbnz	r0, 8005a76 <_svfiprintf_r+0x2e>
 8005a6c:	230c      	movs	r3, #12
 8005a6e:	603b      	str	r3, [r7, #0]
 8005a70:	f04f 30ff 	mov.w	r0, #4294967295
 8005a74:	e0d1      	b.n	8005c1a <_svfiprintf_r+0x1d2>
 8005a76:	2340      	movs	r3, #64	; 0x40
 8005a78:	616b      	str	r3, [r5, #20]
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a7e:	2320      	movs	r3, #32
 8005a80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a84:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a88:	2330      	movs	r3, #48	; 0x30
 8005a8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005c34 <_svfiprintf_r+0x1ec>
 8005a8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a92:	f04f 0901 	mov.w	r9, #1
 8005a96:	4623      	mov	r3, r4
 8005a98:	469a      	mov	sl, r3
 8005a9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a9e:	b10a      	cbz	r2, 8005aa4 <_svfiprintf_r+0x5c>
 8005aa0:	2a25      	cmp	r2, #37	; 0x25
 8005aa2:	d1f9      	bne.n	8005a98 <_svfiprintf_r+0x50>
 8005aa4:	ebba 0b04 	subs.w	fp, sl, r4
 8005aa8:	d00b      	beq.n	8005ac2 <_svfiprintf_r+0x7a>
 8005aaa:	465b      	mov	r3, fp
 8005aac:	4622      	mov	r2, r4
 8005aae:	4629      	mov	r1, r5
 8005ab0:	4638      	mov	r0, r7
 8005ab2:	f7ff ff6e 	bl	8005992 <__ssputs_r>
 8005ab6:	3001      	adds	r0, #1
 8005ab8:	f000 80aa 	beq.w	8005c10 <_svfiprintf_r+0x1c8>
 8005abc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005abe:	445a      	add	r2, fp
 8005ac0:	9209      	str	r2, [sp, #36]	; 0x24
 8005ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f000 80a2 	beq.w	8005c10 <_svfiprintf_r+0x1c8>
 8005acc:	2300      	movs	r3, #0
 8005ace:	f04f 32ff 	mov.w	r2, #4294967295
 8005ad2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ad6:	f10a 0a01 	add.w	sl, sl, #1
 8005ada:	9304      	str	r3, [sp, #16]
 8005adc:	9307      	str	r3, [sp, #28]
 8005ade:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ae2:	931a      	str	r3, [sp, #104]	; 0x68
 8005ae4:	4654      	mov	r4, sl
 8005ae6:	2205      	movs	r2, #5
 8005ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aec:	4851      	ldr	r0, [pc, #324]	; (8005c34 <_svfiprintf_r+0x1ec>)
 8005aee:	f7fa fb97 	bl	8000220 <memchr>
 8005af2:	9a04      	ldr	r2, [sp, #16]
 8005af4:	b9d8      	cbnz	r0, 8005b2e <_svfiprintf_r+0xe6>
 8005af6:	06d0      	lsls	r0, r2, #27
 8005af8:	bf44      	itt	mi
 8005afa:	2320      	movmi	r3, #32
 8005afc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b00:	0711      	lsls	r1, r2, #28
 8005b02:	bf44      	itt	mi
 8005b04:	232b      	movmi	r3, #43	; 0x2b
 8005b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8005b0e:	2b2a      	cmp	r3, #42	; 0x2a
 8005b10:	d015      	beq.n	8005b3e <_svfiprintf_r+0xf6>
 8005b12:	9a07      	ldr	r2, [sp, #28]
 8005b14:	4654      	mov	r4, sl
 8005b16:	2000      	movs	r0, #0
 8005b18:	f04f 0c0a 	mov.w	ip, #10
 8005b1c:	4621      	mov	r1, r4
 8005b1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b22:	3b30      	subs	r3, #48	; 0x30
 8005b24:	2b09      	cmp	r3, #9
 8005b26:	d94e      	bls.n	8005bc6 <_svfiprintf_r+0x17e>
 8005b28:	b1b0      	cbz	r0, 8005b58 <_svfiprintf_r+0x110>
 8005b2a:	9207      	str	r2, [sp, #28]
 8005b2c:	e014      	b.n	8005b58 <_svfiprintf_r+0x110>
 8005b2e:	eba0 0308 	sub.w	r3, r0, r8
 8005b32:	fa09 f303 	lsl.w	r3, r9, r3
 8005b36:	4313      	orrs	r3, r2
 8005b38:	9304      	str	r3, [sp, #16]
 8005b3a:	46a2      	mov	sl, r4
 8005b3c:	e7d2      	b.n	8005ae4 <_svfiprintf_r+0x9c>
 8005b3e:	9b03      	ldr	r3, [sp, #12]
 8005b40:	1d19      	adds	r1, r3, #4
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	9103      	str	r1, [sp, #12]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	bfbb      	ittet	lt
 8005b4a:	425b      	neglt	r3, r3
 8005b4c:	f042 0202 	orrlt.w	r2, r2, #2
 8005b50:	9307      	strge	r3, [sp, #28]
 8005b52:	9307      	strlt	r3, [sp, #28]
 8005b54:	bfb8      	it	lt
 8005b56:	9204      	strlt	r2, [sp, #16]
 8005b58:	7823      	ldrb	r3, [r4, #0]
 8005b5a:	2b2e      	cmp	r3, #46	; 0x2e
 8005b5c:	d10c      	bne.n	8005b78 <_svfiprintf_r+0x130>
 8005b5e:	7863      	ldrb	r3, [r4, #1]
 8005b60:	2b2a      	cmp	r3, #42	; 0x2a
 8005b62:	d135      	bne.n	8005bd0 <_svfiprintf_r+0x188>
 8005b64:	9b03      	ldr	r3, [sp, #12]
 8005b66:	1d1a      	adds	r2, r3, #4
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	9203      	str	r2, [sp, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	bfb8      	it	lt
 8005b70:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b74:	3402      	adds	r4, #2
 8005b76:	9305      	str	r3, [sp, #20]
 8005b78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005c44 <_svfiprintf_r+0x1fc>
 8005b7c:	7821      	ldrb	r1, [r4, #0]
 8005b7e:	2203      	movs	r2, #3
 8005b80:	4650      	mov	r0, sl
 8005b82:	f7fa fb4d 	bl	8000220 <memchr>
 8005b86:	b140      	cbz	r0, 8005b9a <_svfiprintf_r+0x152>
 8005b88:	2340      	movs	r3, #64	; 0x40
 8005b8a:	eba0 000a 	sub.w	r0, r0, sl
 8005b8e:	fa03 f000 	lsl.w	r0, r3, r0
 8005b92:	9b04      	ldr	r3, [sp, #16]
 8005b94:	4303      	orrs	r3, r0
 8005b96:	3401      	adds	r4, #1
 8005b98:	9304      	str	r3, [sp, #16]
 8005b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b9e:	4826      	ldr	r0, [pc, #152]	; (8005c38 <_svfiprintf_r+0x1f0>)
 8005ba0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ba4:	2206      	movs	r2, #6
 8005ba6:	f7fa fb3b 	bl	8000220 <memchr>
 8005baa:	2800      	cmp	r0, #0
 8005bac:	d038      	beq.n	8005c20 <_svfiprintf_r+0x1d8>
 8005bae:	4b23      	ldr	r3, [pc, #140]	; (8005c3c <_svfiprintf_r+0x1f4>)
 8005bb0:	bb1b      	cbnz	r3, 8005bfa <_svfiprintf_r+0x1b2>
 8005bb2:	9b03      	ldr	r3, [sp, #12]
 8005bb4:	3307      	adds	r3, #7
 8005bb6:	f023 0307 	bic.w	r3, r3, #7
 8005bba:	3308      	adds	r3, #8
 8005bbc:	9303      	str	r3, [sp, #12]
 8005bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bc0:	4433      	add	r3, r6
 8005bc2:	9309      	str	r3, [sp, #36]	; 0x24
 8005bc4:	e767      	b.n	8005a96 <_svfiprintf_r+0x4e>
 8005bc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bca:	460c      	mov	r4, r1
 8005bcc:	2001      	movs	r0, #1
 8005bce:	e7a5      	b.n	8005b1c <_svfiprintf_r+0xd4>
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	3401      	adds	r4, #1
 8005bd4:	9305      	str	r3, [sp, #20]
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	f04f 0c0a 	mov.w	ip, #10
 8005bdc:	4620      	mov	r0, r4
 8005bde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005be2:	3a30      	subs	r2, #48	; 0x30
 8005be4:	2a09      	cmp	r2, #9
 8005be6:	d903      	bls.n	8005bf0 <_svfiprintf_r+0x1a8>
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d0c5      	beq.n	8005b78 <_svfiprintf_r+0x130>
 8005bec:	9105      	str	r1, [sp, #20]
 8005bee:	e7c3      	b.n	8005b78 <_svfiprintf_r+0x130>
 8005bf0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bf4:	4604      	mov	r4, r0
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e7f0      	b.n	8005bdc <_svfiprintf_r+0x194>
 8005bfa:	ab03      	add	r3, sp, #12
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	462a      	mov	r2, r5
 8005c00:	4b0f      	ldr	r3, [pc, #60]	; (8005c40 <_svfiprintf_r+0x1f8>)
 8005c02:	a904      	add	r1, sp, #16
 8005c04:	4638      	mov	r0, r7
 8005c06:	f3af 8000 	nop.w
 8005c0a:	1c42      	adds	r2, r0, #1
 8005c0c:	4606      	mov	r6, r0
 8005c0e:	d1d6      	bne.n	8005bbe <_svfiprintf_r+0x176>
 8005c10:	89ab      	ldrh	r3, [r5, #12]
 8005c12:	065b      	lsls	r3, r3, #25
 8005c14:	f53f af2c 	bmi.w	8005a70 <_svfiprintf_r+0x28>
 8005c18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c1a:	b01d      	add	sp, #116	; 0x74
 8005c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c20:	ab03      	add	r3, sp, #12
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	462a      	mov	r2, r5
 8005c26:	4b06      	ldr	r3, [pc, #24]	; (8005c40 <_svfiprintf_r+0x1f8>)
 8005c28:	a904      	add	r1, sp, #16
 8005c2a:	4638      	mov	r0, r7
 8005c2c:	f000 f9d4 	bl	8005fd8 <_printf_i>
 8005c30:	e7eb      	b.n	8005c0a <_svfiprintf_r+0x1c2>
 8005c32:	bf00      	nop
 8005c34:	0802a168 	.word	0x0802a168
 8005c38:	0802a172 	.word	0x0802a172
 8005c3c:	00000000 	.word	0x00000000
 8005c40:	08005993 	.word	0x08005993
 8005c44:	0802a16e 	.word	0x0802a16e

08005c48 <__sfputc_r>:
 8005c48:	6893      	ldr	r3, [r2, #8]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	b410      	push	{r4}
 8005c50:	6093      	str	r3, [r2, #8]
 8005c52:	da08      	bge.n	8005c66 <__sfputc_r+0x1e>
 8005c54:	6994      	ldr	r4, [r2, #24]
 8005c56:	42a3      	cmp	r3, r4
 8005c58:	db01      	blt.n	8005c5e <__sfputc_r+0x16>
 8005c5a:	290a      	cmp	r1, #10
 8005c5c:	d103      	bne.n	8005c66 <__sfputc_r+0x1e>
 8005c5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c62:	f7ff bb7b 	b.w	800535c <__swbuf_r>
 8005c66:	6813      	ldr	r3, [r2, #0]
 8005c68:	1c58      	adds	r0, r3, #1
 8005c6a:	6010      	str	r0, [r2, #0]
 8005c6c:	7019      	strb	r1, [r3, #0]
 8005c6e:	4608      	mov	r0, r1
 8005c70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <__sfputs_r>:
 8005c76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c78:	4606      	mov	r6, r0
 8005c7a:	460f      	mov	r7, r1
 8005c7c:	4614      	mov	r4, r2
 8005c7e:	18d5      	adds	r5, r2, r3
 8005c80:	42ac      	cmp	r4, r5
 8005c82:	d101      	bne.n	8005c88 <__sfputs_r+0x12>
 8005c84:	2000      	movs	r0, #0
 8005c86:	e007      	b.n	8005c98 <__sfputs_r+0x22>
 8005c88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c8c:	463a      	mov	r2, r7
 8005c8e:	4630      	mov	r0, r6
 8005c90:	f7ff ffda 	bl	8005c48 <__sfputc_r>
 8005c94:	1c43      	adds	r3, r0, #1
 8005c96:	d1f3      	bne.n	8005c80 <__sfputs_r+0xa>
 8005c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c9c <_vfiprintf_r>:
 8005c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca0:	460d      	mov	r5, r1
 8005ca2:	b09d      	sub	sp, #116	; 0x74
 8005ca4:	4614      	mov	r4, r2
 8005ca6:	4698      	mov	r8, r3
 8005ca8:	4606      	mov	r6, r0
 8005caa:	b118      	cbz	r0, 8005cb4 <_vfiprintf_r+0x18>
 8005cac:	6983      	ldr	r3, [r0, #24]
 8005cae:	b90b      	cbnz	r3, 8005cb4 <_vfiprintf_r+0x18>
 8005cb0:	f7ff fd2e 	bl	8005710 <__sinit>
 8005cb4:	4b89      	ldr	r3, [pc, #548]	; (8005edc <_vfiprintf_r+0x240>)
 8005cb6:	429d      	cmp	r5, r3
 8005cb8:	d11b      	bne.n	8005cf2 <_vfiprintf_r+0x56>
 8005cba:	6875      	ldr	r5, [r6, #4]
 8005cbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cbe:	07d9      	lsls	r1, r3, #31
 8005cc0:	d405      	bmi.n	8005cce <_vfiprintf_r+0x32>
 8005cc2:	89ab      	ldrh	r3, [r5, #12]
 8005cc4:	059a      	lsls	r2, r3, #22
 8005cc6:	d402      	bmi.n	8005cce <_vfiprintf_r+0x32>
 8005cc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cca:	f7ff fdbf 	bl	800584c <__retarget_lock_acquire_recursive>
 8005cce:	89ab      	ldrh	r3, [r5, #12]
 8005cd0:	071b      	lsls	r3, r3, #28
 8005cd2:	d501      	bpl.n	8005cd8 <_vfiprintf_r+0x3c>
 8005cd4:	692b      	ldr	r3, [r5, #16]
 8005cd6:	b9eb      	cbnz	r3, 8005d14 <_vfiprintf_r+0x78>
 8005cd8:	4629      	mov	r1, r5
 8005cda:	4630      	mov	r0, r6
 8005cdc:	f7ff fb90 	bl	8005400 <__swsetup_r>
 8005ce0:	b1c0      	cbz	r0, 8005d14 <_vfiprintf_r+0x78>
 8005ce2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ce4:	07dc      	lsls	r4, r3, #31
 8005ce6:	d50e      	bpl.n	8005d06 <_vfiprintf_r+0x6a>
 8005ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cec:	b01d      	add	sp, #116	; 0x74
 8005cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cf2:	4b7b      	ldr	r3, [pc, #492]	; (8005ee0 <_vfiprintf_r+0x244>)
 8005cf4:	429d      	cmp	r5, r3
 8005cf6:	d101      	bne.n	8005cfc <_vfiprintf_r+0x60>
 8005cf8:	68b5      	ldr	r5, [r6, #8]
 8005cfa:	e7df      	b.n	8005cbc <_vfiprintf_r+0x20>
 8005cfc:	4b79      	ldr	r3, [pc, #484]	; (8005ee4 <_vfiprintf_r+0x248>)
 8005cfe:	429d      	cmp	r5, r3
 8005d00:	bf08      	it	eq
 8005d02:	68f5      	ldreq	r5, [r6, #12]
 8005d04:	e7da      	b.n	8005cbc <_vfiprintf_r+0x20>
 8005d06:	89ab      	ldrh	r3, [r5, #12]
 8005d08:	0598      	lsls	r0, r3, #22
 8005d0a:	d4ed      	bmi.n	8005ce8 <_vfiprintf_r+0x4c>
 8005d0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d0e:	f7ff fd9e 	bl	800584e <__retarget_lock_release_recursive>
 8005d12:	e7e9      	b.n	8005ce8 <_vfiprintf_r+0x4c>
 8005d14:	2300      	movs	r3, #0
 8005d16:	9309      	str	r3, [sp, #36]	; 0x24
 8005d18:	2320      	movs	r3, #32
 8005d1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d22:	2330      	movs	r3, #48	; 0x30
 8005d24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005ee8 <_vfiprintf_r+0x24c>
 8005d28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d2c:	f04f 0901 	mov.w	r9, #1
 8005d30:	4623      	mov	r3, r4
 8005d32:	469a      	mov	sl, r3
 8005d34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d38:	b10a      	cbz	r2, 8005d3e <_vfiprintf_r+0xa2>
 8005d3a:	2a25      	cmp	r2, #37	; 0x25
 8005d3c:	d1f9      	bne.n	8005d32 <_vfiprintf_r+0x96>
 8005d3e:	ebba 0b04 	subs.w	fp, sl, r4
 8005d42:	d00b      	beq.n	8005d5c <_vfiprintf_r+0xc0>
 8005d44:	465b      	mov	r3, fp
 8005d46:	4622      	mov	r2, r4
 8005d48:	4629      	mov	r1, r5
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	f7ff ff93 	bl	8005c76 <__sfputs_r>
 8005d50:	3001      	adds	r0, #1
 8005d52:	f000 80aa 	beq.w	8005eaa <_vfiprintf_r+0x20e>
 8005d56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d58:	445a      	add	r2, fp
 8005d5a:	9209      	str	r2, [sp, #36]	; 0x24
 8005d5c:	f89a 3000 	ldrb.w	r3, [sl]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 80a2 	beq.w	8005eaa <_vfiprintf_r+0x20e>
 8005d66:	2300      	movs	r3, #0
 8005d68:	f04f 32ff 	mov.w	r2, #4294967295
 8005d6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d70:	f10a 0a01 	add.w	sl, sl, #1
 8005d74:	9304      	str	r3, [sp, #16]
 8005d76:	9307      	str	r3, [sp, #28]
 8005d78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d7c:	931a      	str	r3, [sp, #104]	; 0x68
 8005d7e:	4654      	mov	r4, sl
 8005d80:	2205      	movs	r2, #5
 8005d82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d86:	4858      	ldr	r0, [pc, #352]	; (8005ee8 <_vfiprintf_r+0x24c>)
 8005d88:	f7fa fa4a 	bl	8000220 <memchr>
 8005d8c:	9a04      	ldr	r2, [sp, #16]
 8005d8e:	b9d8      	cbnz	r0, 8005dc8 <_vfiprintf_r+0x12c>
 8005d90:	06d1      	lsls	r1, r2, #27
 8005d92:	bf44      	itt	mi
 8005d94:	2320      	movmi	r3, #32
 8005d96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d9a:	0713      	lsls	r3, r2, #28
 8005d9c:	bf44      	itt	mi
 8005d9e:	232b      	movmi	r3, #43	; 0x2b
 8005da0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005da4:	f89a 3000 	ldrb.w	r3, [sl]
 8005da8:	2b2a      	cmp	r3, #42	; 0x2a
 8005daa:	d015      	beq.n	8005dd8 <_vfiprintf_r+0x13c>
 8005dac:	9a07      	ldr	r2, [sp, #28]
 8005dae:	4654      	mov	r4, sl
 8005db0:	2000      	movs	r0, #0
 8005db2:	f04f 0c0a 	mov.w	ip, #10
 8005db6:	4621      	mov	r1, r4
 8005db8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dbc:	3b30      	subs	r3, #48	; 0x30
 8005dbe:	2b09      	cmp	r3, #9
 8005dc0:	d94e      	bls.n	8005e60 <_vfiprintf_r+0x1c4>
 8005dc2:	b1b0      	cbz	r0, 8005df2 <_vfiprintf_r+0x156>
 8005dc4:	9207      	str	r2, [sp, #28]
 8005dc6:	e014      	b.n	8005df2 <_vfiprintf_r+0x156>
 8005dc8:	eba0 0308 	sub.w	r3, r0, r8
 8005dcc:	fa09 f303 	lsl.w	r3, r9, r3
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	9304      	str	r3, [sp, #16]
 8005dd4:	46a2      	mov	sl, r4
 8005dd6:	e7d2      	b.n	8005d7e <_vfiprintf_r+0xe2>
 8005dd8:	9b03      	ldr	r3, [sp, #12]
 8005dda:	1d19      	adds	r1, r3, #4
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	9103      	str	r1, [sp, #12]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	bfbb      	ittet	lt
 8005de4:	425b      	neglt	r3, r3
 8005de6:	f042 0202 	orrlt.w	r2, r2, #2
 8005dea:	9307      	strge	r3, [sp, #28]
 8005dec:	9307      	strlt	r3, [sp, #28]
 8005dee:	bfb8      	it	lt
 8005df0:	9204      	strlt	r2, [sp, #16]
 8005df2:	7823      	ldrb	r3, [r4, #0]
 8005df4:	2b2e      	cmp	r3, #46	; 0x2e
 8005df6:	d10c      	bne.n	8005e12 <_vfiprintf_r+0x176>
 8005df8:	7863      	ldrb	r3, [r4, #1]
 8005dfa:	2b2a      	cmp	r3, #42	; 0x2a
 8005dfc:	d135      	bne.n	8005e6a <_vfiprintf_r+0x1ce>
 8005dfe:	9b03      	ldr	r3, [sp, #12]
 8005e00:	1d1a      	adds	r2, r3, #4
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	9203      	str	r2, [sp, #12]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	bfb8      	it	lt
 8005e0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e0e:	3402      	adds	r4, #2
 8005e10:	9305      	str	r3, [sp, #20]
 8005e12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005ef8 <_vfiprintf_r+0x25c>
 8005e16:	7821      	ldrb	r1, [r4, #0]
 8005e18:	2203      	movs	r2, #3
 8005e1a:	4650      	mov	r0, sl
 8005e1c:	f7fa fa00 	bl	8000220 <memchr>
 8005e20:	b140      	cbz	r0, 8005e34 <_vfiprintf_r+0x198>
 8005e22:	2340      	movs	r3, #64	; 0x40
 8005e24:	eba0 000a 	sub.w	r0, r0, sl
 8005e28:	fa03 f000 	lsl.w	r0, r3, r0
 8005e2c:	9b04      	ldr	r3, [sp, #16]
 8005e2e:	4303      	orrs	r3, r0
 8005e30:	3401      	adds	r4, #1
 8005e32:	9304      	str	r3, [sp, #16]
 8005e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e38:	482c      	ldr	r0, [pc, #176]	; (8005eec <_vfiprintf_r+0x250>)
 8005e3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e3e:	2206      	movs	r2, #6
 8005e40:	f7fa f9ee 	bl	8000220 <memchr>
 8005e44:	2800      	cmp	r0, #0
 8005e46:	d03f      	beq.n	8005ec8 <_vfiprintf_r+0x22c>
 8005e48:	4b29      	ldr	r3, [pc, #164]	; (8005ef0 <_vfiprintf_r+0x254>)
 8005e4a:	bb1b      	cbnz	r3, 8005e94 <_vfiprintf_r+0x1f8>
 8005e4c:	9b03      	ldr	r3, [sp, #12]
 8005e4e:	3307      	adds	r3, #7
 8005e50:	f023 0307 	bic.w	r3, r3, #7
 8005e54:	3308      	adds	r3, #8
 8005e56:	9303      	str	r3, [sp, #12]
 8005e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e5a:	443b      	add	r3, r7
 8005e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8005e5e:	e767      	b.n	8005d30 <_vfiprintf_r+0x94>
 8005e60:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e64:	460c      	mov	r4, r1
 8005e66:	2001      	movs	r0, #1
 8005e68:	e7a5      	b.n	8005db6 <_vfiprintf_r+0x11a>
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	3401      	adds	r4, #1
 8005e6e:	9305      	str	r3, [sp, #20]
 8005e70:	4619      	mov	r1, r3
 8005e72:	f04f 0c0a 	mov.w	ip, #10
 8005e76:	4620      	mov	r0, r4
 8005e78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e7c:	3a30      	subs	r2, #48	; 0x30
 8005e7e:	2a09      	cmp	r2, #9
 8005e80:	d903      	bls.n	8005e8a <_vfiprintf_r+0x1ee>
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d0c5      	beq.n	8005e12 <_vfiprintf_r+0x176>
 8005e86:	9105      	str	r1, [sp, #20]
 8005e88:	e7c3      	b.n	8005e12 <_vfiprintf_r+0x176>
 8005e8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e8e:	4604      	mov	r4, r0
 8005e90:	2301      	movs	r3, #1
 8005e92:	e7f0      	b.n	8005e76 <_vfiprintf_r+0x1da>
 8005e94:	ab03      	add	r3, sp, #12
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	462a      	mov	r2, r5
 8005e9a:	4b16      	ldr	r3, [pc, #88]	; (8005ef4 <_vfiprintf_r+0x258>)
 8005e9c:	a904      	add	r1, sp, #16
 8005e9e:	4630      	mov	r0, r6
 8005ea0:	f3af 8000 	nop.w
 8005ea4:	4607      	mov	r7, r0
 8005ea6:	1c78      	adds	r0, r7, #1
 8005ea8:	d1d6      	bne.n	8005e58 <_vfiprintf_r+0x1bc>
 8005eaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005eac:	07d9      	lsls	r1, r3, #31
 8005eae:	d405      	bmi.n	8005ebc <_vfiprintf_r+0x220>
 8005eb0:	89ab      	ldrh	r3, [r5, #12]
 8005eb2:	059a      	lsls	r2, r3, #22
 8005eb4:	d402      	bmi.n	8005ebc <_vfiprintf_r+0x220>
 8005eb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005eb8:	f7ff fcc9 	bl	800584e <__retarget_lock_release_recursive>
 8005ebc:	89ab      	ldrh	r3, [r5, #12]
 8005ebe:	065b      	lsls	r3, r3, #25
 8005ec0:	f53f af12 	bmi.w	8005ce8 <_vfiprintf_r+0x4c>
 8005ec4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ec6:	e711      	b.n	8005cec <_vfiprintf_r+0x50>
 8005ec8:	ab03      	add	r3, sp, #12
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	462a      	mov	r2, r5
 8005ece:	4b09      	ldr	r3, [pc, #36]	; (8005ef4 <_vfiprintf_r+0x258>)
 8005ed0:	a904      	add	r1, sp, #16
 8005ed2:	4630      	mov	r0, r6
 8005ed4:	f000 f880 	bl	8005fd8 <_printf_i>
 8005ed8:	e7e4      	b.n	8005ea4 <_vfiprintf_r+0x208>
 8005eda:	bf00      	nop
 8005edc:	0802a128 	.word	0x0802a128
 8005ee0:	0802a148 	.word	0x0802a148
 8005ee4:	0802a108 	.word	0x0802a108
 8005ee8:	0802a168 	.word	0x0802a168
 8005eec:	0802a172 	.word	0x0802a172
 8005ef0:	00000000 	.word	0x00000000
 8005ef4:	08005c77 	.word	0x08005c77
 8005ef8:	0802a16e 	.word	0x0802a16e

08005efc <_printf_common>:
 8005efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f00:	4616      	mov	r6, r2
 8005f02:	4699      	mov	r9, r3
 8005f04:	688a      	ldr	r2, [r1, #8]
 8005f06:	690b      	ldr	r3, [r1, #16]
 8005f08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	bfb8      	it	lt
 8005f10:	4613      	movlt	r3, r2
 8005f12:	6033      	str	r3, [r6, #0]
 8005f14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f18:	4607      	mov	r7, r0
 8005f1a:	460c      	mov	r4, r1
 8005f1c:	b10a      	cbz	r2, 8005f22 <_printf_common+0x26>
 8005f1e:	3301      	adds	r3, #1
 8005f20:	6033      	str	r3, [r6, #0]
 8005f22:	6823      	ldr	r3, [r4, #0]
 8005f24:	0699      	lsls	r1, r3, #26
 8005f26:	bf42      	ittt	mi
 8005f28:	6833      	ldrmi	r3, [r6, #0]
 8005f2a:	3302      	addmi	r3, #2
 8005f2c:	6033      	strmi	r3, [r6, #0]
 8005f2e:	6825      	ldr	r5, [r4, #0]
 8005f30:	f015 0506 	ands.w	r5, r5, #6
 8005f34:	d106      	bne.n	8005f44 <_printf_common+0x48>
 8005f36:	f104 0a19 	add.w	sl, r4, #25
 8005f3a:	68e3      	ldr	r3, [r4, #12]
 8005f3c:	6832      	ldr	r2, [r6, #0]
 8005f3e:	1a9b      	subs	r3, r3, r2
 8005f40:	42ab      	cmp	r3, r5
 8005f42:	dc26      	bgt.n	8005f92 <_printf_common+0x96>
 8005f44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f48:	1e13      	subs	r3, r2, #0
 8005f4a:	6822      	ldr	r2, [r4, #0]
 8005f4c:	bf18      	it	ne
 8005f4e:	2301      	movne	r3, #1
 8005f50:	0692      	lsls	r2, r2, #26
 8005f52:	d42b      	bmi.n	8005fac <_printf_common+0xb0>
 8005f54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f58:	4649      	mov	r1, r9
 8005f5a:	4638      	mov	r0, r7
 8005f5c:	47c0      	blx	r8
 8005f5e:	3001      	adds	r0, #1
 8005f60:	d01e      	beq.n	8005fa0 <_printf_common+0xa4>
 8005f62:	6823      	ldr	r3, [r4, #0]
 8005f64:	68e5      	ldr	r5, [r4, #12]
 8005f66:	6832      	ldr	r2, [r6, #0]
 8005f68:	f003 0306 	and.w	r3, r3, #6
 8005f6c:	2b04      	cmp	r3, #4
 8005f6e:	bf08      	it	eq
 8005f70:	1aad      	subeq	r5, r5, r2
 8005f72:	68a3      	ldr	r3, [r4, #8]
 8005f74:	6922      	ldr	r2, [r4, #16]
 8005f76:	bf0c      	ite	eq
 8005f78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f7c:	2500      	movne	r5, #0
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	bfc4      	itt	gt
 8005f82:	1a9b      	subgt	r3, r3, r2
 8005f84:	18ed      	addgt	r5, r5, r3
 8005f86:	2600      	movs	r6, #0
 8005f88:	341a      	adds	r4, #26
 8005f8a:	42b5      	cmp	r5, r6
 8005f8c:	d11a      	bne.n	8005fc4 <_printf_common+0xc8>
 8005f8e:	2000      	movs	r0, #0
 8005f90:	e008      	b.n	8005fa4 <_printf_common+0xa8>
 8005f92:	2301      	movs	r3, #1
 8005f94:	4652      	mov	r2, sl
 8005f96:	4649      	mov	r1, r9
 8005f98:	4638      	mov	r0, r7
 8005f9a:	47c0      	blx	r8
 8005f9c:	3001      	adds	r0, #1
 8005f9e:	d103      	bne.n	8005fa8 <_printf_common+0xac>
 8005fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fa8:	3501      	adds	r5, #1
 8005faa:	e7c6      	b.n	8005f3a <_printf_common+0x3e>
 8005fac:	18e1      	adds	r1, r4, r3
 8005fae:	1c5a      	adds	r2, r3, #1
 8005fb0:	2030      	movs	r0, #48	; 0x30
 8005fb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fb6:	4422      	add	r2, r4
 8005fb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fc0:	3302      	adds	r3, #2
 8005fc2:	e7c7      	b.n	8005f54 <_printf_common+0x58>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	4622      	mov	r2, r4
 8005fc8:	4649      	mov	r1, r9
 8005fca:	4638      	mov	r0, r7
 8005fcc:	47c0      	blx	r8
 8005fce:	3001      	adds	r0, #1
 8005fd0:	d0e6      	beq.n	8005fa0 <_printf_common+0xa4>
 8005fd2:	3601      	adds	r6, #1
 8005fd4:	e7d9      	b.n	8005f8a <_printf_common+0x8e>
	...

08005fd8 <_printf_i>:
 8005fd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fdc:	7e0f      	ldrb	r7, [r1, #24]
 8005fde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005fe0:	2f78      	cmp	r7, #120	; 0x78
 8005fe2:	4691      	mov	r9, r2
 8005fe4:	4680      	mov	r8, r0
 8005fe6:	460c      	mov	r4, r1
 8005fe8:	469a      	mov	sl, r3
 8005fea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005fee:	d807      	bhi.n	8006000 <_printf_i+0x28>
 8005ff0:	2f62      	cmp	r7, #98	; 0x62
 8005ff2:	d80a      	bhi.n	800600a <_printf_i+0x32>
 8005ff4:	2f00      	cmp	r7, #0
 8005ff6:	f000 80d8 	beq.w	80061aa <_printf_i+0x1d2>
 8005ffa:	2f58      	cmp	r7, #88	; 0x58
 8005ffc:	f000 80a3 	beq.w	8006146 <_printf_i+0x16e>
 8006000:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006004:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006008:	e03a      	b.n	8006080 <_printf_i+0xa8>
 800600a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800600e:	2b15      	cmp	r3, #21
 8006010:	d8f6      	bhi.n	8006000 <_printf_i+0x28>
 8006012:	a101      	add	r1, pc, #4	; (adr r1, 8006018 <_printf_i+0x40>)
 8006014:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006018:	08006071 	.word	0x08006071
 800601c:	08006085 	.word	0x08006085
 8006020:	08006001 	.word	0x08006001
 8006024:	08006001 	.word	0x08006001
 8006028:	08006001 	.word	0x08006001
 800602c:	08006001 	.word	0x08006001
 8006030:	08006085 	.word	0x08006085
 8006034:	08006001 	.word	0x08006001
 8006038:	08006001 	.word	0x08006001
 800603c:	08006001 	.word	0x08006001
 8006040:	08006001 	.word	0x08006001
 8006044:	08006191 	.word	0x08006191
 8006048:	080060b5 	.word	0x080060b5
 800604c:	08006173 	.word	0x08006173
 8006050:	08006001 	.word	0x08006001
 8006054:	08006001 	.word	0x08006001
 8006058:	080061b3 	.word	0x080061b3
 800605c:	08006001 	.word	0x08006001
 8006060:	080060b5 	.word	0x080060b5
 8006064:	08006001 	.word	0x08006001
 8006068:	08006001 	.word	0x08006001
 800606c:	0800617b 	.word	0x0800617b
 8006070:	682b      	ldr	r3, [r5, #0]
 8006072:	1d1a      	adds	r2, r3, #4
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	602a      	str	r2, [r5, #0]
 8006078:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800607c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006080:	2301      	movs	r3, #1
 8006082:	e0a3      	b.n	80061cc <_printf_i+0x1f4>
 8006084:	6820      	ldr	r0, [r4, #0]
 8006086:	6829      	ldr	r1, [r5, #0]
 8006088:	0606      	lsls	r6, r0, #24
 800608a:	f101 0304 	add.w	r3, r1, #4
 800608e:	d50a      	bpl.n	80060a6 <_printf_i+0xce>
 8006090:	680e      	ldr	r6, [r1, #0]
 8006092:	602b      	str	r3, [r5, #0]
 8006094:	2e00      	cmp	r6, #0
 8006096:	da03      	bge.n	80060a0 <_printf_i+0xc8>
 8006098:	232d      	movs	r3, #45	; 0x2d
 800609a:	4276      	negs	r6, r6
 800609c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060a0:	485e      	ldr	r0, [pc, #376]	; (800621c <_printf_i+0x244>)
 80060a2:	230a      	movs	r3, #10
 80060a4:	e019      	b.n	80060da <_printf_i+0x102>
 80060a6:	680e      	ldr	r6, [r1, #0]
 80060a8:	602b      	str	r3, [r5, #0]
 80060aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80060ae:	bf18      	it	ne
 80060b0:	b236      	sxthne	r6, r6
 80060b2:	e7ef      	b.n	8006094 <_printf_i+0xbc>
 80060b4:	682b      	ldr	r3, [r5, #0]
 80060b6:	6820      	ldr	r0, [r4, #0]
 80060b8:	1d19      	adds	r1, r3, #4
 80060ba:	6029      	str	r1, [r5, #0]
 80060bc:	0601      	lsls	r1, r0, #24
 80060be:	d501      	bpl.n	80060c4 <_printf_i+0xec>
 80060c0:	681e      	ldr	r6, [r3, #0]
 80060c2:	e002      	b.n	80060ca <_printf_i+0xf2>
 80060c4:	0646      	lsls	r6, r0, #25
 80060c6:	d5fb      	bpl.n	80060c0 <_printf_i+0xe8>
 80060c8:	881e      	ldrh	r6, [r3, #0]
 80060ca:	4854      	ldr	r0, [pc, #336]	; (800621c <_printf_i+0x244>)
 80060cc:	2f6f      	cmp	r7, #111	; 0x6f
 80060ce:	bf0c      	ite	eq
 80060d0:	2308      	moveq	r3, #8
 80060d2:	230a      	movne	r3, #10
 80060d4:	2100      	movs	r1, #0
 80060d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060da:	6865      	ldr	r5, [r4, #4]
 80060dc:	60a5      	str	r5, [r4, #8]
 80060de:	2d00      	cmp	r5, #0
 80060e0:	bfa2      	ittt	ge
 80060e2:	6821      	ldrge	r1, [r4, #0]
 80060e4:	f021 0104 	bicge.w	r1, r1, #4
 80060e8:	6021      	strge	r1, [r4, #0]
 80060ea:	b90e      	cbnz	r6, 80060f0 <_printf_i+0x118>
 80060ec:	2d00      	cmp	r5, #0
 80060ee:	d04d      	beq.n	800618c <_printf_i+0x1b4>
 80060f0:	4615      	mov	r5, r2
 80060f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80060f6:	fb03 6711 	mls	r7, r3, r1, r6
 80060fa:	5dc7      	ldrb	r7, [r0, r7]
 80060fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006100:	4637      	mov	r7, r6
 8006102:	42bb      	cmp	r3, r7
 8006104:	460e      	mov	r6, r1
 8006106:	d9f4      	bls.n	80060f2 <_printf_i+0x11a>
 8006108:	2b08      	cmp	r3, #8
 800610a:	d10b      	bne.n	8006124 <_printf_i+0x14c>
 800610c:	6823      	ldr	r3, [r4, #0]
 800610e:	07de      	lsls	r6, r3, #31
 8006110:	d508      	bpl.n	8006124 <_printf_i+0x14c>
 8006112:	6923      	ldr	r3, [r4, #16]
 8006114:	6861      	ldr	r1, [r4, #4]
 8006116:	4299      	cmp	r1, r3
 8006118:	bfde      	ittt	le
 800611a:	2330      	movle	r3, #48	; 0x30
 800611c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006120:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006124:	1b52      	subs	r2, r2, r5
 8006126:	6122      	str	r2, [r4, #16]
 8006128:	f8cd a000 	str.w	sl, [sp]
 800612c:	464b      	mov	r3, r9
 800612e:	aa03      	add	r2, sp, #12
 8006130:	4621      	mov	r1, r4
 8006132:	4640      	mov	r0, r8
 8006134:	f7ff fee2 	bl	8005efc <_printf_common>
 8006138:	3001      	adds	r0, #1
 800613a:	d14c      	bne.n	80061d6 <_printf_i+0x1fe>
 800613c:	f04f 30ff 	mov.w	r0, #4294967295
 8006140:	b004      	add	sp, #16
 8006142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006146:	4835      	ldr	r0, [pc, #212]	; (800621c <_printf_i+0x244>)
 8006148:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800614c:	6829      	ldr	r1, [r5, #0]
 800614e:	6823      	ldr	r3, [r4, #0]
 8006150:	f851 6b04 	ldr.w	r6, [r1], #4
 8006154:	6029      	str	r1, [r5, #0]
 8006156:	061d      	lsls	r5, r3, #24
 8006158:	d514      	bpl.n	8006184 <_printf_i+0x1ac>
 800615a:	07df      	lsls	r7, r3, #31
 800615c:	bf44      	itt	mi
 800615e:	f043 0320 	orrmi.w	r3, r3, #32
 8006162:	6023      	strmi	r3, [r4, #0]
 8006164:	b91e      	cbnz	r6, 800616e <_printf_i+0x196>
 8006166:	6823      	ldr	r3, [r4, #0]
 8006168:	f023 0320 	bic.w	r3, r3, #32
 800616c:	6023      	str	r3, [r4, #0]
 800616e:	2310      	movs	r3, #16
 8006170:	e7b0      	b.n	80060d4 <_printf_i+0xfc>
 8006172:	6823      	ldr	r3, [r4, #0]
 8006174:	f043 0320 	orr.w	r3, r3, #32
 8006178:	6023      	str	r3, [r4, #0]
 800617a:	2378      	movs	r3, #120	; 0x78
 800617c:	4828      	ldr	r0, [pc, #160]	; (8006220 <_printf_i+0x248>)
 800617e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006182:	e7e3      	b.n	800614c <_printf_i+0x174>
 8006184:	0659      	lsls	r1, r3, #25
 8006186:	bf48      	it	mi
 8006188:	b2b6      	uxthmi	r6, r6
 800618a:	e7e6      	b.n	800615a <_printf_i+0x182>
 800618c:	4615      	mov	r5, r2
 800618e:	e7bb      	b.n	8006108 <_printf_i+0x130>
 8006190:	682b      	ldr	r3, [r5, #0]
 8006192:	6826      	ldr	r6, [r4, #0]
 8006194:	6961      	ldr	r1, [r4, #20]
 8006196:	1d18      	adds	r0, r3, #4
 8006198:	6028      	str	r0, [r5, #0]
 800619a:	0635      	lsls	r5, r6, #24
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	d501      	bpl.n	80061a4 <_printf_i+0x1cc>
 80061a0:	6019      	str	r1, [r3, #0]
 80061a2:	e002      	b.n	80061aa <_printf_i+0x1d2>
 80061a4:	0670      	lsls	r0, r6, #25
 80061a6:	d5fb      	bpl.n	80061a0 <_printf_i+0x1c8>
 80061a8:	8019      	strh	r1, [r3, #0]
 80061aa:	2300      	movs	r3, #0
 80061ac:	6123      	str	r3, [r4, #16]
 80061ae:	4615      	mov	r5, r2
 80061b0:	e7ba      	b.n	8006128 <_printf_i+0x150>
 80061b2:	682b      	ldr	r3, [r5, #0]
 80061b4:	1d1a      	adds	r2, r3, #4
 80061b6:	602a      	str	r2, [r5, #0]
 80061b8:	681d      	ldr	r5, [r3, #0]
 80061ba:	6862      	ldr	r2, [r4, #4]
 80061bc:	2100      	movs	r1, #0
 80061be:	4628      	mov	r0, r5
 80061c0:	f7fa f82e 	bl	8000220 <memchr>
 80061c4:	b108      	cbz	r0, 80061ca <_printf_i+0x1f2>
 80061c6:	1b40      	subs	r0, r0, r5
 80061c8:	6060      	str	r0, [r4, #4]
 80061ca:	6863      	ldr	r3, [r4, #4]
 80061cc:	6123      	str	r3, [r4, #16]
 80061ce:	2300      	movs	r3, #0
 80061d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061d4:	e7a8      	b.n	8006128 <_printf_i+0x150>
 80061d6:	6923      	ldr	r3, [r4, #16]
 80061d8:	462a      	mov	r2, r5
 80061da:	4649      	mov	r1, r9
 80061dc:	4640      	mov	r0, r8
 80061de:	47d0      	blx	sl
 80061e0:	3001      	adds	r0, #1
 80061e2:	d0ab      	beq.n	800613c <_printf_i+0x164>
 80061e4:	6823      	ldr	r3, [r4, #0]
 80061e6:	079b      	lsls	r3, r3, #30
 80061e8:	d413      	bmi.n	8006212 <_printf_i+0x23a>
 80061ea:	68e0      	ldr	r0, [r4, #12]
 80061ec:	9b03      	ldr	r3, [sp, #12]
 80061ee:	4298      	cmp	r0, r3
 80061f0:	bfb8      	it	lt
 80061f2:	4618      	movlt	r0, r3
 80061f4:	e7a4      	b.n	8006140 <_printf_i+0x168>
 80061f6:	2301      	movs	r3, #1
 80061f8:	4632      	mov	r2, r6
 80061fa:	4649      	mov	r1, r9
 80061fc:	4640      	mov	r0, r8
 80061fe:	47d0      	blx	sl
 8006200:	3001      	adds	r0, #1
 8006202:	d09b      	beq.n	800613c <_printf_i+0x164>
 8006204:	3501      	adds	r5, #1
 8006206:	68e3      	ldr	r3, [r4, #12]
 8006208:	9903      	ldr	r1, [sp, #12]
 800620a:	1a5b      	subs	r3, r3, r1
 800620c:	42ab      	cmp	r3, r5
 800620e:	dcf2      	bgt.n	80061f6 <_printf_i+0x21e>
 8006210:	e7eb      	b.n	80061ea <_printf_i+0x212>
 8006212:	2500      	movs	r5, #0
 8006214:	f104 0619 	add.w	r6, r4, #25
 8006218:	e7f5      	b.n	8006206 <_printf_i+0x22e>
 800621a:	bf00      	nop
 800621c:	0802a179 	.word	0x0802a179
 8006220:	0802a18a 	.word	0x0802a18a

08006224 <__sread>:
 8006224:	b510      	push	{r4, lr}
 8006226:	460c      	mov	r4, r1
 8006228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800622c:	f000 f8b6 	bl	800639c <_read_r>
 8006230:	2800      	cmp	r0, #0
 8006232:	bfab      	itete	ge
 8006234:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006236:	89a3      	ldrhlt	r3, [r4, #12]
 8006238:	181b      	addge	r3, r3, r0
 800623a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800623e:	bfac      	ite	ge
 8006240:	6563      	strge	r3, [r4, #84]	; 0x54
 8006242:	81a3      	strhlt	r3, [r4, #12]
 8006244:	bd10      	pop	{r4, pc}

08006246 <__swrite>:
 8006246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800624a:	461f      	mov	r7, r3
 800624c:	898b      	ldrh	r3, [r1, #12]
 800624e:	05db      	lsls	r3, r3, #23
 8006250:	4605      	mov	r5, r0
 8006252:	460c      	mov	r4, r1
 8006254:	4616      	mov	r6, r2
 8006256:	d505      	bpl.n	8006264 <__swrite+0x1e>
 8006258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800625c:	2302      	movs	r3, #2
 800625e:	2200      	movs	r2, #0
 8006260:	f000 f868 	bl	8006334 <_lseek_r>
 8006264:	89a3      	ldrh	r3, [r4, #12]
 8006266:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800626a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800626e:	81a3      	strh	r3, [r4, #12]
 8006270:	4632      	mov	r2, r6
 8006272:	463b      	mov	r3, r7
 8006274:	4628      	mov	r0, r5
 8006276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800627a:	f000 b817 	b.w	80062ac <_write_r>

0800627e <__sseek>:
 800627e:	b510      	push	{r4, lr}
 8006280:	460c      	mov	r4, r1
 8006282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006286:	f000 f855 	bl	8006334 <_lseek_r>
 800628a:	1c43      	adds	r3, r0, #1
 800628c:	89a3      	ldrh	r3, [r4, #12]
 800628e:	bf15      	itete	ne
 8006290:	6560      	strne	r0, [r4, #84]	; 0x54
 8006292:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006296:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800629a:	81a3      	strheq	r3, [r4, #12]
 800629c:	bf18      	it	ne
 800629e:	81a3      	strhne	r3, [r4, #12]
 80062a0:	bd10      	pop	{r4, pc}

080062a2 <__sclose>:
 80062a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062a6:	f000 b813 	b.w	80062d0 <_close_r>
	...

080062ac <_write_r>:
 80062ac:	b538      	push	{r3, r4, r5, lr}
 80062ae:	4d07      	ldr	r5, [pc, #28]	; (80062cc <_write_r+0x20>)
 80062b0:	4604      	mov	r4, r0
 80062b2:	4608      	mov	r0, r1
 80062b4:	4611      	mov	r1, r2
 80062b6:	2200      	movs	r2, #0
 80062b8:	602a      	str	r2, [r5, #0]
 80062ba:	461a      	mov	r2, r3
 80062bc:	f000 f8a8 	bl	8006410 <_write>
 80062c0:	1c43      	adds	r3, r0, #1
 80062c2:	d102      	bne.n	80062ca <_write_r+0x1e>
 80062c4:	682b      	ldr	r3, [r5, #0]
 80062c6:	b103      	cbz	r3, 80062ca <_write_r+0x1e>
 80062c8:	6023      	str	r3, [r4, #0]
 80062ca:	bd38      	pop	{r3, r4, r5, pc}
 80062cc:	2000ca54 	.word	0x2000ca54

080062d0 <_close_r>:
 80062d0:	b538      	push	{r3, r4, r5, lr}
 80062d2:	4d06      	ldr	r5, [pc, #24]	; (80062ec <_close_r+0x1c>)
 80062d4:	2300      	movs	r3, #0
 80062d6:	4604      	mov	r4, r0
 80062d8:	4608      	mov	r0, r1
 80062da:	602b      	str	r3, [r5, #0]
 80062dc:	f000 f870 	bl	80063c0 <_close>
 80062e0:	1c43      	adds	r3, r0, #1
 80062e2:	d102      	bne.n	80062ea <_close_r+0x1a>
 80062e4:	682b      	ldr	r3, [r5, #0]
 80062e6:	b103      	cbz	r3, 80062ea <_close_r+0x1a>
 80062e8:	6023      	str	r3, [r4, #0]
 80062ea:	bd38      	pop	{r3, r4, r5, pc}
 80062ec:	2000ca54 	.word	0x2000ca54

080062f0 <_fstat_r>:
 80062f0:	b538      	push	{r3, r4, r5, lr}
 80062f2:	4d07      	ldr	r5, [pc, #28]	; (8006310 <_fstat_r+0x20>)
 80062f4:	2300      	movs	r3, #0
 80062f6:	4604      	mov	r4, r0
 80062f8:	4608      	mov	r0, r1
 80062fa:	4611      	mov	r1, r2
 80062fc:	602b      	str	r3, [r5, #0]
 80062fe:	f000 f867 	bl	80063d0 <_fstat>
 8006302:	1c43      	adds	r3, r0, #1
 8006304:	d102      	bne.n	800630c <_fstat_r+0x1c>
 8006306:	682b      	ldr	r3, [r5, #0]
 8006308:	b103      	cbz	r3, 800630c <_fstat_r+0x1c>
 800630a:	6023      	str	r3, [r4, #0]
 800630c:	bd38      	pop	{r3, r4, r5, pc}
 800630e:	bf00      	nop
 8006310:	2000ca54 	.word	0x2000ca54

08006314 <_isatty_r>:
 8006314:	b538      	push	{r3, r4, r5, lr}
 8006316:	4d06      	ldr	r5, [pc, #24]	; (8006330 <_isatty_r+0x1c>)
 8006318:	2300      	movs	r3, #0
 800631a:	4604      	mov	r4, r0
 800631c:	4608      	mov	r0, r1
 800631e:	602b      	str	r3, [r5, #0]
 8006320:	f000 f85e 	bl	80063e0 <_isatty>
 8006324:	1c43      	adds	r3, r0, #1
 8006326:	d102      	bne.n	800632e <_isatty_r+0x1a>
 8006328:	682b      	ldr	r3, [r5, #0]
 800632a:	b103      	cbz	r3, 800632e <_isatty_r+0x1a>
 800632c:	6023      	str	r3, [r4, #0]
 800632e:	bd38      	pop	{r3, r4, r5, pc}
 8006330:	2000ca54 	.word	0x2000ca54

08006334 <_lseek_r>:
 8006334:	b538      	push	{r3, r4, r5, lr}
 8006336:	4d07      	ldr	r5, [pc, #28]	; (8006354 <_lseek_r+0x20>)
 8006338:	4604      	mov	r4, r0
 800633a:	4608      	mov	r0, r1
 800633c:	4611      	mov	r1, r2
 800633e:	2200      	movs	r2, #0
 8006340:	602a      	str	r2, [r5, #0]
 8006342:	461a      	mov	r2, r3
 8006344:	f000 f854 	bl	80063f0 <_lseek>
 8006348:	1c43      	adds	r3, r0, #1
 800634a:	d102      	bne.n	8006352 <_lseek_r+0x1e>
 800634c:	682b      	ldr	r3, [r5, #0]
 800634e:	b103      	cbz	r3, 8006352 <_lseek_r+0x1e>
 8006350:	6023      	str	r3, [r4, #0]
 8006352:	bd38      	pop	{r3, r4, r5, pc}
 8006354:	2000ca54 	.word	0x2000ca54

08006358 <memmove>:
 8006358:	4288      	cmp	r0, r1
 800635a:	b510      	push	{r4, lr}
 800635c:	eb01 0402 	add.w	r4, r1, r2
 8006360:	d902      	bls.n	8006368 <memmove+0x10>
 8006362:	4284      	cmp	r4, r0
 8006364:	4623      	mov	r3, r4
 8006366:	d807      	bhi.n	8006378 <memmove+0x20>
 8006368:	1e43      	subs	r3, r0, #1
 800636a:	42a1      	cmp	r1, r4
 800636c:	d008      	beq.n	8006380 <memmove+0x28>
 800636e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006372:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006376:	e7f8      	b.n	800636a <memmove+0x12>
 8006378:	4402      	add	r2, r0
 800637a:	4601      	mov	r1, r0
 800637c:	428a      	cmp	r2, r1
 800637e:	d100      	bne.n	8006382 <memmove+0x2a>
 8006380:	bd10      	pop	{r4, pc}
 8006382:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006386:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800638a:	e7f7      	b.n	800637c <memmove+0x24>

0800638c <_malloc_usable_size_r>:
 800638c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006390:	1f18      	subs	r0, r3, #4
 8006392:	2b00      	cmp	r3, #0
 8006394:	bfbc      	itt	lt
 8006396:	580b      	ldrlt	r3, [r1, r0]
 8006398:	18c0      	addlt	r0, r0, r3
 800639a:	4770      	bx	lr

0800639c <_read_r>:
 800639c:	b538      	push	{r3, r4, r5, lr}
 800639e:	4d07      	ldr	r5, [pc, #28]	; (80063bc <_read_r+0x20>)
 80063a0:	4604      	mov	r4, r0
 80063a2:	4608      	mov	r0, r1
 80063a4:	4611      	mov	r1, r2
 80063a6:	2200      	movs	r2, #0
 80063a8:	602a      	str	r2, [r5, #0]
 80063aa:	461a      	mov	r2, r3
 80063ac:	f000 f828 	bl	8006400 <_read>
 80063b0:	1c43      	adds	r3, r0, #1
 80063b2:	d102      	bne.n	80063ba <_read_r+0x1e>
 80063b4:	682b      	ldr	r3, [r5, #0]
 80063b6:	b103      	cbz	r3, 80063ba <_read_r+0x1e>
 80063b8:	6023      	str	r3, [r4, #0]
 80063ba:	bd38      	pop	{r3, r4, r5, pc}
 80063bc:	2000ca54 	.word	0x2000ca54

080063c0 <_close>:
 80063c0:	4b02      	ldr	r3, [pc, #8]	; (80063cc <_close+0xc>)
 80063c2:	2258      	movs	r2, #88	; 0x58
 80063c4:	601a      	str	r2, [r3, #0]
 80063c6:	f04f 30ff 	mov.w	r0, #4294967295
 80063ca:	4770      	bx	lr
 80063cc:	2000ca54 	.word	0x2000ca54

080063d0 <_fstat>:
 80063d0:	4b02      	ldr	r3, [pc, #8]	; (80063dc <_fstat+0xc>)
 80063d2:	2258      	movs	r2, #88	; 0x58
 80063d4:	601a      	str	r2, [r3, #0]
 80063d6:	f04f 30ff 	mov.w	r0, #4294967295
 80063da:	4770      	bx	lr
 80063dc:	2000ca54 	.word	0x2000ca54

080063e0 <_isatty>:
 80063e0:	4b02      	ldr	r3, [pc, #8]	; (80063ec <_isatty+0xc>)
 80063e2:	2258      	movs	r2, #88	; 0x58
 80063e4:	601a      	str	r2, [r3, #0]
 80063e6:	2000      	movs	r0, #0
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	2000ca54 	.word	0x2000ca54

080063f0 <_lseek>:
 80063f0:	4b02      	ldr	r3, [pc, #8]	; (80063fc <_lseek+0xc>)
 80063f2:	2258      	movs	r2, #88	; 0x58
 80063f4:	601a      	str	r2, [r3, #0]
 80063f6:	f04f 30ff 	mov.w	r0, #4294967295
 80063fa:	4770      	bx	lr
 80063fc:	2000ca54 	.word	0x2000ca54

08006400 <_read>:
 8006400:	4b02      	ldr	r3, [pc, #8]	; (800640c <_read+0xc>)
 8006402:	2258      	movs	r2, #88	; 0x58
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	f04f 30ff 	mov.w	r0, #4294967295
 800640a:	4770      	bx	lr
 800640c:	2000ca54 	.word	0x2000ca54

08006410 <_write>:
 8006410:	4b02      	ldr	r3, [pc, #8]	; (800641c <_write+0xc>)
 8006412:	2258      	movs	r2, #88	; 0x58
 8006414:	601a      	str	r2, [r3, #0]
 8006416:	f04f 30ff 	mov.w	r0, #4294967295
 800641a:	4770      	bx	lr
 800641c:	2000ca54 	.word	0x2000ca54

08006420 <_init>:
 8006420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006422:	bf00      	nop
 8006424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006426:	bc08      	pop	{r3}
 8006428:	469e      	mov	lr, r3
 800642a:	4770      	bx	lr

0800642c <_fini>:
 800642c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642e:	bf00      	nop
 8006430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006432:	bc08      	pop	{r3}
 8006434:	469e      	mov	lr, r3
 8006436:	4770      	bx	lr
